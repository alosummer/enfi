package cux.oracle.apps.po.document.order.server;

import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PayPlanHeaderDisVORowImpl extends OAViewRowImpl {
    public static final int PAIDTOTAL = 0;
    public static final int PAIDPERCENT = 1;
    public static final int UNPAIDREMAINTOTAL = 2;
    public static final int INVTOTAL = 3;
    public static final int INVPERCENT = 4;
    public static final int UNINVREMAINTOTAL = 5;
    public static final int CONFIRMTOTAL = 6;
    public static final int CONFIRMUNPAIDTOTAL = 7;

    /**This is the default constructor (do not remove)
     */
    public PayPlanHeaderDisVORowImpl() {
    }

    /**Gets the attribute value for the calculated attribute PaidTotal
     */
    public Number getPaidTotal() {
        return (Number)getAttributeInternal(PAIDTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute PaidTotal
     */
    public void setPaidTotal(Number value) {
        setAttributeInternal(PAIDTOTAL, value);
    }

    /**Gets the attribute value for the calculated attribute PaidPercent
     */
    public Number getPaidPercent() {
        return (Number)getAttributeInternal(PAIDPERCENT);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute PaidPercent
     */
    public void setPaidPercent(Number value) {
        setAttributeInternal(PAIDPERCENT, value);
    }

    /**Gets the attribute value for the calculated attribute UnpaidRemainTotal
     */
    public Number getUnpaidRemainTotal() {
        return (Number)getAttributeInternal(UNPAIDREMAINTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute UnpaidRemainTotal
     */
    public void setUnpaidRemainTotal(Number value) {
        setAttributeInternal(UNPAIDREMAINTOTAL, value);
    }

    /**Gets the attribute value for the calculated attribute InvTotal
     */
    public Number getInvTotal() {
        return (Number)getAttributeInternal(INVTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute InvTotal
     */
    public void setInvTotal(Number value) {
        setAttributeInternal(INVTOTAL, value);
    }

    /**Gets the attribute value for the calculated attribute InvPercent
     */
    public Number getInvPercent() {
        return (Number)getAttributeInternal(INVPERCENT);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute InvPercent
     */
    public void setInvPercent(Number value) {
        setAttributeInternal(INVPERCENT, value);
    }

    /**Gets the attribute value for the calculated attribute UninvRemainTotal
     */
    public Number getUninvRemainTotal() {
        return (Number)getAttributeInternal(UNINVREMAINTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute UninvRemainTotal
     */
    public void setUninvRemainTotal(Number value) {
        setAttributeInternal(UNINVREMAINTOTAL, value);
    }

    /**Gets the attribute value for the calculated attribute ConfirmTotal
     */
    public Number getConfirmTotal() {
        return (Number)getAttributeInternal(CONFIRMTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConfirmTotal
     */
    public void setConfirmTotal(Number value) {
        setAttributeInternal(CONFIRMTOTAL, value);
    }

    /**Gets the attribute value for the calculated attribute ConfirmUnpaidTotal
     */
    public Number getConfirmUnpaidTotal() {
        return (Number)getAttributeInternal(CONFIRMUNPAIDTOTAL);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConfirmUnpaidTotal
     */
    public void setConfirmUnpaidTotal(Number value) {
        setAttributeInternal(CONFIRMUNPAIDTOTAL, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case PAIDTOTAL:
            return getPaidTotal();
        case PAIDPERCENT:
            return getPaidPercent();
        case UNPAIDREMAINTOTAL:
            return getUnpaidRemainTotal();
        case INVTOTAL:
            return getInvTotal();
        case INVPERCENT:
            return getInvPercent();
        case UNINVREMAINTOTAL:
            return getUninvRemainTotal();
        case CONFIRMTOTAL:
            return getConfirmTotal();
        case CONFIRMUNPAIDTOTAL:
            return getConfirmUnpaidTotal();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case PAIDTOTAL:
            setPaidTotal((Number)value);
            return;
        case PAIDPERCENT:
            setPaidPercent((Number)value);
            return;
        case UNPAIDREMAINTOTAL:
            setUnpaidRemainTotal((Number)value);
            return;
        case INVTOTAL:
            setInvTotal((Number)value);
            return;
        case INVPERCENT:
            setInvPercent((Number)value);
            return;
        case UNINVREMAINTOTAL:
            setUninvRemainTotal((Number)value);
            return;
        case CONFIRMTOTAL:
            setConfirmTotal((Number)value);
            return;
        case CONFIRMUNPAIDTOTAL:
            setConfirmUnpaidTotal((Number)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }
}
