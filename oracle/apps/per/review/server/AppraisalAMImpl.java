package cux.oracle.apps.per.review.server;

import cux.oracle.apps.per.poplist.server.KPIAreaVOImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;

import java.text.DecimalFormat;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppraisalAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public AppraisalAMImpl() {
    }

    /**
     * Rollback database transactions
     */
    public void rollback() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.rollback();
    }

    /**
     * Commit database changes
     */
    public void commit() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.commit();
    }

    /**
     * initialize the KPI classes of the current contract
     * @param appraisalId
     */
    public void initAppraisalClass(String appraisalId) {
        OAViewObject vo = (OAViewObject)findViewObject("ContractClassVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }

    /**
     * initialize appraisal content
     * @param appraisalId
     */
    public void initAppraisalEmp(String appraisalId, String personType) {
        OAViewObject vo = (OAViewObject)findViewObject("AppraisalEmpVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :2");
        Number type = null;
        try {
            type = new Number(personType);
        } catch (Exception e) {
            ;
        }
        vo.setWhereClauseParam(0, type);
        vo.setWhereClauseParam(1, appraisalId);
        vo.executeQuery();
    }

    /**
     * initialize appraisal content
     * @param appraisalId
     */
    public void initAppraisalContract(String appraisalId) {
        OAViewObject vo = (OAViewObject)findViewObject("ContractContentVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }

    public void initCopy(String personId, String nappraisalId) {
        AppraisalCopyVOImpl vo = (AppraisalCopyVOImpl)getAppraisalCopyVO1();
        vo.initQuery(personId, nappraisalId);

    }

    /*
     * Manual Search add by fl 20091106
     */

    public void initQuery(String role, String phase, String personId, 
                          String orgId, String yearFrom, String yearTo, 
                          String status, String empName, 
                          Boolean executeQuery) {
        AppraisalEmpVOImpl vo = getAppraisalEmpVO1();

        if (vo == 
            null) //phase, personId, orgId,yearFrom,yearTo,status,empName, executeQuery
        {
            MessageToken[] tokens = 
            { new MessageToken("OBJECT_NAME", "AppraisalEmpVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", tokens);
        }

        vo.initQuery(role, phase, personId, orgId, yearFrom, yearTo, status, 
                     empName, executeQuery);
    }

    /**
     * Copy contract add by fl
     */
    public String processCopy(String oappraisalId, String nappraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_per_review_pkg.copy_contract(?,?,?)", 
                                                1);
        try {
            cs.setString(1, oappraisalId);
            cs.setString(2, nappraisalId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * initialize 
     * @param appraisalId
     */
    public void initAppraisalAttendList(String appraisalId) {
        AppraisalAttendEnterVOImpl vo = 
            (AppraisalAttendEnterVOImpl)findViewObject("AppraisalAttendEnterVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }

    /**
     * initialize appraisal approval comment list
     * @param appraisalId
     */
    public void initAppraisalComments(String appraisalId) {
        OAViewObject vo = (OAViewObject)findViewObject("AppraisalAttendVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }

    /**
     * initialize appraisal approval comment list
     * add by dl 2009.10.09
     * @param appraisalId
     */
    public void initAppraisalAttendNote(String appraisalId) {
        OAViewObject vo = 
            (OAViewObject)findViewObject("AppraisalAttendNoteVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }


    public void queryAppKpiClasses(String appraisalId) {
        OAViewObject vo = getContractClassVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("APPRAISAL_ID = :1");
        vo.setWhereClauseParam(0, appraisalId);
        vo.executeQuery();
    }

    public void queryAppKpi(String appraisalId, String kpiClass) {
        AppraisalKPIVOImpl vo = getAppraisalKPIVO1();
        vo.executeQuery(appraisalId, kpiClass);
    }

    public void queryChildContracts(String contractId) {
        OAViewObject vo = getContractKPIDetailVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("PARENT_CONTRACT_ID = :1");
        vo.setWhereClauseParam(0, contractId);
        //vo.setMaxFetchSize(-1); //add by dl 2009.12.14
        vo.executeQuery();
    }

    /**
     * Delete contract lines
     */
    public void delContractContent(String contractId) {
        OAViewObject vo = null;
        vo = (OAViewObject)findViewObject("AppraisalKPIVO1");
        vo.executeQuery();
        Object obj[] = new Object[1];
        obj[0] = contractId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
        }
    }

    /**
     * Delete contract lines
     */
    public void delContractDetail(String contractId) {
        OAViewObject vo = null;
        vo = (OAViewObject)findViewObject("ContractKPIDetailVO1");
        vo.executeQuery();
        Object obj[] = new Object[1];
        obj[0] = contractId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
        }
    }

    /**
     * Save and submit for approval
     */
    public String getKpiClassType(String appraisalId, String kpiClass) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_common_pkg.get_kpi_class_type(?,?,?)", 
                                                1);
        try {
            cs.setLong(1, Long.parseLong(appraisalId));
            cs.setString(2, kpiClass);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Submit contract for approval
     */
    public String submitForApproval(String appraisalId) {
        String result = "";
        validateScore(appraisalId);
        OADBTransaction transaction = getOADBTransaction();
        //CallableStatement cs = transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_contract_approval(?,?)", 1);
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_next_approval(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        //System.out.println("submitForApproval result = "+result);
        return result;
    }

    /**
     * Submit contract for return
     */
    public String submitForReturn(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        //CallableStatement cs = transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_contract_approval(?,?)", 1);
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_for_return(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
            return result;
        }
        //System.out.println("submitForApproval result = "+result);

    }

    /**
     * 提交选中的员工绩效合同
     * @return String 
     */
    public String batchApprove() {
        AppraisalEmpVOImpl vo = this.getAppraisalEmpVO1();
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator selectIter = null;
        Number appraisalId = null;
        AppraisalEmpVORowImpl row = null;
        int count = 0;
        String lReturn = "";
        if (fetchedRowCount > 0) {
            selectIter = vo.createRowSetIterator("selectIter");
            selectIter.setRangeStart(0);
            selectIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                appraisalId = null;
                System.out.println(i);
                row = (AppraisalEmpVORowImpl)selectIter.getRowAtRangeIndex(i);

                if (row.getSelectFlag() != null && 
                    row.getSelectFlag().equals("Y")) {
                    System.out.println(row.getSelectFlag());

                    appraisalId = row.getAppraisalId();
                    System.out.println(appraisalId);
                    lReturn = submitForApproval(appraisalId.toString());
                    if (lReturn.equals("Y")) {
                        count++;
                        row.setSelectFlag(null);
                    } else {
                        vo.executeQuery();
                        return "CUX_JX_BATCH_APPROVE_ERROR";
                    }

                }
            }
        }
        if (count > 0) {
            vo.executeQuery();
            return "CUX_JX_BATCH_APPROVE_SUCCESS";
        }

        return "CUX_JX_NO_SELECTED";
    }

    /**
     * ���ܾ� ADD by dl at 2009.10.09
     * @return
     */
    public String batchReject() {
        AppraisalEmpVOImpl vo = this.getAppraisalEmpVO1();
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator selectIter = null;
        Number appraisalId = null;
        AppraisalEmpVORowImpl row = null;
        int count = 0;
        String lReturn = "";
        if (fetchedRowCount > 0) {
            selectIter = vo.createRowSetIterator("selectIter");
            selectIter.setRangeStart(0);
            selectIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                appraisalId = null;
                row = (AppraisalEmpVORowImpl)selectIter.getRowAtRangeIndex(i);

                if (row.getSelectFlag() != null && 
                    row.getSelectFlag().equals("Y")) {
                    System.out.println(row.getSelectFlag());

                    appraisalId = row.getAppraisalId();
                    System.out.println(appraisalId);
                    lReturn = submitForReturn(appraisalId.toString());
                    if (lReturn.equals("Y")) {
                        count++;
                        row.setSelectFlag(null);
                    } else {
                        vo.executeQuery();
                        return "CUX_JX_BATCH_REJECT_ERROR";
                    }

                }
            }
        }
        if (count > 0) {
            vo.executeQuery();
            return "CUX_JX_BATCH_REJECT_SUCCESS";
        }

        return "CUX_JX_NO_SELECTED";
    }

    /**
     * Save and submit for approval
     */
    public String isCurrentPerformer(String appraisalId) {
        String result = "";
        String sql = 
            "BEGIN :1 := cux_jxkh_common_pkg.is_present_performer(:2); END;";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.execute();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**
     * Save and submit for approval
     */
    public String getUpdateFlag(String appraisalId, String kpiClass) {
        String result = "";
        String sql = 
            "BEGIN :1 := cux_jxkh_common_pkg.get_kpi_update_flag(:2,:3); END;";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.setString(3, kpiClass);
            cs.execute();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**
     * Save and submit for approval
     */
    public String canAppeal(String appraisalId) {
        String result = "";
        String sql = "BEGIN :1 := cux_jxkh_common_pkg.can_appeal(:2); END;";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.execute();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**
     * 
     */
    public String getAppealStatus(String appraisalId) {
        String result = "";
        String sql = 
            "BEGIN :1 := cux_jxkh_common_pkg.get_appeal_status(:2); END;";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.execute();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**
     * Get flag for displaying final mark
     */
    public String getFinalLevelFlag(String appraisalId) {
        String result = "";
        String sql = 
            "BEGIN :1 := cux_jxkh_common_pkg.display_level_flag(:2); END;";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.execute();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**
     * Save and submit for approval
     */
    public String applyContractTemplate(String tmplId, String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.add_contract_content(?,?,?)", 
                                                1);
        try {
            cs.setString(1, tmplId);
            cs.setString(2, appraisalId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Save and submit for approval
     */
    public String submitAppeal(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_appeal(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /*
     * 是否显示提交按钮
     */

    public String getDisplaySubmitFlag() {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_common_pkg.get_submit_flag(?)", 
                                                1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Save and submit for approval
     */
    public String verifyPromiseeIdentity(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_common_pkg.verify_promiseer_role(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Save and submit for approval
     */
    public String approveAppeal(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.approve_appeal(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Save and submit for approval
     */
    public String rejectAppeal(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.reject_appeal(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * Query templates
     */
    public void queryTemplates() {
        OAViewObject vo = null;
        vo = (OAViewObject)findViewObject("TmplDetailVO1");
        if (!vo.isPreparedForExecution())
            vo.executeQuery();
    }


    /**
     * Initiate contract data
     */
    public void initContract(String role) {
        AppraisalEmpVOImpl vo = 
            (AppraisalEmpVOImpl)findViewObject("AppraisalEmpVO1");
        vo.initQuery(role);
    }

    /**
     * ��֤���7�
     * ��֤���еķ�ϵͳ��ָ�����7ֽ׶Σ���Ա��4������Ҫ�������7֣��Ծ���4�����������
     * ��ϵͳָ��ķ�Χ:�Ǹ�ָ�ꣻ�ֶ����ָ�ꣻϵͳָ��-1�����Ҳ���Լ������;
     * dl 2009.12.3
     */
    public void validateManualKpiSelfScore() {
        OAViewObject vo = getAppraisalKPIVO1();
        String kpiNameList = "";
        AppraisalKPIVORowImpl row = null;
        int fetchedRowCount = vo.getRangeSize();
        if (fetchedRowCount > 0) {
            RowSetIterator validateManualKpiIter = 
                vo.createRowSetIterator("validateManualKpi");
            validateManualKpiIter.setRangeStart(0);
            validateManualKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                System.out.println("i fetchedRowCount + " + i + ":" + 
                                   fetchedRowCount);
                row = 
(AppraisalKPIVORowImpl)validateManualKpiIter.getRowAtRangeIndex(i);
                if (row != null && 
                    (row.getIsParent() == null || row.getIsParent().equals("N")) && 
                    (row.getHalfInputFlag() == null || 
                     row.getHalfInputFlag()) && 
                    (row.getSelfEvalValue() == null || 
                     row.getSelfEvalValue().toString().trim().equals(""))) {
                    if (kpiNameList.equals(""))
                        kpiNameList = row.getKpiName();
                    else
                        kpiNameList = kpiNameList + ";" + row.getKpiName();
                }
            }
            if (!kpiNameList.equals("")) {
                MessageToken[] tokens = 
                { new MessageToken("LIST", kpiNameList) };
                throw new OAException("CUX", "CUX_EPM_SELF_SCORE_INPUT_WAR", 
                                      tokens);
            }
        }

    }

    /**
     * ��֤��ָ�����7�
     * dl 2009.12.23
     */
    public void validateChildKpiSelfScore() {
        OAViewObject vo = getContractKPIDetailVO1();
        String kpiNameList = "";
        ContractKPIDetailVORowImpl row = null;
        int fetchedRowCount = vo.getRangeSize();
        if (fetchedRowCount > 0) {
            RowSetIterator validateManualKpiIter = 
                vo.createRowSetIterator("validateChildKpi");
            validateManualKpiIter.setRangeStart(0);
            validateManualKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                System.out.println("i fetchedRowCount + " + i + ":" + 
                                   fetchedRowCount);
                row = 
(ContractKPIDetailVORowImpl)validateManualKpiIter.getRowAtRangeIndex(i);
                if (row != null && 
                    (row.getSelfEvalValue() == null || row.getSelfEvalValue().toString().trim().equals(""))) {
                    if (kpiNameList.equals(""))
                        kpiNameList = row.getKpiName();
                    else
                        kpiNameList = kpiNameList + ";" + row.getKpiName();
                }
            }
            if (!kpiNameList.equals("")) {
                MessageToken[] tokens = 
                { new MessageToken("LIST", kpiNameList) };
                throw new OAException("CUX", "CUX_EPM_SELF_SCORE_INPUT_WAR", 
                                      tokens);
            }
        }

    }

    /**
     * ��֤�����7�
     * ��֤���еķ�ϵͳ��ָ�����7ֽ׶Σ���Ա��4������Ҫ�������7֣��Ծ���4�����������
     * ��ϵͳָ��ķ�Χ:�Ǹ�ָ�ꣻ�ֶ����ָ�ꣻϵͳָ��-1�����Ҳ���Լ������;
     * dl 2009.12.3
     */
    public void validateManualKpiScore() {
        OAViewObject vo = getAppraisalKPIVO1();
        String kpiNameList = "";
        AppraisalKPIVORowImpl row = null;
        int fetchedRowCount = vo.getRangeSize();
        if (fetchedRowCount > 0) {
            RowSetIterator validateManualKpiIter = 
                vo.createRowSetIterator("validateManualKpi");
            validateManualKpiIter.setRangeStart(0);
            validateManualKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(AppraisalKPIVORowImpl)validateManualKpiIter.getRowAtRangeIndex(i);
                if (row != null && 
                    (row.getIsParent() == null || row.getIsParent().equals("N")) && 
                    (row.getHalfInputFlag() == null || 
                     row.getHalfInputFlag()) && 
                    (row.getScoreValue() == null || row.getScoreValue().toString().trim().equals(""))) {
                    if (kpiNameList.equals(""))
                        kpiNameList = row.getKpiName();
                    else
                        kpiNameList = kpiNameList + ";" + row.getKpiName();
                }
            }
            if (!kpiNameList.equals("")) {
                MessageToken[] tokens = 
                { new MessageToken("LIST", kpiNameList) };
                throw new OAException("CUX", "CUX_EPM_SCORE_INPUT_WAR", 
                                      tokens);
            }
        }

    }

    /**
     * ��֤��ָ�꾭���7�
     * dl 2009.12.23
     */
    public void validateChildKpiScore() {
        OAViewObject vo = this.getContractKPIDetailVO1();
        String kpiNameList = "";
        ContractKPIDetailVORowImpl row = null;
        int fetchedRowCount = vo.getRangeSize();
        if (fetchedRowCount > 0) {
            RowSetIterator validateManualKpiIter = 
                vo.createRowSetIterator("validateChildKpi");
            validateManualKpiIter.setRangeStart(0);
            validateManualKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(ContractKPIDetailVORowImpl)validateManualKpiIter.getRowAtRangeIndex(i);
                if (row != null && 
                    (row.getScoreValue() == null || row.getScoreValue().toString().trim().equals(""))) {
                    if (kpiNameList.equals(""))
                        kpiNameList = row.getKpiName();
                    else
                        kpiNameList = kpiNameList + ";" + row.getKpiName();
                }
            }
            if (!kpiNameList.equals("")) {
                MessageToken[] tokens = 
                { new MessageToken("LIST", kpiNameList) };
                throw new OAException("CUX", "CUX_EPM_SCORE_INPUT_WAR", 
                                      tokens);
            }
        }

    }


    //computeStdKPIMark

    public void computeStdKPIMark() {
        OAViewObject vo = getAppraisalKPIVO1();
        AppraisalKPIVORowImpl row = null;
        double KpiValue = 0;

        /*20090926 zs ���ܷ�ҳ*/
        int fetchedRowCount = vo.getRowCount(); //.getFetchedRowCount();
        /*20090926 zs*/
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(AppraisalKPIVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                double scoreValue = 0;
                /*20090913 zs kpiΪָ�����ѡ��4�ģ���ؼ���ָ�꣬�����м�������*/
                if
                    /*20090922 ϵͳ����֣��ֹ��Ķ�Ϊֱ�Ӵ��*/
                    (row.getKpiScoringMethod() != null && 
                     !row.getKpiScoringMethod().equals("") && 
                     (row.getKpiDataSource() != null && 
                      row.getKpiDataSource().equals("-1"))) {
                    /*20090913 zs*/
                    if (row.getTargetValue() != null && 
                        row.getMinimumValue() != null && 
                        (row.getActualValue() != null || 
                         (row.getIsParent() != null && 
                          row.getIsParent().equals("Y"))) && 
                        (row.getKpiDataSource() != null && 
                         !row.getKpiDataSource().equals(""))) {
                        double targetValue = 
                            row.getTargetValue().doubleValue();
                        double minimumValue = 
                            row.getMinimumValue().doubleValue();
                        double actualValue = -1;
                        if (row.getIsParent().equals("N"))
                            actualValue = row.getActualValue().doubleValue();
                        String kpiScoringMethod = row.getKpiScoringMethod();
                        String kpiDataSource = row.getKpiDataSource();
                        /*20090913 zs*/
                        //���4ԴΪϵͳ�ģ������������7�ʱ�����ܽ��7�ֱ�Ӳ�����ݿ⣬��ʱSys������߼�����computeOthKpiMethodһ����
                        double scoreValue_t = -1;
                        if (row.getScoreValue() != null)
                            scoreValue_t = row.getScoreValue().doubleValue();
                        scoreValue = 
                                computeOthKpiMethod(targetValue, minimumValue, 
                                                    actualValue, 
                                                    kpiScoringMethod, 
                                                    scoreValue_t);
                        /*20090913 zs*/
                        if (scoreValue > 100)
                            scoreValue = 100;
                        if (scoreValue < 0)
                            scoreValue = 0;
                        //�������� zs20101210
                        DecimalFormat df = new DecimalFormat("#.00");
                        scoreValue = Double.valueOf(df.format(scoreValue));
                        //scoreValue = Math.round(scoreValue * 1000) / 1000;
                        row.setAttribute("ScoreValue", 
                                         scoreValue); //.setScoreValue(scoreValue);
                        KpiValue = KpiValue + scoreValue; /*������ʵû����*/

                    } else {
                        /*20090923*/
                        //20091119 ��ʵ��ֵ������֤
                        //throw new OAException("CUX", "CUX_KPI_COMPUTE_WAR");
                        ;
                    }
                    /*20090913 zs kpiΪ�ֹ���ӵģ��繤�����񣬼�ֱ�Ӵ��*/
                } else {
                    if (row.getScoreValue() != null && 
                        !row.getScoreValue().equals("")) {
                        scoreValue = row.getScoreValue().doubleValue();

                        if (scoreValue > 100)
                            scoreValue = 100;
                        if (scoreValue < 0)
                            scoreValue = 0;

                        //��������
                        DecimalFormat df = new DecimalFormat("#.00");
                        scoreValue = Double.valueOf(df.format(scoreValue));
                        //scoreValue = (double)Math.round(scoreValue * 1000) / 1000;
                        row.setAttribute("ScoreValue", 
                                         scoreValue); //.setScoreValue(scoreValue);
                        KpiValue = KpiValue + scoreValue; /*������ʵû����*/
                    } else {
                        /*20090923 zs*/
                        // commented by dely.wang 20091119 
                        //throw new OAException("CUX", "CUX_KPI_COMPUTESCORE_WAR");
                        ;
                    }
                }
                /*20090913 zs*/
            }
        }
        computeKpiIter.closeRowSetIterator();
        //zs

    }
    /*��׼���˼������ӿ���*/
    //computeAddKPIMark

    public void computeAddKPIMark() {
        OAViewObject vo = getAppraisalKPIVO1();
        AppraisalKPIVORowImpl row = null;
        // double KpiValue = 0;
        /*20090926 zs ���ܷ�ҳ*/
        int fetchedRowCount = vo.getRowCount(); //.getFetchedRowCount();
        /*20090926 zs*/
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(AppraisalKPIVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                double scoreValue = 0;
                if (row.getScoreValue() != null || 
                    (row.getIsParent() != null && 
                     row.getIsParent().equals("Y"))) {
                    double scoreValue_t = 0;
                    if (row.getScoreValue() != null)
                        scoreValue_t = row.getScoreValue().doubleValue();
                    scoreValue = 
                            computeOthKpiMethod(0, 0, 0, "", scoreValue_t);

                    row.setAttribute("ScoreValue", scoreValue);
                    // KpiValue = KpiValue + scoreValue;

                } else {
                    throw new OAException("CUX", "CUX_ADDKPI_COMPUTE_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
    }
    //computeSysKpiMethod

    public double computeSysKpiMethod(double targetValue, double minimumValue, 
                                      double actualValue, 
                                      String kpiScoringMethod) {
        double scoreValueTmp = 0;
        if (kpiScoringMethod.startsWith("ASC")) {
            scoreValueTmp = 
                    (actualValue - minimumValue) / (targetValue - minimumValue) * 
                    100;
        } else {
            scoreValueTmp = 
                    (actualValue - targetValue) / (minimumValue - targetValue) * 
                    100;
        }

        return scoreValueTmp;
    }
    //computeOthKpiMethod

    public double computeOthKpiMethod(double targetValue, double minimumValue, 
                                      double actualValue, 
                                      String kpiScoringMethod, 
                                      double scoreValue_t) {
        double scoreValueTmp = 0;
        if (scoreValue_t == -1) {
            if (kpiScoringMethod.startsWith("ASC")) {
                scoreValueTmp = 
                        (actualValue - minimumValue) / (targetValue - minimumValue) * 
                        100;
            } else {
                scoreValueTmp = 
                        (actualValue - targetValue) / (minimumValue - targetValue) * 
                        100;
            }
        } else {
            scoreValueTmp = scoreValue_t;
        }
        return scoreValueTmp;
    }
    //computeChildKPIMark
    /*��׼���˼ӷ����Ӧ��ChildKPI*/

    public void computeChildKPIMark(String parentContractId) {
        OAViewObject vo = getContractKPIDetailVO1();
        ContractKPIDetailVORowImpl row = null;
        double KpiChildValue = 0;

        /*20090926 zs ���ܷ�ҳ*/
        int fetchedRowCount = vo.getRowCount(); //.getFetchedRowCount();
        /*20090926 zs*/
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(ContractKPIDetailVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                double scoreValue = 0;
                /*20090913 zs kpiΪָ�����ѡ��4�ģ���ؼ���ָ�꣬�����м�������*/
                if
                    /*20090922 ϵͳ����֣��ֹ��Ķ�Ϊֱ�Ӵ��*/
                    (row.getKpiScoringMethod() != null && 
                     !row.getKpiScoringMethod().equals("") && 
                     (row.getKpiDataSource() != null && 
                      row.getKpiDataSource().equals("-1"))) {
                    /*20090913 zs*/
                    if (row.getTargetValue() != null && 
                        row.getMinimumValue() != null && 
                        row.getActualValue() != null && 
                        (row.getKpiDataSource() != null && 
                         !row.getKpiDataSource().equals(""))) {
                        double targetValue = 
                            row.getTargetValue().doubleValue();
                        double minimumValue = 
                            row.getMinimumValue().doubleValue();
                        double actualValue = 
                            row.getActualValue().doubleValue();
                        String kpiScoringMethod = row.getKpiScoringMethod();
                        String kpiDataSource = row.getKpiDataSource();
                        /*
                                       String weightStr = row.getWeight();
                                       if(weightStr.indexOf("%") > 0){
                                           weightStr.replaceAll("%","");
                                       }
                                       double weight = Double.parseDouble(weightStr);*/
                        String weightStr = row.getWeight();
                        double weight = 0;
                        if (weightStr.indexOf("%") > 0) {
                            weightStr = weightStr.replaceAll("%", "");
                            weight = Double.parseDouble(weightStr);
                        } else {
                            weight = Double.parseDouble(weightStr);
                        }
                        /*20090913 zs*/
                        double scoreValue_t = 0;
                        if (row.getScoreValue() != null)
                            scoreValue_t = row.getScoreValue().doubleValue();
                        scoreValue = 
                                computeOthKpiMethod(targetValue, minimumValue, 
                                                    actualValue, 
                                                    kpiScoringMethod, 
                                                    scoreValue_t);
                        /*20090913 zs*/
                        if (scoreValue > 100)
                            scoreValue = 100;
                        if (scoreValue < 0)
                            scoreValue = 0;
                        //ȡ��    
                        //scoreValue = (double)Math.floor(scoreValue);
                        //��������
                        scoreValue = Math.round(scoreValue * 1000) / 1000;
                        row.setAttribute("ScoreValue", 
                                         scoreValue); //.setScoreValue(scoreValue);
                        KpiChildValue = 
                                KpiChildValue + scoreValue * weight / 100;

                    } else {
                        /*20090923*/
                        //20091119 ʵ��ֵ������֤
                        //throw new OAException("CUX", "CUX_KPI_COMPUTE_WAR");
                    }
                    /*20090913 zs kpiΪ�ֹ���ӵģ��繤�����񣬼�ֱ�Ӵ��*/
                } else {
                    if (row.getScoreValue() != null && 
                        !row.getScoreValue().equals("")) {
                        String weightStr = row.getWeight();
                        double weight = 0;
                        if (weightStr.indexOf("%") > 0) {
                            weightStr = weightStr.replaceAll("%", "");
                            weight = Double.parseDouble(weightStr);
                        } else {
                            weight = Double.parseDouble(weightStr);
                        }

                        scoreValue = row.getScoreValue().doubleValue();

                        if (scoreValue > 100)
                            scoreValue = 100;
                        if (scoreValue < 0)
                            scoreValue = 0;

                        //��������
                        scoreValue = Math.round(scoreValue * 1000) / 1000;
                        row.setAttribute("ScoreValue", 
                                         scoreValue); //.setScoreValue(scoreValue);
                        KpiChildValue = 
                                KpiChildValue + scoreValue * weight / 100;
                    } else {
                        /*20090923 zs*/
                        throw new OAException("CUX", 
                                              "CUX_KPI_COMPUTESCORE_WAR");
                    }
                }
                /*20090913 zs*/
            }
        }
        computeKpiIter.closeRowSetIterator();


        updateKpiChildValue(parentContractId, KpiChildValue);

    }

    /**
     * insert KpiChildValue to the parent contract through parentContractId
     */
    public void updateKpiChildValue(String parentContractId, 
                                    double kpiChildValue) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.update_kpi_child_value(?,?,?)", 
                                                1);
        try {
            cs.setString(1, parentContractId);
            cs.setDouble(2, kpiChildValue);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        // return result; 
    }
    //computeTotalMark

    public void computeTotalMark(String appraisalId) {
        OAViewObject vo = getContractClassVO1();
        ContractClassVORowImpl row = null;
        double kpiTotalValue = 0;
        double kpiStdWeight = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(ContractClassVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                double kpiValue = row.getValidScoreValue().doubleValue();
                if (row.getWeight() != null && !row.getWeight().equals("") && 
                    row.getAttribute1() != null && 
                    !row.getAttribute1().equals("") && 
                    row.getAttribute2() != null && 
                    !row.getAttribute2().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    row.setAttribute("KpiValue", kpiValue);
                    /*�����׼����,���ӿ��˼Ӽ�����*/
                    if (row.getAttribute1().equals("STANDARD") && 
                        row.getAttribute2().equals("ADD")) {
                        /*zs 20090909*/
                        if (row.getAttribute9() == null || 
                            !row.getAttribute9().equals("INHERIT"))
                            kpiValue = kpiValue * weight / 100;
                    } else if (row.getAttribute2().equals("SUBTRACT")) {
                        kpiValue = kpiValue * (-1);
                    }
                    kpiTotalValue = kpiTotalValue + kpiValue;
                    /*У��STANDARD��Ȩ��*/
                    if (row.getAttribute1().equals("STANDARD")) {
                        kpiStdWeight = kpiStdWeight + weight;
                    }
                } else {
                    throw new OAException("CUX", "CUX_KPI_ADDSUB_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        if (kpiStdWeight != 100)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

        //��������
        //kpiTotalValue = Math.round(kpiTotalValue * 1000) / 1000; 
        //added by dely.2009.12.4
        DecimalFormat df = new DecimalFormat("#.00");
        kpiTotalValue = Double.valueOf(df.format(kpiTotalValue));
        /*Double a = 0.9999999;
        a = Double.valueOf(df.format(a));
        System.out.println(a);*/

        //kpiTotalValue =  new BigDecimal(kpiTotalValue).setScale(2, BigDecimal.ROUND_HARF_UP);
        updateKpiTotalValue(appraisalId, kpiTotalValue);
        /*20100113 zs �������7��ܷ�*/
        computeSelfScore(appraisalId);
    }

    /**
     * insert KpiTotalValue to the contract through appraisalId
     */
    public void updateKpiTotalValue(String appraisalId, double kpiTotalValue) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.update_kpi_total_value(?,?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.setDouble(2, kpiTotalValue);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        // return result; 
    }

    public void computeSelfScore(String appraisalId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.gettotalselfmark(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
            }
        }
    }

    /**
     * ��֤�����7�
     * ��֤�7ֽ׶Σ������ύʱ�Ƿ��д��
     * dl 2009.12.7
     */
    public void validateScore(String pAppraisalId) {
        String result = null;

        OADBTransaction transaction = getOADBTransaction();
        PreparedStatement cs = null;
        cs = 
 transaction.createPreparedStatement("select cux_jxkh_workflow_set_pkg.validate_score(?) from dual ", 
                                     1);
        ResultSet rs = null;
        try {
            //System.out.println("pAppraisalId " + pAppraisalId);
            cs.setString(1, pAppraisalId);
            //System.out.println("aaa");
            rs = cs.executeQuery();
            //System.out.println("xxx");
            if (rs != null && rs.next()) {
                //System.out.println("rs is not null");
                result = rs.getString(1);
            }

            if (result != null)
                System.out.println("result : " + result);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }

            if (result != null && !result.equals("Y")) {
                System.out.println("result final " + result);
                transaction.rollback();
                MessageToken[] tokens = { new MessageToken("LIST", result) };
                throw new OAException("CUX", "CUX_EPM_REVIEW_SCORE_WAR", 
                                      tokens);
            }
        }
    }

    /*У�鿼��ָ���Std�����Ȩ��*/

    public void checkKpiStdWeight() {
        OAViewObject vo = getContractClassVO1();
        ContractClassVORowImpl row = null;
        double kpiStdWeight = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(ContractClassVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                if (row.getWeight() != null && !row.getWeight().equals("") && 
                    row.getAttribute1() != null && 
                    !row.getAttribute1().equals("") && 
                    row.getAttribute2() != null && 
                    !row.getAttribute2().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    /*У��STANDARD��Ȩ��*/
                    if (row.getAttribute1().equals("STANDARD")) {
                        kpiStdWeight = kpiStdWeight + weight;
                    }
                } else {
                    throw new OAException("CUX", "CUX_KPI_ADDSUB_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        if (kpiStdWeight != 100)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

    }
    /*У�鿼��ָ��KPI��Ȩ��,ϵͳ4Դ�Ŀ���ָ���Ŀ��ֵ������ֵΪ������!*/

    public void checkKpiWeight(String kpiStdAddWeightMethod, 
                               String kpiClassWeight) {
        OAViewObject vo = getAppraisalKPIVO1();
        AppraisalKPIVORowImpl row = null;
        double kpiWeight = 0;
        /*20090926 zs ���ܷ�ҳ*/
        int fetchedRowCount = vo.getRowCount(); //.getFetchedRowCount();
        /*20090926 zs*/
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(AppraisalKPIVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                /*20090926 zs ϵͳ4Դ�Ŀ���ָ���Ŀ��ֵ������ֵΪ������!*/
                if ((row.getTargetValue() != null && 
                     !row.getTargetValue().equals("") && 
                     (row.getMinimumValue() != null && 
                      !row.getMinimumValue().equals("")) && 
                     (row.getKpiDataSource() != null && 
                      row.getKpiDataSource().equals("-1"))) || 
                    !(row.getKpiDataSource() != null && 
                      row.getKpiDataSource().equals("-1"))) {
                    /*20090926 zs*/
                    if (row.getWeight() != null && 
                        !row.getWeight().equals("")) {
                        String weightStr = row.getWeight();
                        double weight = 0;
                        if (weightStr.indexOf("%") > 0) {
                            weightStr = weightStr.replaceAll("%", "");
                            weight = Double.parseDouble(weightStr);
                        } else {
                            weight = Double.parseDouble(weightStr);
                        }
                        kpiWeight = kpiWeight + weight;

                    } else {
                        throw new OAException("CUX", "CUX_KPI_WEIGHT_WAR");
                    }
                    /*20090926 zs*/
                } else {
                    throw new OAException("CUX", 
                                          "CUX_KPI_TargetMinimumValue_WAR");
                }
                /*20090926 zs*/

            }
        }
        computeKpiIter.closeRowSetIterator();
        double kpiCheckWeight = 100;
        if (kpiStdAddWeightMethod != null && 
            kpiStdAddWeightMethod.equals("INHERIT") && 
            kpiClassWeight != null && !kpiClassWeight.equals("")) {
            kpiCheckWeight = Double.parseDouble(kpiClassWeight);
        }
        if (kpiWeight != kpiCheckWeight)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

    }
    /*У�鿼��ָ��KPI��Child��Ȩ��*/

    public void checkKpiChildWeight(String kpiStdAddWeightMethod, 
                                    String kpiClassWeight) {
        OAViewObject vo = getContractKPIDetailVO1();
        ContractKPIDetailVORowImpl row = null;
        double kpiChildWeight = 0;

        /*20090926 zs ���ܷ�ҳ*/
        int fetchedRowCount = vo.getRowCount(); //.getFetchedRowCount();
        /*20090926 zs*/
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(ContractKPIDetailVORowImpl)computeKpiIter.getRowAtRangeIndex(i);

                if (row.getWeight() != null && !row.getWeight().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    kpiChildWeight = kpiChildWeight + weight;
                } else {
                    throw new OAException("CUX", "CUX_KPIChild_WEIGHT_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        double kpiCheckWeight = 100;
        if (kpiStdAddWeightMethod != null && 
            kpiStdAddWeightMethod.equals("INHERIT") && 
            kpiClassWeight != null && !kpiClassWeight.equals("")) {
            kpiCheckWeight = Double.parseDouble(kpiClassWeight);
        }
        if (kpiChildWeight != kpiCheckWeight)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

    }

    /*20090908 zs*/
    /*
          * ��ȡkpiȨ��У������ķ�ʽ
          */

    public String getKpiStdAddWeightMethod(String kpiClass) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.get_Kpi_StdAddWeight_Method(?,?)", 
                                                1);
        try {
            cs.setString(1, kpiClass);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }
    /*20090927 zs */

    /**
     * initialize initKpiArea
     * @param kpiClass
     */
    public void initKpiArea(String kpiClass) {
        KPIAreaVOImpl vo = (KPIAreaVOImpl)findViewObject("KPIAreaVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause("KPI_CLASS = :1");
        vo.setWhereClauseParam(0, kpiClass);
        vo.executeQuery();
    }
    /*20090927 zs */
    /*20090928 zs*/
    /*
       * checkResultFlagMethod
       */

    public String checkResultFlagMethod(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.check_ResultFlag_Method(?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }
    /*20090928 zs */
    /*20090929 zs */
    /*
       * kpiClassWeightIsChangeMethod
       */

    public String kpiClassWeightIsChangeMethod(String appraisalId, 
                                               String kpiClass, 
                                               String kpiClassWeight) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.kpiClassWeight_IsChange_Method(?,?,?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.setString(2, kpiClass);
            cs.setString(3, kpiClassWeight);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(4);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }
    /*20090929 zs */
    /*20090930 zs */
    /*
        * kpiClassWeightIsNullMethod
        */

    public String kpiClassWeightIsNullMethod(String appraisalId, 
                                             String kpiClass) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.kpiClassWeight_IsNull_Method(?,?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.setString(2, kpiClass);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }
    /*20090930 zs */

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "AppraisalAMLocal");
    }


    /**Container's getter for AppraisalVO1
     */
    public AppraisalVOImpl getAppraisalVO1() {
        return (AppraisalVOImpl)findViewObject("AppraisalVO1");
    }

    /**Container's getter for ContractVO1
     */
    public ContractVOImpl getContractVO1() {
        return (ContractVOImpl)findViewObject("ContractVO1");
    }

    /**Container's getter for AppraisalEmpVO1
     */
    public AppraisalEmpVOImpl getAppraisalEmpVO1() {
        return (AppraisalEmpVOImpl)findViewObject("AppraisalEmpVO1");
    }

    /**Container's getter for ContractClassVO1
     */
    public ContractClassVOImpl getContractClassVO1() {
        return (ContractClassVOImpl)findViewObject("ContractClassVO1");
    }


    /**Container's getter for TmplDetailVO1
     */
    public TmplDetailVOImpl getTmplDetailVO1() {
        return (TmplDetailVOImpl)findViewObject("TmplDetailVO1");
    }


    /**Container's getter for AppraisalAttendVO1
     */
    public AppraisalAttendVOImpl getAppraisalAttendVO1() {
        return (AppraisalAttendVOImpl)findViewObject("AppraisalAttendVO1");
    }

    /**Container's getter for AppraisalAttendEnterVO1
     */
    public AppraisalAttendEnterVOImpl getAppraisalAttendEnterVO1() {
        return (AppraisalAttendEnterVOImpl)findViewObject("AppraisalAttendEnterVO1");
    }

    /**Container's getter for ContractContentVO1
     */
    public ContractContentVOImpl getContractContentVO1() {
        return (ContractContentVOImpl)findViewObject("ContractContentVO1");
    }

    /**Container's getter for ContractClassContentVL1
     */
    public ViewLinkImpl getContractClassContentVL1() {
        return (ViewLinkImpl)findViewLink("ContractClassContentVL1");
    }

    /**Container's getter for ContractKPIDetailVO1
     */
    public ContractKPIDetailVOImpl getContractKPIDetailVO1() {
        return (ContractKPIDetailVOImpl)findViewObject("ContractKPIDetailVO1");
    }

    /**Container's getter for AppraisalKPIVO1
     */
    public AppraisalKPIVOImpl getAppraisalKPIVO1() {
        return (AppraisalKPIVOImpl)findViewObject("AppraisalKPIVO1");
    }

    /**Container's getter for AppraisalCopyVO1
     */
    public AppraisalCopyVOImpl getAppraisalCopyVO1() {
        return (AppraisalCopyVOImpl)findViewObject("AppraisalCopyVO1");
    }

    /**Container's getter for KPIAreaVO1
     */
    public KPIAreaVOImpl getKPIAreaVO1() {
        return (KPIAreaVOImpl)findViewObject("KPIAreaVO1");
    }

    /**Container's getter for AppraisalAttendNoteVO1
     */
    public AppraisalAttendNoteVOImpl getAppraisalAttendNoteVO1() {
        return (AppraisalAttendNoteVOImpl)findViewObject("AppraisalAttendNoteVO1");
    }

    /**Container's getter for PerKPILovVO1
     */
    public PerKPILovVOImpl getPerKPILovVO1() {
        return (PerKPILovVOImpl)findViewObject("PerKPILovVO1");
    }

    /**Container's getter for KPIDetailsVO1
     */
    public KPIDetailsVOImpl getKPIDetailsVO1() {
        return (KPIDetailsVOImpl)findViewObject("KPIDetailsVO1");
    }
}
