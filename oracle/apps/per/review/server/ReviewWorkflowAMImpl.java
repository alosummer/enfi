package cux.oracle.apps.per.review.server;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.Transaction;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReviewWorkflowAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public ReviewWorkflowAMImpl() {
    }
    //Create

    public String createReviewWorkflow() {
        OAViewObject vo = (OAViewObject)getReviewWorkflowVO1();
        if (!vo.isPreparedForExecution()) { //commented by fch 20090908
            vo.executeQuery();
        }
        Row row = vo.createRow();
        vo.insertRow(row);
        Number epmWorkflowId = 
            getOADBTransaction().getSequenceValue("CUX_REVIEW_WORKFLOW_S");
        row.setAttribute("EpmWorkflowId", epmWorkflowId);
        row.setNewRowState(Row.STATUS_INITIALIZED);

        return String.valueOf(epmWorkflowId);
    }
    //Rollback

    public void rollbackReviewWorkflow() {
        Transaction txn = getTransaction();
        if (txn.isDirty()) {
            txn.rollback();
        }
    }
    //Apply

    public void apply() {
        getTransaction().commit();
    } // end apply()
    //Init

    public void init() {
        ReviewWorkflowFilVOImpl vo = 
            (ReviewWorkflowFilVOImpl)getReviewWorkflowFilVO1();
        vo.initQuery();
    }
    /*
    //applyUpdateReviewWorkflow
    public void applyUpdateReviewWorkflow(String epmWorkflowId,String epmApproveTypeCode,String level){
        OAViewObject vo = (OAViewObject)getReviewWorkflowLevelVO1();
        vo.executeQuery();
        int count = vo.getRowCount();
        boolean insertFlag = true;
        while (vo.hasNext())
        {
            ReviewWorkflowLevelVORowImpl row = (ReviewWorkflowLevelVORowImpl)vo.next();
            String epmApproveLevel = "";//zs(String)row.getEpmApproveLevel();
            //String epmApproveTypeCode = (String)row.getEpmApproveTypeCode();
            if(epmApproveLevel.equals(level))//level = (update or delete)
            {
                if(epmApproveTypeCode != null && epmApproveTypeCode != "")//update
                     ;//zs row.setEpmApproveTypeCode(epmApproveTypeCode);
                else//delete
                    row.remove();

                insertFlag = false;
                break;
            }
        }
        if(insertFlag == true && (epmApproveTypeCode != null && epmApproveTypeCode != "")){//level != ,Code != "" insert
            Row row_n = vo.createRow();
            vo.insertRow(row_n);
            row_n.setNewRowState(Row.STATUS_INITIALIZED);

            row_n.setAttribute("EpmWorkflowId",epmWorkflowId);
            row_n.setAttribute("EpmApproveTypeCode",epmApproveTypeCode);
            row_n.setAttribute("EpmApproveLevel",level);
        }

    }
    //applyCreateReviewWorkflow
    public void applyCreateReviewWorkflow(String epmWorkflowId,String epmApproveTypeCode,String level){
        OAViewObject vo = (OAViewObject)getReviewWorkflowLevelVO1();
        vo.executeQuery();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);

        row.setAttribute("EpmWorkflowId",epmWorkflowId);
        row.setAttribute("EpmApproveTypeCode",epmApproveTypeCode);
        row.setAttribute("EpmApproveLevel",level);
    }

    //createReviewWorkflowLevel
     public void createReviewWorkflowLevel(){
         OAViewObject vo = (OAViewObject)getReviewWorkflowLevelVO1();
         vo.executeQuery();
         Row row = vo.createRow();
         vo.insertRow(row);
         row.setNewRowState(Row.STATUS_INITIALIZED);
     }*/
    //query

    public void queryReviewWorkflow(String epmWorkflowId) {
        ReviewWorkflowVOImpl vo = (ReviewWorkflowVOImpl)getReviewWorkflowVO1();
        vo.initQuery(epmWorkflowId);
    }
    //initSearchQuery

    public void initSearchQuery(String pgroupId, String porgId, 
                                String pepmPhaseClassCode) {
        ReviewWorkflowFilVOImpl vo = 
            (ReviewWorkflowFilVOImpl)getReviewWorkflowFilVO1();
        vo.initSearchQuery(pgroupId, porgId, pepmPhaseClassCode);
    }
    //initDetails

    public void initDetails(String epmWorkflowId) {
        initReviewWorkflowVO1(epmWorkflowId);

        initReviewWorkflowLevelVO1(epmWorkflowId);

        initReviewWorkflowFilVO1(epmWorkflowId);

    }
    //initReviewWorkflowVO1

    public void initReviewWorkflowVO1(String epmWorkflowId) {
        ReviewWorkflowVOImpl vo = (ReviewWorkflowVOImpl)getReviewWorkflowVO1();
        if (vo == null) {
            MessageToken[] errToken = 
            { new MessageToken("OBJECT_NAME", "ReviewWorkflowVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errToken);
        }
        vo.initQuery(epmWorkflowId);
    }
    //initReviewWorkflowLevelVO1

    public void initReviewWorkflowLevelVO1(String epmWorkflowId) {
        ReviewWorkflowLevelVOImpl vo = 
            (ReviewWorkflowLevelVOImpl)getReviewWorkflowLevelVO1();
        if (vo == null) {
            MessageToken[] errToken = 
            { new MessageToken("OBJECT_NAME", "ReviewWorkflowLevelVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errToken);
        }
        vo.initQuery(epmWorkflowId);
    }
    //initReviewWorkflowFilVO1

    public void initReviewWorkflowFilVO1(String epmWorkflowId) {
        ReviewWorkflowFilVOImpl vo = 
            (ReviewWorkflowFilVOImpl)getReviewWorkflowFilVO1();
        if (vo == null) {
            MessageToken[] errToken = 
            { new MessageToken("OBJECT_NAME", "ReviewWorkflowFilVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errToken);
        }
        vo.initQuery(epmWorkflowId);
    }
    //deleteReviewWorkflow

    public String deleteReviewWorkflow(String epmWorkflowId) {
        /* String result = "";
        result = "Y";//canDelReviewWorkflow
        if(result.equals("Y")){
            OAViewObject vo = null;
            vo = getReviewWorkflowVO1();
            vo.executeQuery();
            //int count = vo.getRowCount();
            Object obj[] = new Object[1];
            obj[0] = epmWorkflowId;
            Key key = new Key(obj);
            Row row = vo.getRow(key);//ע��VO�е�key����Щ
            if(row != null){
                row.remove();
                result = deleteChildReviewWorkflow(epmWorkflowId);
                this.getOADBTransaction().commit();
            }
             else{
                result = "N";
            }
         }
        System.out.println("zs result:"+result);
        return  result;
        */
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.del_rwf_set(?,?)", 
                                                1);
        try {
            cs.setString(1, epmWorkflowId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }
    //deleteChildReviewWorkflow

    public String deleteChildReviewWorkflow(String epmWorkflowId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.del_rwf_level(?,?)", 
                                                1);
        try {
            cs.setString(1, epmWorkflowId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
            System.out.println("zs sql result:" + result);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }
    //deleteWorkflowForLevel

    public String deleteWorkflowForLevel(String epmApproveId) {
        String result = "";
        result = "Y"; //canDelReviewWorkflow
        if (result.equals("Y")) {
            OAViewObject vo = null;
            vo = getReviewWorkflowLevelVO1();
            //vo.executeQuery();
            //int count = vo.getRowCount();
            Object obj[] = new Object[1];
            obj[0] = epmApproveId;
            Key key = new Key(obj);
            Row row = vo.getRow(key); //ע��VO�е�key����Щ
            if (row != null) {
                row.remove();
                //this.getOADBTransaction().commit();
            } else {
                result = "N";
            }
        }
        return result;
    }
    //deleteChildReviewWorkflowSingleLevel

    public void deleteChildWorkflowSingleLevel(String epmApproveId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_set_pkg.del_rwf_single_level(?,?)", 
                                                1);
        try {
            cs.setString(1, epmApproveId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
    }

    /**Container's getter for ReviewWorkflowFilVO1
     */
    public ReviewWorkflowFilVOImpl getReviewWorkflowFilVO1() {
        return (ReviewWorkflowFilVOImpl)findViewObject("ReviewWorkflowFilVO1");
    }


    /**Container's getter for ReviewWorkflowVO1
     */
    public ReviewWorkflowVOImpl getReviewWorkflowVO1() {
        return (ReviewWorkflowVOImpl)findViewObject("ReviewWorkflowVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "ReviewWorkflowAMLocal");
    }

    /**Container's getter for ReviewWorkflowLevelVO1
     */
    public ReviewWorkflowLevelVOImpl getReviewWorkflowLevelVO1() {
        return (ReviewWorkflowLevelVOImpl)findViewObject("ReviewWorkflowLevelVO1");
    }

    /* 根据组织名称获取组织ID
     * add by yang.gang,2014-9-5
     * */

    public Number GetOrgID(String OrgName) {
        String result = null;
        Number nresult = new Number(0);

        OADBTransaction transaction = getOADBTransaction();
        PreparedStatement cs = null;
        cs = 
 transaction.createPreparedStatement("select cov.organization_id from cux_organization_v cov where cov.name = ?", 
                                     1);
        ResultSet rs = null;
        try {
            cs.setString(1, OrgName);
            rs = cs.executeQuery();
            if (rs != null && rs.next()) {
                result = rs.getString(1);
            }

            if (result != null || result != "")
                nresult = new Number(result);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return nresult;
    }
}
