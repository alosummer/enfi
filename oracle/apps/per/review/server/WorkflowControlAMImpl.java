package cux.oracle.apps.per.review.server;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Transaction;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WorkflowControlAMImpl extends OAApplicationModuleImpl {
    final String sqlSubmitApproval = 
        "call cux_jxkh_workflow_pkg.submit_next_approval(?,?)";
    final String sqlCloseApproval = 
        "call cux_jxkh_workflow_pkg.stop_appraisal_approval(?,?)";
    final String sqlDelApproval = 
        "call cux_jxkh_workflow_pkg.del_appraisal_approval(?,?)";
    final String sqlRetryWorkFlow = 
        "call cux_jxkh_workflow_pkg.retry_workflow(?,?)";


    /**This is the default constructor (do not remove)
     */
    public WorkflowControlAMImpl() {
    }

    /**
     * Rollback database transactions
     */
    public void rollback() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.rollback();
    }

    /**
     * Commit database changes
     * @param N/A
     */
    public String commit() {
        Transaction txn = getTransaction();
        if (txn.isDirty()) {
            txn.commit();
            return "Y";
        } else
            return "N";
    }

    // 2014.9.2 add by yang.gang, 重试 流程
    // 和在工作流管理员 Web（新） 页面，选择具体的流程，点击“重试”按钮 效果相同

    public String RetryWorkflow(String appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement(sqlRetryWorkFlow, 1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    public void queryAttendList(String appraisalId, String phaseId) {
        WorkflowAttendVOImpl vo = getWorkflowAttendVO1();
        vo.executeQuery(appraisalId, phaseId);
    }

    public void initQuery() {
        OAViewObject vo = getWorkflowControlSearchVO1();
        vo.executeQuery();
    }

    /*
     * Manual Search add by fl 20091116
     */

    public void initQuery(String groupName, String orgName, String phase, 
                          String period, String year, String endYear, 
                          String status, String empName, 
                          Boolean executeQuery) {
        WorkflowControlSearchVOImpl vo = getWorkflowControlSearchVO1();

        if (vo == 
            null) //phase, personId, orgId,yearFrom,yearTo,status,empName, executeQuery
        {
            MessageToken[] tokens = 
            { new MessageToken("OBJECT_NAME", "WorkflowControlSearchVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", tokens);
        }

        vo.initQuery(groupName, orgName, phase, period, year, endYear, status, 
                     empName, executeQuery);
    }

    /**
     * ɾ��Ч��ͬ������
     */
    public String deleteWfStep(String appraisalId, String attendId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.del_wf_step(?,?,?)", 
                                                1);
        try {
            cs.setString(1, appraisalId);
            cs.setString(2, attendId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * �ж��Ƿ���Լ��������˼�¼
     */
    public String canAddApprover(String appraisalId) {
        String result = "";
        String sql = 
            "begin :1 := cux_jxkh_common_pkg.get_appraisal_status(:2); end;";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.executeUpdate();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * ��ȡʣ��������˸���
     */
    public String getRestPerformers(String appraisalId) {
        String result = "";
        String sql = 
            "begin :1 := cux_jxkh_common_pkg.get_rest_performers(:2); end;";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, appraisalId);
            cs.executeUpdate();
            result = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**
     * ��֤�����7�
     * ��֤�7ֽ׶Σ������ύʱ�Ƿ��д��
     * dl 2009.12.7
     */
    public void validateScore(String pAppraisalId) {
        String result = null;

        OADBTransaction transaction = getOADBTransaction();
        PreparedStatement cs = null;
        cs = 
 transaction.createPreparedStatement("select cux_jxkh_workflow_set_pkg.validate_score(?) from dual ", 
                                     1);
        ResultSet rs = null;
        try {
            //System.out.println("pAppraisalId " + pAppraisalId);
            cs.setString(1, pAppraisalId);
            //System.out.println("aaa");
            rs = cs.executeQuery();
            //System.out.println("xxx");
            if (rs != null && rs.next()) {
                //System.out.println("rs is not null");
                result = rs.getString(1);
            }

            if (result != null)
                System.out.println("result : " + result);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }

            if (result != null && !result.equals("Y")) {
                System.out.println("result final " + result);
                transaction.rollback();
                MessageToken[] tokens = { new MessageToken("LIST", result) };
                throw new OAException("CUX", "CUX_EPM_REVIEW_SCORE_WAR", 
                                      tokens);
            }
        }
    }

    /**
     * �رյ�ǰ���
     */
    public String processWfApproval(String appraisalId, String wfAction) {
        String result = "";
        String sql = "";

        if (wfAction.equals("close"))
            sql = sqlCloseApproval;
        else if (wfAction.equals("submit"))
            sql = sqlSubmitApproval;
        else if (wfAction.equals("delete"))
            sql = sqlDelApproval;

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.setString(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    //initQuery

    public void initSearchQuery(String pgroupName, String porgName, 
                                String pphaseName, String pperiodName, 
                                String pappraisalYear, String pstatusId) {
        WorkflowControlSearchVOImpl vo = 
            (WorkflowControlSearchVOImpl)getWorkflowControlSearchVO1();
        vo.initSearchQuery(pgroupName, porgName, pphaseName, pperiodName, 
                           pappraisalYear, pstatusId);
    }

    /**Container's getter for WorkflowControlSearchVO1
     */
    public WorkflowControlSearchVOImpl getWorkflowControlSearchVO1() {
        return (WorkflowControlSearchVOImpl)findViewObject("WorkflowControlSearchVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "WorkflowControlAMLocal");
    }

    /**Container's getter for WorkflowAttendVO1
     */
    public WorkflowAttendVOImpl getWorkflowAttendVO1() {
        return (WorkflowAttendVOImpl)findViewObject("WorkflowAttendVO1");
    }
}
