package cux.oracle.apps.per.review.server;


import cux.oracle.apps.per.poplist.server.TemplateKPIClassesImpl;

import java.sql.CallableStatement;
import java.sql.Types;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAAttrValException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
import oracle.jbo.server.ViewLinkImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TmplManageAMImpl extends OAApplicationModuleImpl {
    final String sqlValidateTmpl = 
        "call cux_per_review_pkg.validate_template(?,?)";
    final String sqlPopTemplate = 
        "call cux_per_review_pkg.pop_template_class(?,?)";
    final String sqlDelTemplate = 
        "call cux_per_review_pkg.can_del_template(?,?)";
    final String sqlCopyTemplate = 
        "call cux_per_review_pkg.copy_template(?,?)";

    /**This is the default constructor (do not remove)
     */
    public TmplManageAMImpl() {
    }

    /**
     * Rollback database transactions
     */
    public void rollback() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.rollback();
    }

    /**
     * Commit database changes
     * @param N/A
     */
    public void commit() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.commit();
    }

    public void setTmplforLine(String tmplId) {
        OAViewObject pvo = getTemplateClassVO1();
        Row prow = pvo.getCurrentRow();
        String kpiClass = null;
        if (prow != null)
            kpiClass = (String)prow.getAttribute("KpiClass");
        OAViewObject vo = this.getTemplateContentVO1();
        Row row = vo.getCurrentRow();
        if (kpiClass != null) {
            row.setAttribute("KpiClass", kpiClass);
            //Number contentId = getOADBTransaction().getSequenceValue("CUX_TMPL_CONTENT_S");
            //row.setAttribute("ContentId", contentId);
            row.setAttribute("TmplId", tmplId);
        }
    }

    /**
     * Create a template item
     */
    public void createTmplContent() {
        OAViewObject vo = this.getTemplateContentVO1();
        if (!vo.isPreparedForExecution())
            vo.executeQuery();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
    }


    /**
     * Query template details
     */
    public void queryTemplate(String tmplId) {
        OAViewObject vo = getTmplDetailVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        vo.executeQuery();
    }

    /**
     * Query template classes
     */
    public void queryTemplateClass(String tmplId) {
        OAViewObject vo = getTemplateClassVO1();
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParams(null);
        vo.setWhereClauseParam(0, tmplId);
        vo.executeQuery();
    }

    /**
     * Query template content
     */
    public void initTmplContent(String tmplId) {
        OAViewObject vo = getTemplateContentVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        //if(!vo.isPreparedForExecution()) 
        vo.executeQuery();
    }


    public void initTemplateJob(String tmplId) {
        OAViewObject vo = getTmplJobVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        //if(!vo.isPreparedForExecution())  remark by fl
        vo.executeQuery();
    }

    public void initTemplateEmp(String tmplId) {
        OAViewObject vo = getTmplEmpVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        //System.out.println("tmplId"+tmplId);
        //if(!vo.isPreparedForExecution()) 
        vo.executeQuery();
    }

    public void initTemplateOrg(String tmplId) {
        OAViewObject vo = getTmplOrgVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        //if(!vo.isPreparedForExecution()) remark by fl
        vo.executeQuery();
    }

    public void queryTmplKpiClasses(String tmplId) {
        OAViewObject vo = getTemplateKPIClasses1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("TMPL_ID = :1");
        vo.setWhereClauseParam(0, tmplId);
        vo.executeQuery();
    }

    public void queryTmplKpi(String tmplId, String kpiClass) {
        TemplateKPIVOImpl vo = getTemplateKPIVO1();
        vo.executeQuery(tmplId, kpiClass);
    }

    /**
     * delete a template item
     */
    public void deleteTmplContent(String contentId) {
        OAViewObject vo = null;
        vo = getTemplateKPIVO1();
        //vo.executeQuery();
        Object obj[] = new Object[1];
        obj[0] = contentId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            getTransaction().commit();
        }
    }

    /**
     * delete a template job
     */
    public void delTemplateJob(String tmplId, String jobId) {
        TmplJobVOImpl vo = getTmplJobVO1();
        vo.executeQuery();
        Object obj[] = new Object[2];
        obj[0] = tmplId;
        obj[1] = jobId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            getTransaction().commit();
        }
    }

    /**
     * delete a template person
     */
    public void delTemplateEmp(String tmplId, String personId) {
        TmplEmpVOImpl vo = getTmplEmpVO1();
        vo.executeQuery();
        Object obj[] = new Object[2];
        obj[0] = tmplId;
        obj[1] = personId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            getTransaction().commit();
        }
    }

    /**
     * delete a template org
     */
    public void delTemplateOrg(String tmplId, String orgId) {
        TmplOrgVOImpl vo = getTmplOrgVO1();
        vo.executeQuery();
        Object obj[] = new Object[2];
        obj[0] = tmplId;
        obj[1] = orgId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            getTransaction().commit();
        }
    }

    /**
     * Initialize a template areas
     */
    public String processTemplate(String tmplId, String action) {
        String result = "";
        String sql = "";

        if (action.equals("delete"))
            sql = sqlDelTemplate;
        else if (action.equals("pop"))
            sql = sqlPopTemplate;
        else if (action.equals("validate"))
            sql = sqlValidateTmpl;
        else if (action.equals("copy"))
            sql = sqlCopyTemplate;

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.setString(1, tmplId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    //У��ģ���б�׼���Ȩ��

    public void validateTmplStdWeight() {
        OAViewObject vo = getTemplateClassVO1();
        TemplateClassVORowImpl row = null;

        double kpiStdWeight = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(TemplateClassVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                if (row.getWeight() != null && !row.getWeight().equals("") && 
                    row.getAttribute1() != null && 
                    !row.getAttribute1().equals("") && 
                    row.getAttribute2() != null && 
                    !row.getAttribute2().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    /*У��STANDARD��Ȩ��*/
                    if (row.getAttribute1().equals("STANDARD")) {
                        kpiStdWeight = kpiStdWeight + weight;
                    }
                } else {
                    throw new OAException("CUX", "CUX_KPI_ADDSUB_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        if (kpiStdWeight != 100)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

    }

    //У��ģ���и�˲���������ָ���Ȩ��֮��

    public void validateTmplKpiWeight() {
        OAViewObject vo = getTemplateKPIVO1();
        TemplateKPIVORowImpl row = null;
        double kpiWeight = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(TemplateKPIVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                if (row.getWeight() != null && !row.getWeight().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    kpiWeight = kpiWeight + weight;

                } else {
                    throw new OAException("CUX", "CUX_KPI_WEIGHT_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        if (kpiWeight != 100)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");

    }
    /*20090927 zs*/

    public void validateTmplKpiWeightByMethod(String kpiWeightCheckMethod, 
                                              String kpiClassWeight) {
        OAViewObject vo = getTemplateKPIVO1();
        TemplateKPIVORowImpl row = null;
        double kpiWeight = 0;

        int fetchedRowCount = vo.getRowCount();
        RowSetIterator computeKpiIter = 
            vo.createRowSetIterator("computeKpiIter");
        if (fetchedRowCount > 0) {
            computeKpiIter.setRangeStart(0);
            computeKpiIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = 
(TemplateKPIVORowImpl)computeKpiIter.getRowAtRangeIndex(i);
                if (row.getWeight() != null && !row.getWeight().equals("")) {
                    String weightStr = row.getWeight();
                    double weight = 0;
                    if (weightStr.indexOf("%") > 0) {
                        weightStr = weightStr.replaceAll("%", "");
                        weight = Double.parseDouble(weightStr);
                    } else {
                        weight = Double.parseDouble(weightStr);
                    }
                    kpiWeight = kpiWeight + weight;

                } else {
                    throw new OAException("CUX", "CUX_KPI_WEIGHT_WAR");
                }

            }
        }
        computeKpiIter.closeRowSetIterator();
        double kpiCheckWeight = 100;
        if (kpiWeightCheckMethod != null && 
            kpiWeightCheckMethod.equals("INHERIT") && kpiClassWeight != null && 
            !kpiClassWeight.equals("")) {
            kpiCheckWeight = Double.parseDouble(kpiClassWeight);
        }
        if (kpiWeight != kpiCheckWeight)
            throw new OAException("CUX", "CUX_STD_WEIGHT_WAR");
    }
    /*20090927 zs*/

    /*20100113 zs*/
    /*modify by Wei Yi at 2015/07/06 add person criteria*/

    public void initTmplQuery(String tmplName, String grpId, String orgName, 
                              String jobId, String personId, 
                              Boolean executeQuery) {
        TemplateVOImpl vo = getTemplateVO1();

        if (vo == null) {
            MessageToken[] tokens = 
            { new MessageToken("OBJECT_NAME", "TemplateVO1") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", tokens);
        }

        vo.initTmplQuery(tmplName, grpId, orgName, jobId, personId, 
                         executeQuery);
    }
    /*20100113 zs*/

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "TmplManageAMLocal");
    }

    /**Container's getter for TemplateVO1
     */
    public TemplateVOImpl getTemplateVO1() {
        return (TemplateVOImpl)findViewObject("TemplateVO1");
    }


    /**Container's getter for TmplDetailVO1
     */
    public TmplDetailVOImpl getTmplDetailVO1() {
        return (TmplDetailVOImpl)findViewObject("TmplDetailVO1");
    }


    /**Container's getter for TemplateClassVO1
     */
    public TemplateClassVOImpl getTemplateClassVO1() {
        return (TemplateClassVOImpl)findViewObject("TemplateClassVO1");
    }

    /**Container's getter for TemplateContentVO1
     */
    public TemplateContentVOImpl getTemplateContentVO1() {
        return (TemplateContentVOImpl)findViewObject("TemplateContentVO1");
    }

    /**Container's getter for TmplContentVL1
     */
    public ViewLinkImpl getTmplContentVL1() {
        return (ViewLinkImpl)findViewLink("TmplContentVL1");
    }

    /**Container's getter for TemplateKPIClasses1
     */
    public TemplateKPIClassesImpl getTemplateKPIClasses1() {
        return (TemplateKPIClassesImpl)findViewObject("TemplateKPIClasses1");
    }

    /**Container's getter for TemplateKPIVO1
     */
    public TemplateKPIVOImpl getTemplateKPIVO1() {
        return (TemplateKPIVOImpl)findViewObject("TemplateKPIVO1");
    }

    /**Container's getter for TmplJobVO1
     */
    public TmplJobVOImpl getTmplJobVO1() {
        return (TmplJobVOImpl)findViewObject("TmplJobVO1");
    }

    /**Container's getter for TmplOrgVO1
     */
    public TmplOrgVOImpl getTmplOrgVO1() {
        return (TmplOrgVOImpl)findViewObject("TmplOrgVO1");
    }

    /**Container's getter for TmplEmpVO1
     */
    public TmplEmpVOImpl getTmplEmpVO1() {
        return (TmplEmpVOImpl)findViewObject("TmplEmpVO1");
    }
}
