package cux.oracle.apps.per.review.server;

import java.sql.CallableStatement;
import java.sql.Types;

import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpManageAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public EmpManageAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "EmpManageAMLocal");
    }


    /**Update employee's assessable information 
     */
    public void CreateChange(String personId) {
        int i = 0;
        EmpChangeVOImpl vo = (EmpChangeVOImpl)getEmpChangeVO1();

        // Per the coding standards, this is the proper way to initialize a
        // VO that is used for both inserts and queries.  See View Objects
        // in Detail in the Developer's Guide for additional information.
        // if (!vo.isPreparedForExecution())
        //{       vo.executeQuery();     }
        vo.setMaxFetchSize(100);
        vo.initChangeQuery(personId);
        i = vo.getRowCount();

        if (i == 0) {
            Row row = vo.createRow();
            vo.insertRow(row);
            // Required per OA Framework Model Coding Standard M69
            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PersonId", personId);

        }
    } // end CreateChange()

    public String validateChangeEmp(String personId, String groupId, 
                                    String orgId, String supervisorId, 
                                    String positionId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_per_review_pkg.validate_change_emp(?,?,?,?,?,?)", 
                                                1);
        try {
            cs.setString(1, personId);
            cs.setString(2, groupId);
            cs.setString(3, orgId);
            cs.setString(4, supervisorId);
            cs.setString(5, positionId);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(6);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        if (cs != null)
            try {
                cs.close();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        return result;
    }

    /**Executes a rollback including the database and the middle tier
     */
    public void rollbackUpdateEmp() {
        Transaction txn = getTransaction();
        // This small optimization ensures that we don't perform a rollback 
        // if we don't have to.
        if (txn.isDirty()) {
            txn.rollback();
        }
    } // end rollbackUpdateEmp()

    /*
       *****************************************************************************
       * Commits the transaction.
       *****************************************************************************
       */

    public void apply() {
        getTransaction().commit();
    } // end apply()


    public void initQuery() {
        OAViewObject vo = getEmpManageVO1();
        vo.executeQuery();
    }


    /*
     *****************************************************************************
     * Deletes an employee's change information.
     *****************************************************************************
    */

    public void DeleteChange(String personId) {
        // First, we need to find the selected employee in our VO.
        // When we find it, we call remove( ) on the row which in turn
        // calls remove on the associated EmployeeEOImpl object.
        int empToDelete = Integer.parseInt(personId);

        OAViewObject vo = (OAViewObject)getEmpChangeVO1();
        EmpChangeVORowImpl row = null;


        // This tells us the number of rows that have been fetched in the
        // row set, and will not pull additional rows in like some of the
        // other "get count" methods.
        int fetchedRowCount = vo.getFetchedRowCount();

        // We use a separate iterator -- even though we could step through the
        // rows without it -- because we don't want to affect row currency.
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
        if (fetchedRowCount > 0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = (EmpChangeVORowImpl)deleteIter.getRowAtRangeIndex(i);

                // For performance reasons, we generate ViewRowImpls for all
                // View Objects. When we need to obtain an attribute value,
                // we use the named accessors instead of a generic String lookup.

                // Number primaryKey = (Number)row.getAttribute("EmployeeId");
                Number primaryKey = row.getPersonId();
                if (primaryKey.compareTo(empToDelete) == 0) {
                    // This performs the actual delete.
                    row.remove();
                    getTransaction().commit();
                    break; // only one possible selected row in this case
                }
            }
        }
        // Always close the iterator when you're done.
        deleteIter.closeRowSetIterator();
    } // end deleteEmployee

    /**Container's getter for EmpManageVO1
     */
    public EmpManageVOImpl getEmpManageVO1() {
        return (EmpManageVOImpl)findViewObject("EmpManageVO1");
    }

    /**Container's getter for EmpChangeVO1
     */
    public EmpChangeVOImpl getEmpChangeVO1() {
        return (EmpChangeVOImpl)findViewObject("EmpChangeVO1");
    }
}
