package cux.oracle.apps.per.review.server;

import java.util.Vector;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReviewWorkflowFilVOImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public ReviewWorkflowFilVOImpl() {
    }

    public void initQuery() {
        executeQuery();
    }

    //initQuery

    public void initQuery(String epmWorkflowId) {
        if ((epmWorkflowId != null) && (!("".equals(epmWorkflowId.trim())))) {
            Number epmWorkflowID = null;
            try {
                epmWorkflowID = new Number(epmWorkflowId);
            } catch (Exception e) {
                throw new OAException("z", "s");
            }
            setWhereClause("EPM_WORKFLOW_ID = :1");
            setWhereClauseParams(null);
            setWhereClauseParam(0, epmWorkflowID);
            executeQuery();
        }
    }
    //initSearchQuery

    public void initSearchQuery(String pgroupId, String porgId, 
                                String pepmPhaseClassCode) {
        StringBuffer whereClause = new StringBuffer(100);
        Vector parameters = new Vector(3);
        int clauseCount = 0;
        int bindCount = 0;
        setWhereClauseParams(null); // Always reset
        if ((pgroupId != null) && (!("".equals(pgroupId.trim())))) {
            Number GroupId = null;
            try {
                GroupId = new Number(pgroupId);
            } catch (Exception e) {
            }
            if (clauseCount > 0) {
                whereClause.append(" AND ");
            }
            whereClause.append(" Group_Id = :");
            whereClause.append(++bindCount);
            parameters.addElement(GroupId);
            clauseCount++;
        }
        if ((porgId != null) && (!("".equals(porgId.trim())))) {
            Number OrgId = null;
            try {
                OrgId = new Number(porgId);
            } catch (Exception e) {
            }
            if (clauseCount > 0) {
                whereClause.append(" AND ");
            }
            whereClause.append(" Org_Id = :");
            whereClause.append(++bindCount);
            parameters.addElement(OrgId);
            clauseCount++;
        }
        if ((pepmPhaseClassCode != null) && 
            (!("".equals(pepmPhaseClassCode.trim())))) {
            String EpmPhaseClassCode = pepmPhaseClassCode;
            if (clauseCount > 0) {
                whereClause.append(" AND ");
            }
            whereClause.append(" Epm_Phase_Class_Code = :");
            whereClause.append(++bindCount);
            parameters.addElement(EpmPhaseClassCode);
            clauseCount++;
        }
        setWhereClause(whereClause.toString());
        if (bindCount > 0) {
            Object[] params = new Object[bindCount];
            parameters.copyInto(params);
            setWhereClauseParams(params);
        }
        executeQuery();

    }
}
