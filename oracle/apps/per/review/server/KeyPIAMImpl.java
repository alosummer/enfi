package cux.oracle.apps.per.review.server;


import cux.oracle.apps.per.poplist.server.KPIClassVOImpl;
import cux.oracle.apps.per.poplist.server.KPIConJobVOImpl;
import cux.oracle.apps.per.poplist.server.KPIConObjVOImpl;
import cux.oracle.apps.per.poplist.server.KPIDimVOImpl;

import cux.oracle.apps.per.poplist.server.KPILevelVOImpl;
import cux.oracle.apps.per.poplist.server.KPIObjectClassVOImpl;

import java.sql.CallableStatement;
import java.sql.Types;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.Transaction;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KeyPIAMImpl extends OAApplicationModuleImpl {
    final String sqlDelKPI = "call cux_per_review_pkg.can_del_kpi(?,?)";
    final String sqlValidateKPI = "call cux_per_review_pkg.validate_kpi(?,?)";

    /**This is the default constructor (do not remove)
     */
    public KeyPIAMImpl() {
    }

    /**
     * Commit database changes
     * @param N/A
     */
    public void commit() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.commit();
    }

    /**
     * Rollback database transactions
     */
    public void rollback() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.rollback();
    }

    public void createKPIConstraint(String kpiId) {
        OAViewObject vo = getKPIConstraintVO1();
        if (!vo.isPreparedForExecution())
            vo.executeQuery();
        Row row = vo.createRow();
        row.setAttribute("KpiId", kpiId);
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
    }

    public void poplistConstraintObjs(String type) {
        // 1, refresh constraint objects
        /*
        KPIConObjVOImpl objVo = (KPIConObjVOImpl)findViewObject("KPIConObjVO1");
        objVo.clearCache();
        objVo.reset();
        if (objVo == null)
        {
            MessageToken[] errTokens = { new MessageToken("OBJECT_NAME", "KPIConObjVO") };
                throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        objVo.initQuery(type);
        //System.out.println("Total rows fetched = "+objVo.getRowCount());
        */

        //2, refresh constraint jobs
        KPIConJobVOImpl jobVo = 
            (KPIConJobVOImpl)findViewObject("KPIConJobVO1");
        jobVo.clearCache();
        jobVo.reset();
        if (jobVo == null) {
            MessageToken[] errTokens = 
            { new MessageToken("OBJECT_NAME", "KPIConJobVO") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        jobVo.initQuery(type);
    }

    public void poplistConstraintObjs() {
        // 1, refresh constraint objects
        KPIConObjVOImpl objVo = 
            (KPIConObjVOImpl)findViewObject("KPIConObjVO1");
        objVo.clearCache();
        objVo.reset();

        if (objVo == null) {
            MessageToken[] errTokens = 
            { new MessageToken("OBJECT_NAME", "KPIConObjVO") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        objVo.initQuery("");

        // 2, refresh constraint jobs
        KPIConJobVOImpl jobVo = 
            (KPIConJobVOImpl)findViewObject("KPIConJobVO1");
        jobVo.clearCache();
        jobVo.reset();
        if (jobVo == null) {
            MessageToken[] errTokens = 
            { new MessageToken("OBJECT_NAME", "KPIConJobVO") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        jobVo.initQuery("");

    }
    //zs
    /*KpiClass��KpiArea��j��*/

    public void poplistConstraintClassArea() {
        // 1, refresh constraint objects
        KPILevelVOImpl objVo = (KPILevelVOImpl)findViewObject("KPILevelVO1");
        objVo.clearCache();
        objVo.reset();
        if (objVo == null) {
            MessageToken[] errTokens = 
            { new MessageToken("OBJECT_NAME", "KPILevelVO") };
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", errTokens);
        }
        //objVo.initQuery(type);
        objVo.executeQuery();
        //System.out.println("Total rows fetched = "+objVo.getRowCount());
    }
    //zs

    /**
     * Query KPI
     */
    public void queryKPI(String kpiClass, String kpiName, String dataSource, 
                         String dataDim) {
        OAViewObject vo = getKeyPIVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("KPI_CLASS = :1");
        vo.setWhereClauseParam(0, kpiClass);
        vo.executeQuery();
    }

    /**
     * Initiate all KPI constraints
     */
    public void initKpiConstraints(String kpiId) {
        OAViewObject vo = getKPIConstraintVO1();
        vo.setWhereClauseParams(null);
        vo.setWhereClause("KPI_ID = :1");
        vo.setWhereClauseParam(0, kpiId);
        vo.executeQuery();
    }


    /**
     * Initiate all KPI constraints
     */
    public void initKPIDimension(String kpiId) {
        KPIDimensionVOImpl vo = 
            (KPIDimensionVOImpl)findViewObject("KPIDimensionVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause(null);
        vo.setWhereClause("KPI_ID = :1");
        vo.setWhereClauseParam(0, kpiId);
        vo.executeQuery();
    }

    /**
     * Initiate all KPI dimensions
     */
    public void initKPIDim(String kpiId) {
        KPIDimVOImpl vo = (KPIDimVOImpl)findViewObject("KPIDimVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause(null);
        vo.setWhereClause("KPI_ID = :1");
        vo.setWhereClauseParam(0, kpiId);
        vo.executeQuery();
    }

    /**
     * Initiate all KPI constraints
     */
    public void initKPILogic(String kpiId) {
        KeyPIVOImpl vo = (KeyPIVOImpl)findViewObject("KeyPIVO2");
        vo.setWhereClauseParams(null);
        vo.setWhereClause(null);
        vo.setWhereClause("KPI_ID = :1");
        vo.setWhereClauseParam(0, kpiId);
        vo.executeQuery();
    }

    public void queryKPIDimensionValue(String kpiId, String constraintId) {
        KpiCtrValueVOImpl vo = 
            (KpiCtrValueVOImpl)findViewObject("KpiCtrValueVO1");
        vo.setWhereClauseParams(null);
        vo.setWhereClause(null);
        vo.setWhereClause("KPI_ID = :1 AND CONSTRAINT_ID = :2");
        vo.setWhereClauseParam(0, kpiId);
        vo.setWhereClauseParam(1, constraintId);
        vo.executeQuery();
    }


    /**
     * Delete KPI constraint
     */
    public void deleteKPIConstraint(String constraintId) {
        OAViewObject vo = null;
        vo = getKPIConstraintVO1();
        vo.executeQuery();
        Object obj[] = new Object[1];
        obj[0] = constraintId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            //getOADBTransaction().commit();
        }
    }


    /**
     * Delete KPI dimension
     */
    public void delKPIDimension(String dimensionId) {
        OAViewObject vo = null;
        vo = getKPIDimensionVO1();
        vo.executeQuery();
        Object obj[] = new Object[1];
        obj[0] = dimensionId;
        Key key = new Key(obj);
        Row row = vo.getRow(key);
        if (row != null) {
            row.remove();
            getOADBTransaction().commit();
        }
    }


    /**
     * Verify whether a KPI can be deleted
     */
    public

    String processKPI(String kpiId, String action) {
        String result = "";
        String sql = "";

        if (action.equals("delete"))
            sql = sqlDelKPI;
        else if (action.equals("validate"))
            sql = sqlValidateKPI;
        else if (action.equals("delete"))
            sql = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(sql, 1);
        try {
            cs.setString(1, kpiId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    public String initKPIDimensionValue(String kpiId, String constraintId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_per_review_pkg.pop_kpi_constraint_dim(?,?,?)", 
                                                1);
        try {
            cs.setString(1, kpiId);
            cs.setString(2, constraintId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        if (cs != null)
            try {
                cs.close();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        return result;
    }

    public String validateConstraint(String constraintId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_per_review_pkg.validate_constraint(?,?)", 
                                                1);
        try {
            cs.setString(1, constraintId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        if (cs != null)
            try {
                cs.close();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        return result;
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "KeyPIAMLocal");
    }

    /**Container's getter for KeyPIVO1
     */
    public KeyPIVOImpl getKeyPIVO1() {
        return (KeyPIVOImpl)findViewObject("KeyPIVO1");
    }


    /**Container's getter for KPIConstraintReadonlyVO1
     */
    public KPIConstraintReadonlyVOImpl getKPIConstraintReadonlyVO1() {
        return (KPIConstraintReadonlyVOImpl)findViewObject("KPIConstraintReadonlyVO1");
    }

    /**Container's getter for KPIConObjVO1
     */
    public KPIConObjVOImpl getKPIConObjVO1() {
        return (KPIConObjVOImpl)findViewObject("KPIConObjVO1");
    }

    /**Container's getter for KPIConJobVO1
     */
    public KPIConJobVOImpl getKPIConJobVO1() {
        return (KPIConJobVOImpl)findViewObject("KPIConJobVO1");
    }


    /**Container's getter for KPIDimensionVO1
     */
    public KPIDimensionVOImpl getKPIDimensionVO1() {
        return (KPIDimensionVOImpl)findViewObject("KPIDimensionVO1");
    }

    /**Container's getter for KeyPIVO2
     */
    public KeyPIVOImpl getKeyPIVO2() {
        return (KeyPIVOImpl)findViewObject("KeyPIVO2");
    }

    /**Container's getter for KPIDimVO1
     */
    public KPIDimVOImpl getKPIDimVO1() {
        return (KPIDimVOImpl)findViewObject("KPIDimVO1");
    }

    /**Container's getter for KpiCtrValueVO1
     */
    public KpiCtrValueVOImpl getKpiCtrValueVO1() {
        return (KpiCtrValueVOImpl)findViewObject("KpiCtrValueVO1");
    }

    /**Container's getter for KPIConstraintVO1
     */
    public KPIConstraintVOImpl getKPIConstraintVO1() {
        return (KPIConstraintVOImpl)findViewObject("KPIConstraintVO1");
    }

    /**Container's getter for KPIObjectClassVO1
     */
    public KPIObjectClassVOImpl getKPIObjectClassVO1() {
        return (KPIObjectClassVOImpl)findViewObject("KPIObjectClassVO1");
    }

    /**Container's getter for KPILevelVO1
     */
    public KPILevelVOImpl getKPILevelVO1() {
        return (KPILevelVOImpl)findViewObject("KPILevelVO1");
    }

    /**Container's getter for KPIClassVO1
     */
    public KPIClassVOImpl getKPIClassVO1() {
        return (KPIClassVOImpl)findViewObject("KPIClassVO1");
    }
}
