package cux.oracle.apps.per.review.server;

import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KPIConstraintReadonlyVORowImpl extends OAViewRowImpl {
    public static final int CONSTRAINTID = 0;
    public static final int KPIID = 1;
    public static final int CONSTRAINTTYPE = 2;
    public static final int CONSTRAINTOBJ = 3;
    public static final int CONSTRAINTJOB = 4;
    public static final int CONSTRAINTDATADIM = 5;
    public static final int EPMCONAME = 6;
    public static final int EPMOCNAME = 7;
    public static final int EPMCJNAME = 8;
    public static final int EPMDDNAME = 9;

    /**This is the default constructor (do not remove)
     */
    public KPIConstraintReadonlyVORowImpl() {
    }

    /**Gets the attribute value for the calculated attribute ConstraintId
     */
    public Number getConstraintId() {
        return (Number)getAttributeInternal(CONSTRAINTID);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConstraintId
     */
    public void setConstraintId(Number value) {
        setAttributeInternal(CONSTRAINTID, value);
    }

    /**Gets the attribute value for the calculated attribute KpiId
     */
    public Number getKpiId() {
        return (Number)getAttributeInternal(KPIID);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute KpiId
     */
    public void setKpiId(Number value) {
        setAttributeInternal(KPIID, value);
    }

    /**Gets the attribute value for the calculated attribute ConstraintType
     */
    public String getConstraintType() {
        return (String)getAttributeInternal(CONSTRAINTTYPE);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConstraintType
     */
    public void setConstraintType(String value) {
        setAttributeInternal(CONSTRAINTTYPE, value);
    }

    /**Gets the attribute value for the calculated attribute ConstraintObj
     */
    public String getConstraintObj() {
        return (String)getAttributeInternal(CONSTRAINTOBJ);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConstraintObj
     */
    public void setConstraintObj(String value) {
        setAttributeInternal(CONSTRAINTOBJ, value);
    }

    /**Gets the attribute value for the calculated attribute ConstraintJob
     */
    public Number getConstraintJob() {
        return (Number)getAttributeInternal(CONSTRAINTJOB);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConstraintJob
     */
    public void setConstraintJob(Number value) {
        setAttributeInternal(CONSTRAINTJOB, value);
    }

    /**Gets the attribute value for the calculated attribute ConstraintDataDim
     */
    public String getConstraintDataDim() {
        return (String)getAttributeInternal(CONSTRAINTDATADIM);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ConstraintDataDim
     */
    public void setConstraintDataDim(String value) {
        setAttributeInternal(CONSTRAINTDATADIM, value);
    }

    /**Gets the attribute value for the calculated attribute EpmCoName
     */
    public String getEpmCoName() {
        return (String)getAttributeInternal(EPMCONAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute EpmCoName
     */
    public void setEpmCoName(String value) {
        setAttributeInternal(EPMCONAME, value);
    }

    /**Gets the attribute value for the calculated attribute EpmOcName
     */
    public String getEpmOcName() {
        return (String)getAttributeInternal(EPMOCNAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute EpmOcName
     */
    public void setEpmOcName(String value) {
        setAttributeInternal(EPMOCNAME, value);
    }

    /**Gets the attribute value for the calculated attribute EpmCjName
     */
    public String getEpmCjName() {
        return (String)getAttributeInternal(EPMCJNAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute EpmCjName
     */
    public void setEpmCjName(String value) {
        setAttributeInternal(EPMCJNAME, value);
    }

    /**Gets the attribute value for the calculated attribute EpmDdName
     */
    public String getEpmDdName() {
        return (String)getAttributeInternal(EPMDDNAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute EpmDdName
     */
    public void setEpmDdName(String value) {
        setAttributeInternal(EPMDDNAME, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case CONSTRAINTID:
            return getConstraintId();
        case KPIID:
            return getKpiId();
        case CONSTRAINTTYPE:
            return getConstraintType();
        case CONSTRAINTOBJ:
            return getConstraintObj();
        case CONSTRAINTJOB:
            return getConstraintJob();
        case CONSTRAINTDATADIM:
            return getConstraintDataDim();
        case EPMCONAME:
            return getEpmCoName();
        case EPMOCNAME:
            return getEpmOcName();
        case EPMCJNAME:
            return getEpmCjName();
        case EPMDDNAME:
            return getEpmDdName();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }
}
