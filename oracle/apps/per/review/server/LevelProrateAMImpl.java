package cux.oracle.apps.per.review.server;

import java.math.BigDecimal;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LevelProrateAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public LevelProrateAMImpl() {
    }
    //initLevelAppraisalVO

    public void initLevelAppraisalVO(String pgroupId, String ppacketNum, 
                                     String pphaseId, String pperiodTypeId, 
                                     String pappraisalYear) {
        LevelAppraisalVOImpl vo = (LevelAppraisalVOImpl)getLevelAppraisalVO1();
        vo.initLevelAppraisalVO(pgroupId, ppacketNum, pphaseId, pperiodTypeId, 
                                pappraisalYear);
    }
    //Rollback

    public void rollbackReviewWorkflow() {
        Transaction txn = getTransaction();
        if (txn.isDirty()) {
            txn.rollback();
        }
    }
    //Apply

    public void apply() {
        getTransaction().commit();
    }
    //autoProrateService

    public void autoProrateService() {
        OAViewObject vo = getLevelProrateVO1();
        LevelProrateVORowImpl row = null;
        int matches = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator approveIter = vo.createRowSetIterator("approveIter");
        if (fetchedRowCount > 0) {
            approveIter.setRangeStart(0);
            approveIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = (LevelProrateVORowImpl)approveIter.getRowAtRangeIndex(i);
                String selectFlag = row.getSelectflag();

                if ("Y".equals(selectFlag)) {
                    String groupId = row.getAppraisalGroupId();
                    //String orgId = String.valueOf(row.getOrganizationId());
                    String packetNum = String.valueOf(row.getPacketNum());
                    String phaseId = "REVIEW";
                    String periodTypeId = row.getPeriodTypeId();
                    String appraisalYear = row.getAppraisalYear();
                    if ((groupId != null && !groupId.equals("")) && 
                        (packetNum != null && !packetNum.equals("")) && 
                        (periodTypeId != null && !periodTypeId.equals("")) && 
                        (appraisalYear != null && !appraisalYear.equals(""))) {
                        autoProrate(groupId, packetNum, phaseId, periodTypeId, 
                                    appraisalYear);

                    } else {
                        throw new OAException("CUX", "CUX_PRORATE_SELECT_WAR");
                    }

                    matches++;
                }
            }
        }
        approveIter.closeRowSetIterator();
        if (matches > 0) {
            apply();
            //vo.executeQuery();
        } else {
            throw new OAException("CUX", "CUX_PRORATE_SELECT_WAR");
        }

    }
    //autoProrate

    public void autoProrate(String groupId, String packetNum, String phaseId, 
                            String periodTypeId, String appraisalYear) {
        LevelAppraisalVOImpl vo = (LevelAppraisalVOImpl)getLevelAppraisalVO1();
        //int tmp = vo.getRowCount();
        vo.initLevelAppraisalVO(groupId, packetNum, phaseId, periodTypeId, 
                                appraisalYear);
        //tmp = vo.getRowCountInRange();
        int PerProrateNum = vo.getRowCount(); //.getFetchedRowCount();//;
        /*20090919 zs*/
        int[] levelList = 
            getProrateListByPacketNum(PerProrateNum, packetNum); //new int[5];
        /*20090919 zs*/
        int levelListCount = levelList.length;

        RowSetIterator setIter = vo.createRowSetIterator("setIter");
        setIter.setRangeStart(0);
        setIter.setRangeSize(PerProrateNum);
        int j = 0;
        for (int i = 0; i < levelListCount; i++) {
            for (int k = 0; (k < levelList[i]) && (j < PerProrateNum); 
                 k++, j++) {
                LevelAppraisalVORowImpl row = 
                    (LevelAppraisalVORowImpl)setIter.getRowAtRangeIndex(j);

                switch (i) {
                case 0:
                    row.setOriLevel("A");
                    row.setFinalLevel("A");
                    break;
                case 1:
                    row.setOriLevel("B"); //BAOCUO
                    row.setFinalLevel("B");
                    break;
                case 2:
                    row.setOriLevel("C");
                    row.setFinalLevel("C");
                    break;
                case 3:
                    row.setOriLevel("D");
                    row.setFinalLevel("D");
                    break;
                case 4:
                    row.setOriLevel("E");
                    row.setFinalLevel("E");
                }
            }
        }
        setIter.closeRowSetIterator();
    }
    //getProrateList

    public int[] getProrateList(int perProrateNum, String groupId, 
                                String orgId) {
        int[] prorateList = new int[5];
        double prorateA = 0;
        double prorateB = 0;
        double prorateC = 0;
        double prorateD = 0;
        double prorateE = 0;
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVO(groupId, orgId);
        /*20090909 zs*/
        if (!vo.hasNext())
            throw new OAException("CUX", "getProrateList");
        while (vo.hasNext()) {
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            prorateA = row.getLevelA().doubleValue() / 100;
            prorateB = row.getLevelB().doubleValue() / 100;
            prorateC = row.getLevelC().doubleValue() / 100;
            prorateD = row.getLevelD().doubleValue() / 100;
            prorateE = row.getLevelE().doubleValue() / 100;
        }
        int prorateAnum = 0;
        //prorateAnum = (int)Math.floor(perProrateNum*prorateA); 20101213 zs
        prorateAnum = 
                (new BigDecimal(perProrateNum * prorateA).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateBnum = 0;
        prorateBnum = 
                (new BigDecimal(perProrateNum * prorateB).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateDnum = 0;
        prorateDnum = 
                (new BigDecimal(perProrateNum * prorateD).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateEnum = 0;
        //prorateEnum = (int)Math.floor(perProrateNum*prorateE); 20101213 zs
        prorateEnum = 
                (new BigDecimal(perProrateNum * prorateE).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateCnum = 0;
        prorateCnum = 
                perProrateNum - prorateAnum - prorateBnum - prorateDnum - prorateEnum;

        prorateList[0] = prorateAnum;
        prorateList[1] = prorateBnum;
        prorateList[2] = prorateCnum;
        prorateList[3] = prorateDnum;
        prorateList[4] = prorateEnum;

        return prorateList;
    }
    /*20090919 zs*/
    //getProrateListByPacketNum

    public int[] getProrateListByPacketNum(int perProrateNum, 
                                           String packetNum) {
        int[] prorateList = new int[5];
        double prorateA = 0;
        double prorateB = 0;
        double prorateC = 0;
        double prorateD = 0;
        double prorateE = 0;
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVOByPacketNum(packetNum);
        /*20090909 zs*/
        if (!vo.hasNext())
            throw new OAException("CUX", "getProrateListByPacketNum");
        /*20090919 zs ֻ��Ҫȡһ����ݳ���*/
        //while(vo.hasNext()){
        if (vo.hasNext()) {
            /*20090919 zs*/
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            prorateA = row.getLevelA().doubleValue() / 100;
            prorateB = row.getLevelB().doubleValue() / 100;
            prorateC = row.getLevelC().doubleValue() / 100;
            prorateD = row.getLevelD().doubleValue() / 100;
            prorateE = row.getLevelE().doubleValue() / 100;
        }
        int prorateAnum = 0;
        //prorateAnum = (int)Math.floor(perProrateNum*prorateA);
        prorateAnum = 
                (new BigDecimal(perProrateNum * prorateA).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateBnum = 0;
        prorateBnum = 
                (new BigDecimal(perProrateNum * prorateB).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateDnum = 0;
        prorateDnum = 
                (new BigDecimal(perProrateNum * prorateD).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateEnum = 0;
        //prorateEnum = (int)Math.floor(perProrateNum*prorateE);
        prorateEnum = 
                (new BigDecimal(perProrateNum * prorateE).setScale(0, BigDecimal.ROUND_HALF_UP)).intValue();
        int prorateCnum = 0;
        prorateCnum = 
                perProrateNum - prorateAnum - prorateBnum - prorateDnum - prorateEnum;

        prorateList[0] = prorateAnum;
        prorateList[1] = prorateBnum;
        prorateList[2] = prorateCnum;
        prorateList[3] = prorateDnum;
        prorateList[4] = prorateEnum;

        return prorateList;
    }
    /*20090919 zs*/
    //initSearchQuery

    public void initSearchQuery(String pgroupId, String porgId, 
                                String pperiodTypeId, String pappraisalYear) {
        LevelProrateVOImpl vo = (LevelProrateVOImpl)getLevelProrateVO1();
        if (vo == null) {
            MessageToken[] errToken = 
            { new MessageToken("OBJECT_NAME", "LevelProrateVOImpl") };
            throw new OAException("z", "s", errToken);
        }
        vo.initSearchQuery(pgroupId, porgId, pperiodTypeId, pappraisalYear);
    }
    //initLevelProrateDetailsQuery

    public void initLevelProrateDetailsQuery(String pgroupId, 
                                             String ppacketNum, /*20090919 zs*/
        String pperiodTypeId, String pappraisalYear) {
        LevelProrateDetailsVOImpl vo = 
            (LevelProrateDetailsVOImpl)getLevelProrateDetailsVO1();
        if (vo == null) {
            MessageToken[] errToken = 
            { new MessageToken("OBJECT_NAME", "LevelProrateDetailsVOImpl") };
            throw new OAException("z", "s", errToken);
        } /*20090919 zs*/
        vo.initLevelProrateDetailsQuery(pgroupId, ppacketNum, pperiodTypeId, 
                                        pappraisalYear);
    }
    //saveWfStatus

    public void saveWfStatus() {
        OAViewObject vo = getLevelProrateVO1();
        LevelProrateVORowImpl row = null;
        int matches = 0;

        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator approveIter = vo.createRowSetIterator("approveIter");
        if (fetchedRowCount > 0) {
            approveIter.setRangeStart(0);
            approveIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = (LevelProrateVORowImpl)approveIter.getRowAtRangeIndex(i);
                String selectFlag = row.getSelectflag();

                if ("Y".equals(selectFlag)) {
                    String groupId = row.getAppraisalGroupId();
                    //String orgId = String.valueOf(row.getOrganizationId());
                    /*20090919 zs*/
                    String packetNum = String.valueOf(row.getPacketNum());
                    /*20090919 zs*/
                    String phaseId = "REVIEW";
                    String periodTypeId = row.getPeriodTypeId();
                    String appraisalYear = row.getAppraisalYear();
                    String wfStatusId = 
                        row.getWfStatusCode(); //.getWfStatus();
                    /*���״̬�������->�ѷ������ѷ���->�ѹ鵵*/
                    /*
                    if(wfStatusId.equals("COMPLETED"))
                        wfStatusId = "PUBLISHED";
                   else if(wfStatusId.equals("PUBLISHED"))
                        wfStatusId = "FREEZED";*/
                    if ((groupId != null && !groupId.equals("")) && 
                        (packetNum != null && !packetNum.equals("")) && 
                        (periodTypeId != null && !periodTypeId.equals("")) && 
                        (appraisalYear != null && !appraisalYear.equals(""))) {
                        saveAppraisalStatus(groupId, packetNum, phaseId, 
                                            periodTypeId, appraisalYear, 
                                            wfStatusId);

                    } else {
                        throw new OAException("CUX", 
                                              "FWK_TBX_T_SELECT_FOR_APPROVE");
                    }

                    matches++;
                }
            }
        }
        approveIter.closeRowSetIterator();
        if (matches > 0) {
            apply();
            //vo.executeQuery();
        } else {
            throw new OAException("CUX", "CUX_PRORATE_SELECT_WAR");
        }
    }
    //saveAppraisalStatus

    public void saveAppraisalStatus(String groupId, String packetNum, 
                                    String phaseId, String periodTypeId, 
                                    String appraisalYear, String wfStatusId) {
        LevelAppraisalVOImpl vo = (LevelAppraisalVOImpl)getLevelAppraisalVO1();
        vo.initLevelAppraisalVO(groupId, packetNum, phaseId, periodTypeId, 
                                appraisalYear);
        int PerAppraisalNum = vo.getRowCount();

        RowSetIterator setIter = vo.createRowSetIterator("setIter");
        setIter.setRangeStart(0);
        setIter.setRangeSize(PerAppraisalNum);
        for (int i = 0; i < PerAppraisalNum; i++) {
            LevelAppraisalVORowImpl row = 
                (LevelAppraisalVORowImpl)setIter.getRowAtRangeIndex(i);
            row.setStatusId(wfStatusId);
        }
        setIter.closeRowSetIterator();
    }
    //saveFinalLevel

    public void saveFinalLevel(String autoProrateFlag, String groupId, 
                               String packetNum, String perNum) {
        int perProrateNum = Integer.parseInt(perNum);
        String forceProrateFlag = getForceProrateFlagByPacketNum(packetNum);
        double varAdjust = getProrateAdjustByPacketNum(packetNum);
        //int[] levelList = getProrateList(perProrateNum,groupId,orgId);
        /*20090919 zs*/
        int[] levelList = getProrateListByPacketNum(perProrateNum, packetNum);
        /*20090919 zs*/
        if (autoProrateFlag.equals("Y")) {
            if (forceProrateFlag.equals("Y")) {
                checkAdjustValidation(varAdjust, perProrateNum);
                checkForceProrate(levelList);
            } else {
                checkAdjustValidation(varAdjust, perProrateNum);
            }
        } else {
            if (forceProrateFlag.equals("Y")) {
                checkForceProrate(levelList);
            } else {
                ;
            }
        }
        apply();
    }

    public void checkAdjustValidation(double varAdjust, int perProrateNum) {
        String suggestLevel = "";
        String finalLevel = "";
        int adjustCount = 0;
        LevelProrateDetailsVOImpl vo = 
            (LevelProrateDetailsVOImpl)getLevelProrateDetailsVO1();
        vo.executeQuery(); //very important
        //int c = vo.getRowCount();
        while (vo.hasNext()) {
            LevelProrateDetailsVORowImpl row = 
                (LevelProrateDetailsVORowImpl)vo.next();
            suggestLevel = (String)row.getOriLevel();
            if (suggestLevel == null)
                suggestLevel = "-";
            finalLevel = (String)row.getFinalLevel();
            if (!suggestLevel.equals(finalLevel))
                adjustCount++;
            if (adjustCount > varAdjust * perProrateNum / 100) {
                //break;
                MessageToken[] tokens = 
                { new MessageToken("OBJECT_NUM", String.valueOf(Math.floor(varAdjust * 
                                                                           perProrateNum / 
                                                                           100))) };
                throw new OAException("CUX", "CUX_CHECK_ADJUST_VALIDATION", 
                                      tokens);
            }
        }
    }

    public void checkForceProrate(int[] levelList) {
        int prorateAnum = 0;
        int prorateBnum = 0;
        int prorateDnum = 0;
        int prorateEnum = 0;
        int prorateCnum = 0;

        String finalLevel = "";
        LevelProrateDetailsVOImpl vo = 
            (LevelProrateDetailsVOImpl)getLevelProrateDetailsVO1();
        vo.executeQuery();
        while (vo.hasNext()) {
            LevelProrateDetailsVORowImpl row = 
                (LevelProrateDetailsVORowImpl)vo.next();
            finalLevel = (String)row.getFinalLevel();
            if (finalLevel != null) {
                if (finalLevel.equals("A"))
                    prorateAnum++;
                if (finalLevel.equals("B"))
                    prorateBnum++;
                if (finalLevel.equals("C"))
                    prorateCnum++;
                if (finalLevel.equals("D"))
                    prorateDnum++;
                if (finalLevel.equals("E"))
                    prorateEnum++;
            }
        }
        if (levelList[0] != prorateAnum || levelList[1] != prorateBnum || 
            levelList[2] != prorateCnum || levelList[3] != prorateDnum || 
            levelList[4] != prorateEnum) {
            MessageToken[] tokens = 
            { new MessageToken("OBJECT_DES", levelList[0] + "," + 
                               levelList[1] + "," + levelList[2] + "," + 
                               levelList[3] + "," + levelList[4]) };
            throw new OAException("CUX", "CUX_CHECK_FORCE_PRORATE", tokens);
        }
    }
    //getProrateAdjust

    public double getProrateAdjust(String groupId, String orgId) {
        double varAdjust = 0;
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVO(groupId, orgId);
        if (!vo.hasNext())
            throw new OAException("CUX", "getProrateAdjust");
        while (vo.hasNext()) {
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            varAdjust = row.getAdjust().doubleValue();
        }
        return varAdjust;
    }
    //getForceProrateFlag

    public String getForceProrateFlag(String groupId, String orgId) {
        String ForceProrateFlag = "N";
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVO(groupId, orgId);
        if (!vo.hasNext())
            throw new OAException("CUX", "getForceProrateFlag");
        while (vo.hasNext()) {
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            ForceProrateFlag = row.getAttribute1();
        }
        return ForceProrateFlag;
    }
    //getProrateAdjustByPacketNum

    public double getProrateAdjustByPacketNum(String packetNum) {
        double varAdjust = 0;
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVOByPacketNum(packetNum);
        if (!vo.hasNext())
            throw new OAException("CUX", "getProrateAdjust");
        if (vo.hasNext()) {
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            varAdjust = row.getAdjust().doubleValue();
        }
        return varAdjust;
    }
    //getForceProrateFlagByPacketNum

    public String getForceProrateFlagByPacketNum(String packetNum) {
        String ForceProrateFlag = "N";
        ProrateManageVOImpl vo = (ProrateManageVOImpl)getProrateManageVO1();
        vo.initProrateManageVOByPacketNum(packetNum);
        if (!vo.hasNext())
            throw new OAException("CUX", "getForceProrateFlag");
        if (vo.hasNext()) {
            ProrateManageVORowImpl row = (ProrateManageVORowImpl)vo.next();
            ForceProrateFlag = row.getAttribute1();
        }
        return ForceProrateFlag;
    }

    /**Container's getter for LevelProrateVO1
     */
    public LevelProrateVOImpl getLevelProrateVO1() {
        return (LevelProrateVOImpl)findViewObject("LevelProrateVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.review.server", 
                                             "LevelProrateAMLocal");
    }

    /**Container's getter for LevelAppraisalVO1
     */
    public LevelAppraisalVOImpl getLevelAppraisalVO1() {
        return (LevelAppraisalVOImpl)findViewObject("LevelAppraisalVO1");
    }

    /**Container's getter for ProrateManageVO1
     */
    public ProrateManageVOImpl getProrateManageVO1() {
        return (ProrateManageVOImpl)findViewObject("ProrateManageVO1");
    }

    /**Container's getter for LevelProrateDetailsVO1
     */
    public LevelProrateDetailsVOImpl getLevelProrateDetailsVO1() {
        return (LevelProrateDetailsVOImpl)findViewObject("LevelProrateDetailsVO1");
    }
}
