package cux.oracle.apps.per.review.server;

import com.sun.java.util.collections.Iterator;

import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAAttrValException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAEntityImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProrateManageEOImpl extends OAEntityImpl {
    public static final int PRORATEID = 0;
    public static final int GROUPID = 1;
    public static final int ORGID = 2;
    public static final int PRORATECODE = 3;
    public static final int LEVELA = 4;
    public static final int LEVELB = 5;
    public static final int LEVELC = 6;
    public static final int LEVELD = 7;
    public static final int LEVELE = 8;
    public static final int ATTRIBUTE1 = 9;
    public static final int ATTRIBUTE2 = 10;
    public static final int ATTRIBUTE3 = 11;
    public static final int ATTRIBUTE4 = 12;
    public static final int ATTRIBUTE5 = 13;
    public static final int ATTRIBUTE6 = 14;
    public static final int ATTRIBUTE7 = 15;
    public static final int ATTRIBUTE8 = 16;
    public static final int ATTRIBUTE9 = 17;
    public static final int ATTRIBUTE10 = 18;
    public static final int LASTUPDATELOGIN = 19;
    public static final int LASTUPDATEDBY = 20;
    public static final int LASTUPDATEDATE = 21;
    public static final int CREATEDBY = 22;
    public static final int CREATIONDATE = 23;
    public static final int ADJUST = 24;
    public static final int PACKETNUM = 25;
    private static ProrateManageEODefImpl mDefinitionObject;

    /**This is the default constructor (do not remove)
     */
    public ProrateManageEOImpl() {
    }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = 
                    (ProrateManageEODefImpl)EntityDefImpl.findDefObject("cux.oracle.apps.per.review.server.ProrateManageEO");
        }
        return mDefinitionObject;
    }

    /**Add attribute defaulting logic in this method.
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();

        Iterator iter = 
            getDefinitionObject().getAllEntityInstancesIterator(getDBTransaction());
        Number currentGroupId = getGroupId();
        Number currentProrateId = getProrateId();
        Number currentOrgId = getOrgId();
        Number currentPacketNum = getPacketNum();
        int currLevelA = 0;
        int currLevelB = 0;
        int currLevelC = 0;
        int currLevelD = 0;
        int currLevelE = 0;
        int currAdj = 0;
        if (getLevelA() != null)
            currLevelA = getLevelA().intValue();
        if (getLevelB() != null)
            currLevelB = getLevelB().intValue();
        if (getLevelC() != null)
            currLevelC = getLevelC().intValue();
        if (getLevelD() != null)
            currLevelD = getLevelD().intValue();
        if (getLevelE() != null)
            currLevelE = getLevelE().intValue();
        if (getAdjust() != null)
            currAdj = getAdjust().intValue();
        //   System.out.println("currentPacketNum"+currentPacketNum);  
        //    System.out.println("currentGroupId"+currentGroupId); 
        //   System.out.println("currentProrateId"+currentProrateId);

        while (iter.hasNext()) {
            ProrateManageEOImpl cachedRATE = (ProrateManageEOImpl)iter.next();
            Number cachedGroupId = cachedRATE.getGroupId();
            Number cachedProrateId = cachedRATE.getProrateId();
            Number cachedOrg = cachedRATE.getOrgId();
            Number cachePacketNum = cachedRATE.getPacketNum();
            int cacheLevelA = 0;
            int cacheLevelB = 0;
            int cacheLevelC = 0;
            int cacheLevelD = 0;
            int cacheLevelE = 0;
            int cacheAdj = 0;
            //   System.out.println("cachedProrateId"+cachedProrateId);
            //   System.out.println("cachePacketNum"+cachePacketNum);  
            //    System.out.println("cachedGroupId"+cachedGroupId); 

            if (cachedRATE.getLevelA() != null)
                cacheLevelA = cachedRATE.getLevelA().intValue();
            if (cachedRATE.getLevelB() != null)
                cacheLevelB = cachedRATE.getLevelB().intValue();
            if (cachedRATE.getLevelC() != null)
                cacheLevelC = cachedRATE.getLevelC().intValue();
            if (cachedRATE.getLevelD() != null)
                cacheLevelD = cachedRATE.getLevelD().intValue();
            if (cachedRATE.getLevelE() != null)
                cacheLevelE = cachedRATE.getLevelE().intValue();
            // System.out.println("cache1");
            if (cachedRATE.getAdjust() != null)
                cacheAdj = cachedRATE.getAdjust().intValue();


            if ((cacheLevelA + cacheLevelB + cacheLevelC + cacheLevelD + 
                 cacheLevelE) != 100) {
                throw new OAException("CUX", "CUX_PRORATE_TOTAL_VALIDATION", 
                                      null, OAException.ERROR, null);
            }

            //validate the combination of groups and organizations!   
            if (cachedProrateId.compareTo(currentProrateId) != 0 && 
                currentOrgId.compareTo(cachedOrg) == 0 && 
                cachedGroupId.compareTo(currentGroupId) == 0) {
                throw // EO name
                    // EO PK
                    // Attribute Name
                    // Attribute value
                    // Message product short name
                    new OAAttrValException(OAException.TYP_ENTITY_OBJECT, 
                                           getEntityDef().getFullName(), 
                                           getPrimaryKey(), "OrgId", 
                                           currentOrgId, "CUX", 
                                           "CUX_PRORATE_GROORG_UNIQUE"); // Message name
            }

            //validate the same PacketNum's proportion
            if (cachedProrateId.compareTo(currentProrateId) != 0 && 
                currentPacketNum.compareTo(cachePacketNum) == 0) {
                //    System.out.println("flag1"); 
                if (currentGroupId.compareTo(cachedGroupId) != 0) {
                    //     System.out.println("flag2"); 
                    throw // EO name
                        // EO PK
                        // Attribute Name
                        // Attribute value
                        // Message product short name
                        new OAAttrValException(OAException.TYP_ENTITY_OBJECT, 
                                               getEntityDef().getFullName(), 
                                               getPrimaryKey(), "GroupId", 
                                               currentGroupId, "CUX", 
                                               "CUX_PRORATE_SEQUENCE"); // Message name
                } else if (currLevelA != cacheLevelA || 
                           currLevelB != cacheLevelB || 
                           currLevelC != cacheLevelC || 
                           currLevelD != cacheLevelD || 
                           currLevelE != cacheLevelE || 
                           currAdj != cacheAdj) { //System.out.println("flag3"); 
                    throw new OAException("CUX", "CUX_PRORATE_SEQUENCE_RATE", 
                                          null, OAException.ERROR, null);
                }
            }
        }

        /*��֤��ݿ��еļ�¼�Ƿ��뵱ǰ�û������ļ�¼�г�ͻ*/
        OADBTransaction transaction = getOADBTransaction();
        OAApplicationModule vam;
        vam = 
(OAApplicationModule)transaction.findApplicationModule("ProrateManageAM");
        if (vam == null) {
            vam = 
(OAApplicationModule)transaction.createApplicationModule("ProrateManageAM", 
                                                         "cux.oracle.apps.per.review.server.ProrateManageAM");
        }

        ProrateManageVOImpl valVo = 
            (ProrateManageVOImpl)vam.findViewObject("ProrateManageVO1");
        valVo.initProrateManageVO(currentOrgId == null ? null : 
                                  currentOrgId.toString(), 
                                  currentGroupId == null ? null : 
                                  currentGroupId.toString());
        if (valVo.hasNext()) {
            throw // EO name
                // EO PK
                // Attribute Name
                // Attribute value
                // Message product short name
                new OAAttrValException(OAException.TYP_ENTITY_OBJECT, 
                                       getEntityDef().getFullName(), 
                                       getPrimaryKey(), "OrgId", currentOrgId, 
                                       "CUX", 
                                       "CUX_PRORATE_GROORG_UNIQUE"); // Message name
        }

        valVo.initProrateIdQuery(currentPacketNum);

        while (valVo.hasNext()) {
            //ProrateManageEOImpl DBrate = (ProrateManageEOImpl) valVo.next();
            //fch 20090902
            ProrateManageVORowImpl DBrate = 
                (ProrateManageVORowImpl)valVo.next();
            //fch 20090902
            Number prorateId = DBrate.getProrateId();
            Number DbgroupId = DBrate.getGroupId();
            int DbA = 0;
            int DbB = 0;
            int DbC = 0;
            int DbD = 0;
            int DbE = 0;
            int DbAdj = 0;
            if (DBrate.getLevelA() != null)
                DbA = DBrate.getLevelA().intValue();
            if (DBrate.getLevelB() != null)
                DbB = DBrate.getLevelB().intValue();
            if (DBrate.getLevelC() != null)
                DbC = DBrate.getLevelC().intValue();
            if (DBrate.getLevelD() != null)
                DbD = DBrate.getLevelD().intValue();
            if (DBrate.getLevelE() != null)
                DbE = DBrate.getLevelE().intValue();
            if (DBrate.getAdjust() != null)
                DbAdj = DBrate.getAdjust().intValue();

            if (prorateId.compareTo(currentProrateId) != 0 && 
                DbgroupId.compareTo(currentGroupId) != 0) {
                throw // EO name
                    // EO PK
                    // Attribute Name
                    // Attribute value
                    // Message product short name
                    new OAAttrValException(OAException.TYP_ENTITY_OBJECT, 
                                           getEntityDef().getFullName(), 
                                           getPrimaryKey(), "GroupId", 
                                           currentGroupId, "CUX", 
                                           "CUX_PRORATE_SEQUENCE"); // Message name
            } else if (prorateId.compareTo(currentProrateId) != 0 && 
                       (currLevelA != DbA || currLevelB != DbB || 
                        currLevelC != DbC || currLevelD != DbD || 
                        currLevelE != DbE || currAdj != DbAdj)) {
                throw new OAException("CUX", "CUX_PRORATE_SEQUENCE_RATE", null, 
                                      OAException.ERROR, null);
            }
        }


    }

    /**Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**Custom DML update/insert/delete logic here.
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**Gets the attribute value for ProrateId, using the alias name ProrateId
     */
    public Number getProrateId() {
        return (Number)getAttributeInternal(PRORATEID);
    }

    /**Sets <code>value</code> as the attribute value for ProrateId
     */
    public void setProrateId(Number value) {
        setAttributeInternal(PRORATEID, value);
    }

    /**Gets the attribute value for GroupId, using the alias name GroupId
     */
    public Number getGroupId() {
        return (Number)getAttributeInternal(GROUPID);
    }

    /**Sets <code>value</code> as the attribute value for GroupId
     */
    public void setGroupId(Number value) {
        setAttributeInternal(GROUPID, value);
    }

    /**Gets the attribute value for OrgId, using the alias name OrgId
     */
    public Number getOrgId() {
        return (Number)getAttributeInternal(ORGID);
    }

    /**Sets <code>value</code> as the attribute value for OrgId
     */
    public void setOrgId(Number value) {
        setAttributeInternal(ORGID, value);
    }

    /**Gets the attribute value for ProrateCode, using the alias name ProrateCode
     */
    public String getProrateCode() {
        return (String)getAttributeInternal(PRORATECODE);
    }

    /**Sets <code>value</code> as the attribute value for ProrateCode
     */
    public void setProrateCode(String value) {
        setAttributeInternal(PRORATECODE, value);
    }

    /**Gets the attribute value for LevelA, using the alias name LevelA
     */
    public Number getLevelA() {
        return (Number)getAttributeInternal(LEVELA);
    }

    /**Sets <code>value</code> as the attribute value for LevelA
     */
    public void setLevelA(Number value) {
        setAttributeInternal(LEVELA, value);
    }

    /**Gets the attribute value for LevelB, using the alias name LevelB
     */
    public Number getLevelB() {
        return (Number)getAttributeInternal(LEVELB);
    }

    /**Sets <code>value</code> as the attribute value for LevelB
     */
    public void setLevelB(Number value) {
        setAttributeInternal(LEVELB, value);
    }

    /**Gets the attribute value for LevelC, using the alias name LevelC
     */
    public Number getLevelC() {
        return (Number)getAttributeInternal(LEVELC);
    }

    /**Sets <code>value</code> as the attribute value for LevelC
     */
    public void setLevelC(Number value) {
        setAttributeInternal(LEVELC, value);
    }

    /**Gets the attribute value for LevelD, using the alias name LevelD
     */
    public Number getLevelD() {
        return (Number)getAttributeInternal(LEVELD);
    }

    /**Sets <code>value</code> as the attribute value for LevelD
     */
    public void setLevelD(Number value) {
        setAttributeInternal(LEVELD, value);
    }

    /**Gets the attribute value for LevelE, using the alias name LevelE
     */
    public Number getLevelE() {
        return (Number)getAttributeInternal(LEVELE);
    }

    /**Sets <code>value</code> as the attribute value for LevelE
     */
    public void setLevelE(Number value) {
        setAttributeInternal(LEVELE, value);
    }

    /**Gets the attribute value for Attribute1, using the alias name Attribute1
     */
    public String getAttribute1() {
        return (String)getAttributeInternal(ATTRIBUTE1);
    }

    /**Sets <code>value</code> as the attribute value for Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**Gets the attribute value for Attribute2, using the alias name Attribute2
     */
    public String getAttribute2() {
        return (String)getAttributeInternal(ATTRIBUTE2);
    }

    /**Sets <code>value</code> as the attribute value for Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**Gets the attribute value for Attribute3, using the alias name Attribute3
     */
    public String getAttribute3() {
        return (String)getAttributeInternal(ATTRIBUTE3);
    }

    /**Sets <code>value</code> as the attribute value for Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**Gets the attribute value for Attribute4, using the alias name Attribute4
     */
    public String getAttribute4() {
        return (String)getAttributeInternal(ATTRIBUTE4);
    }

    /**Sets <code>value</code> as the attribute value for Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**Gets the attribute value for Attribute5, using the alias name Attribute5
     */
    public String getAttribute5() {
        return (String)getAttributeInternal(ATTRIBUTE5);
    }

    /**Sets <code>value</code> as the attribute value for Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**Gets the attribute value for Attribute6, using the alias name Attribute6
     */
    public String getAttribute6() {
        return (String)getAttributeInternal(ATTRIBUTE6);
    }

    /**Sets <code>value</code> as the attribute value for Attribute6
     */
    public void setAttribute6(String value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**Gets the attribute value for Attribute7, using the alias name Attribute7
     */
    public String getAttribute7() {
        return (String)getAttributeInternal(ATTRIBUTE7);
    }

    /**Sets <code>value</code> as the attribute value for Attribute7
     */
    public void setAttribute7(String value) {
        setAttributeInternal(ATTRIBUTE7, value);
    }

    /**Gets the attribute value for Attribute8, using the alias name Attribute8
     */
    public String getAttribute8() {
        return (String)getAttributeInternal(ATTRIBUTE8);
    }

    /**Sets <code>value</code> as the attribute value for Attribute8
     */
    public void setAttribute8(String value) {
        setAttributeInternal(ATTRIBUTE8, value);
    }

    /**Gets the attribute value for Attribute9, using the alias name Attribute9
     */
    public String getAttribute9() {
        return (String)getAttributeInternal(ATTRIBUTE9);
    }

    /**Sets <code>value</code> as the attribute value for Attribute9
     */
    public void setAttribute9(String value) {
        setAttributeInternal(ATTRIBUTE9, value);
    }

    /**Gets the attribute value for Attribute10, using the alias name Attribute10
     */
    public String getAttribute10() {
        return (String)getAttributeInternal(ATTRIBUTE10);
    }

    /**Sets <code>value</code> as the attribute value for Attribute10
     */
    public void setAttribute10(String value) {
        setAttributeInternal(ATTRIBUTE10, value);
    }

    /**Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin
     */
    public Number getLastUpdateLogin() {
        return (Number)getAttributeInternal(LASTUPDATELOGIN);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateLogin
     */
    public void setLastUpdateLogin(Number value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreationDate, using the alias name CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**Sets <code>value</code> as the attribute value for CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case PRORATEID:
            return getProrateId();
        case GROUPID:
            return getGroupId();
        case ORGID:
            return getOrgId();
        case PRORATECODE:
            return getProrateCode();
        case LEVELA:
            return getLevelA();
        case LEVELB:
            return getLevelB();
        case LEVELC:
            return getLevelC();
        case LEVELD:
            return getLevelD();
        case LEVELE:
            return getLevelE();
        case ATTRIBUTE1:
            return getAttribute1();
        case ATTRIBUTE2:
            return getAttribute2();
        case ATTRIBUTE3:
            return getAttribute3();
        case ATTRIBUTE4:
            return getAttribute4();
        case ATTRIBUTE5:
            return getAttribute5();
        case ATTRIBUTE6:
            return getAttribute6();
        case ATTRIBUTE7:
            return getAttribute7();
        case ATTRIBUTE8:
            return getAttribute8();
        case ATTRIBUTE9:
            return getAttribute9();
        case ATTRIBUTE10:
            return getAttribute10();
        case LASTUPDATELOGIN:
            return getLastUpdateLogin();
        case LASTUPDATEDBY:
            return getLastUpdatedBy();
        case LASTUPDATEDATE:
            return getLastUpdateDate();
        case CREATEDBY:
            return getCreatedBy();
        case CREATIONDATE:
            return getCreationDate();
        case ADJUST:
            return getAdjust();
        case PACKETNUM:
            return getPacketNum();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case PRORATEID:
            setProrateId((Number)value);
            return;
        case GROUPID:
            setGroupId((Number)value);
            return;
        case ORGID:
            setOrgId((Number)value);
            return;
        case PRORATECODE:
            setProrateCode((String)value);
            return;
        case LEVELA:
            setLevelA((Number)value);
            return;
        case LEVELB:
            setLevelB((Number)value);
            return;
        case LEVELC:
            setLevelC((Number)value);
            return;
        case LEVELD:
            setLevelD((Number)value);
            return;
        case LEVELE:
            setLevelE((Number)value);
            return;
        case ATTRIBUTE1:
            setAttribute1((String)value);
            return;
        case ATTRIBUTE2:
            setAttribute2((String)value);
            return;
        case ATTRIBUTE3:
            setAttribute3((String)value);
            return;
        case ATTRIBUTE4:
            setAttribute4((String)value);
            return;
        case ATTRIBUTE5:
            setAttribute5((String)value);
            return;
        case ATTRIBUTE6:
            setAttribute6((String)value);
            return;
        case ATTRIBUTE7:
            setAttribute7((String)value);
            return;
        case ATTRIBUTE8:
            setAttribute8((String)value);
            return;
        case ATTRIBUTE9:
            setAttribute9((String)value);
            return;
        case ATTRIBUTE10:
            setAttribute10((String)value);
            return;
        case LASTUPDATELOGIN:
            setLastUpdateLogin((Number)value);
            return;
        case LASTUPDATEDBY:
            setLastUpdatedBy((Number)value);
            return;
        case LASTUPDATEDATE:
            setLastUpdateDate((Date)value);
            return;
        case CREATEDBY:
            setCreatedBy((Number)value);
            return;
        case CREATIONDATE:
            setCreationDate((Date)value);
            return;
        case ADJUST:
            setAdjust((Number)value);
            return;
        case PACKETNUM:
            setPacketNum((Number)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }

    /**Gets the attribute value for Adjust, using the alias name Adjust
     */
    public Number getAdjust() {
        return (Number)getAttributeInternal(ADJUST);
    }

    /**Sets <code>value</code> as the attribute value for Adjust
     */
    public void setAdjust(Number value) {
        if ((value != null)) {
            int currentValue = value.intValue();
            if ((currentValue < 0) || (currentValue > 100)) {
                throw // EO name
                    // EO PK
                    // Attribute Name
                    // Attribute value
                    // Message product short name
                    new OAAttrValException(OAException.TYP_ENTITY_OBJECT, 
                                           getEntityDef().getFullName(), 
                                           getPrimaryKey(), "Adjust", value, 
                                           "CUX", 
                                           "CUX_PRORATE_ADJUST_ERROR"); // Message name
            }
        }

        setAttributeInternal(ADJUST, value);
    }

    /**Gets the attribute value for PacketNum, using the alias name PacketNum
     */
    public Number getPacketNum() {
        return (Number)getAttributeInternal(PACKETNUM);
    }

    /**Sets <code>value</code> as the attribute value for PacketNum
     */
    public void setPacketNum(Number value) {
        setAttributeInternal(PACKETNUM, value);
    }

    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(Number prorateId) {
        return new Key(new Object[] { prorateId });
    }
}
