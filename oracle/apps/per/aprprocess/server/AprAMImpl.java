package cux.oracle.apps.per.aprprocess.server;

import cux.oracle.apps.per.bonus.project.server.PrjBonusLotVOImpl;

import cux.oracle.apps.per.review.server.AppraisalCopyVORowImpl;
import cux.oracle.apps.per.review.server.PerKPILovVOImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Types;

import java.util.ArrayList;

import cux.oracle.apps.per.aprprocess.comm.DoubleProcess;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;
import oracle.apps.fnd.framework.server.OAViewDef;

import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AprAMImpl extends OAApplicationModuleImpl {

    /**This is the default constructor (do not remove)
     */
    public AprAMImpl() {
    }

    /* 关键绩效指标信息  */

    public class KpiItem {
        public KpiItem() {
        }

        public Integer KpiId;
        public String KpiName;
        public String KpiDesc;
        public String KpiDataSource;
        public String KpiArea;
        public Integer RecordNum; // 其他标识，返回记录数
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.aprprocess.server", 
                                             "AprAMLocal");
    }

    // 初始化人员绩效合同列表VO，在绩效管理_员工自助，入口界面EmpSelfMainPG使用

    public void InitAprEmpSelftListVO() {
        AprEmpSelfListVOImpl vo = this.getAprEmpSelfListVO1();
        vo.initQuery();
    }

    // 初始化人员绩效合同列表VO，在绩效管理_员工自助，入口界面EmpSelfMainPG使用
    // 带查询参数

    public void InitAprEmpSelftListVO(String strYearFrom, String strYearTo) {
        AprEmpSelfListVOImpl vo = this.getAprEmpSelfListVO1();
        vo.initQuery(strYearFrom, strYearTo);
    }

    /**Container's getter for AprEmpSelfListVO1
     */
    public AprEmpSelfListVOImpl getAprEmpSelfListVO1() {
        return (AprEmpSelfListVOImpl)findViewObject("AprEmpSelfListVO1");
    }

    /**Container's getter for AprEmpSelfDetailVO1
     */
    public AprEmpSelfDetailVOImpl getAprEmpSelfDetailVO1() {
        return (AprEmpSelfDetailVOImpl)findViewObject("AprEmpSelfDetailVO1");
    }

    private String getRowAttribute(Row pRow, String strAttrName) {
        if (pRow.getAttribute(strAttrName) != null) {
            return pRow.getAttribute(strAttrName).toString();
        } else
            return "";
    }

    /**Container's getter for ContractVO1
     */
    public ContractVOImpl getContractVO1() {
        return (ContractVOImpl)findViewObject("ContractVO1");
    }

    /**Container's getter for AprKPIVO1
     */
    public AprKPIVOImpl getAprKPIVO1() {
        return (AprKPIVOImpl)findViewObject("AprKPIVO1");
    }

    /**Container's getter for PerKPILovVO1
     */
    public PerKPILovVOImpl getPerKPILovVO1() {
        return (PerKPILovVOImpl)findViewObject("PerKPILovVO1");
    }

    /**
     * Commit database changes
     */
    public boolean commit() {
        Transaction txn = this.getTransaction();
        if (txn.isDirty()) {
            txn.commit();
            return true;
        } else
            return false;
    }

    /**
     * Rollback database transactions
     */
    public void rollback() {
        Transaction txn = getTransaction();
        if (txn.isDirty())
            txn.rollback();
    }

    /**Container's getter for AprDetail1
     */
    public AprDetailImpl getAprDetail1() {
        return (AprDetailImpl)findViewObject("AprDetail1");
    }


    /**Container's getter for KPILovVO1
     */
    public KPILovVOImpl getKPILovVO1() {
        return (KPILovVOImpl)findViewObject("KPILovVO1");
    }

    /* 判断员工自助，绩效合同设定页面，数据有效性
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkEmpSelfGoalSet() {
        String strRtn = this.checkEmpSelfGoalSetKPI();

        if ("s".equals(strRtn)) {
            strRtn = this.checkEmpSelfGoalSetTask();
        }

        if ("s".equals(strRtn)) { //数据验证有效，删除VO里面全部为空的行
            this.DelteEmpSelfGoalSetKPIEmpty();
            this.DelteEmpSelfGoalSetTaskEmpty();
        }

        return strRtn;
    }

    /* 判断员工自助，绩效合同设定页面，KPI数据有效性
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkEmpSelfGoalSetKPI() {
        String strRtn = "s";
        AprKPIVOImpl kpivo = this.getAprKPIVO1();
        int rowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String str = this.checkEmpSelfKPIRow(pRow);
            if (!"s".equals(str)) {
                strRtn = str;
                break;
            }
        }
        deptPersonIter.closeRowSetIterator();
        if ("s".equals(strRtn)) {
            this.restoreKPIEmpSelfGoal();
        }
        return strRtn;
    }

    /* 检查一行KPI数据有效性  */

    private String checkEmpSelfKPIRow(Row pRow) {
        String strRtn = "s";
        String strKpiName = this.getRowAttribute(pRow, "KpiName");
        String strWeight = this.getRowAttribute(pRow, "Weight");
        String strTargetValue = this.getRowAttribute(pRow, "TargetValue");
        String strMinimumValue = this.getRowAttribute(pRow, "MinimumValue");
        String strKpiId = this.getRowAttribute(pRow, "KpiId");
        ;

        if ("".equals(strKpiId) && "".equals(strKpiName) && 
            "".equals(strWeight) && "".equals(strTargetValue) && 
            "".equals(strMinimumValue)) {
            return strRtn; //如果都为空，则不提示，不保存
        }

        if ("".equals(strKpiName)) {
            strRtn = "考核指标不能为空！";
            return strRtn;
        }

        String str = "";
        if (!"".equals(strKpiId)) {
            Integer KpiId = Integer.valueOf(strKpiId);
            str = this.checkEmpSelfKPIRowKPIInfo(pRow, KpiId, strKpiName);
        } else
            str = this.checkEmpSelfKPIRowKPIInfo(pRow, strKpiName);

        if (!"s".equals(str)) {
            strRtn = str;
            return strRtn;
        }
        str = this.checkEmpSelfWeight(strWeight);
        if (!"s".equals(str)) {
            strRtn = str;
            return strRtn;
        }
        str = this.checkEmpSelfTargetValue("目标值", strTargetValue);
        if (!"s".equals(str)) {
            strRtn = str;
            return strRtn;
        }
        str = this.checkEmpSelfTargetValue("下限值", strMinimumValue);
        if (!"s".equals(str)) {
            strRtn = str;
        }
        return strRtn;
    }

    /* 检查一行KPI数据有效性，和LovVO里面的数据比对，避免用户之间手填KPI名字，或者从历史合同复制后之间提交
     * */

    private String checkEmpSelfKPIRowKPIInfo(Row pRow, String strKpiName) {
        String strRtn = "s";
        KpiItem item = this.getKPIInfoFromLovVO(strKpiName);
        if (item.RecordNum == 0) {
            Integer AppraisalId = 
                Integer.valueOf(this.getRowAttribute(pRow, "AppraisalId"));
            item = this.getKPIInfoFromDB(AppraisalId, strKpiName);
        }

        if (item.RecordNum == 0) {
            strRtn = "绩效指标“" + strKpiName + "”不在用户可选择范围，请通过考核指标弹出页面选择指标！";
            return strRtn;
        } else if (item.RecordNum > 1) {
            strRtn = "绩效指标“" + strKpiName + "”存在多个同名匹配项，请通过考核指标弹出页面选择指标！";
            return strRtn;
        }

        pRow.setAttribute("KpiId", item.KpiId);
        String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
        String KpiDataSource = this.getRowAttribute(pRow, "KpiDataSource");
        String KpiArea = this.getRowAttribute(pRow, "KpiArea");
        if (!KpiDesc.equals(item.KpiDesc))
            pRow.setAttribute("KpiDesc", item.KpiDesc);
        if (!KpiDataSource.equals(item.KpiDataSource))
            pRow.setAttribute("KpiDataSource", item.KpiDataSource);
        if (!KpiArea.equals(item.KpiArea))
            pRow.setAttribute("KpiArea", item.KpiArea);
        return strRtn;
    }

    /* 检查一行KPI数据有效性，和LovVO里面的数据比对，避免用户之间手填KPI名字，或者从历史合同复制后之间提交
    * */

    private String checkEmpSelfKPIRowKPIInfo(Row pRow, Integer KpiId, 
                                             String strKpiName) {
        String strRtn = "s";
        KpiItem item = this.getKPIInfoFromLovVO(strKpiName);
        if (item.RecordNum == 0) {
            Integer AppraisalId = 
                Integer.valueOf(this.getRowAttribute(pRow, "AppraisalId"));
            item = this.getKPIInfoFromDB(AppraisalId, strKpiName, KpiId);
        }

        if (item.RecordNum == 0) {
            strRtn = "绩效指标“" + strKpiName + "”不在用户可选择范围，请通过考核指标弹出页面选择指标！";
            return strRtn;
        } else if (item.RecordNum > 1) {
            strRtn = "绩效指标“" + strKpiName + "”存在多个同名匹配项，请通过考核指标弹出页面选择指标！";
            return strRtn;
        }

        String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
        String KpiDataSource = this.getRowAttribute(pRow, "KpiDataSource");
        String KpiArea = this.getRowAttribute(pRow, "KpiArea");
        if (!KpiDesc.equals(item.KpiDesc))
            pRow.setAttribute("KpiDesc", item.KpiDesc);
        if (!KpiDataSource.equals(item.KpiDataSource))
            pRow.setAttribute("KpiDataSource", item.KpiDataSource);
        if (!KpiArea.equals(item.KpiArea))
            pRow.setAttribute("KpiArea", item.KpiArea);
        return strRtn;
    }

    /* 用户录入了KpiName,从LovVo中获取该指标的对应信息 */

    private KpiItem getKPIInfoFromLovVO(String strKpiName) {
        KpiItem item = new KpiItem();
        item.RecordNum = 0;

        KPILovVOImpl kpilovvo = this.getKPILovVO1();
        if (!kpilovvo.IsQuery)
            return item; //Lov用户未点开，未执行初始化查询

        int rowCount = kpilovvo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpilovvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strName = this.getRowAttribute(pRow, "KpiName");
            if (!strName.equals(strKpiName))
                continue;
            item.RecordNum = item.RecordNum + 1;
            if (item.RecordNum > 1)
                break;
            item.KpiId = Integer.valueOf(this.getRowAttribute(pRow, "KpiId"));
            item.KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
            item.KpiDataSource = this.getRowAttribute(pRow, "KpiDataSource");
            item.KpiArea = this.getRowAttribute(pRow, "KpiArea");
        }
        deptPersonIter.closeRowSetIterator();

        return item;
    }

    /* 用户只录入了KpiName,没有KpiId,从数据库中获取该指标的对应信息 */

    private KpiItem getKPIInfoFromDB(Integer AppraisalId, String strKpiName) {
        KpiItem item = new KpiItem();
        item.RecordNum = 0;

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call CUX_JXKH_APRPROCESS_PKG.GET_KPI_INFO_FRM_NAME(?,?,?,?,?,?,?)", 
                                                1);
        try {
            cs.setInt(1, AppraisalId);
            cs.setString(2, strKpiName);
            cs.registerOutParameter(3, Types.INTEGER);
            cs.registerOutParameter(4, Types.INTEGER);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.executeUpdate();
            item.RecordNum = cs.getInt(3);
            item.KpiId = cs.getInt(4);
            item.KpiArea = cs.getString(5);
            item.KpiDataSource = cs.getString(6);
            item.KpiDesc = cs.getString(7);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return item;
    }

    /* 用户只录入了KpiName,KpiId,从数据库中获取该指标的对应信息 */

    private KpiItem getKPIInfoFromDB(Integer AppraisalId, String strKpiName, 
                                     Integer KpiId) {
        KpiItem item = new KpiItem();
        item.RecordNum = 0;

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call CUX_JXKH_APRPROCESS_PKG.GET_KPI_INFO_FRM_ID(?,?,?,?,?,?,?)", 
                                                1);
        try {
            cs.setInt(1, AppraisalId);
            cs.setString(2, strKpiName);
            cs.setInt(3, KpiId);
            cs.registerOutParameter(4, Types.INTEGER);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.executeUpdate();
            item.RecordNum = cs.getInt(4);
            item.KpiArea = cs.getString(5);
            item.KpiDataSource = cs.getString(6);
            item.KpiDesc = cs.getString(7);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return item;
    }

    /* 检查一行KPI数据有效性  */

    private String checkEmpSelfTaskRow(Row pRow) {
        String strRtn = "s";
        String strKpiName = this.getRowAttribute(pRow, "KpiName");
        String strWeight = this.getRowAttribute(pRow, "Weight");
        String strTargetValue = this.getRowAttribute(pRow, "TargetValue");
        String strMinimumValue = this.getRowAttribute(pRow, "MinimumValue");

        if ("".equals(strKpiName) && "".equals(strWeight) && 
            "".equals(strTargetValue) && "".equals(strMinimumValue)) {
            return strRtn; //如果都为空，则不提示，不保存
        }

        if ("".equals(strKpiName)) {
            strRtn = "考核指标不能为空！";
            return strRtn;
        }

        String str = this.checkEmpSelfWeight(strWeight);
        if (!"s".equals(str)) {
            strRtn = str;
            return strRtn;
        }

        str = this.checkEmpSelfTargetValue("目标值", strTargetValue);
        if (!"s".equals(str)) {
            strRtn = str;
            return strRtn;
        }

        str = this.checkEmpSelfTargetValue("下限值", strMinimumValue);
        if (!"s".equals(str)) {
            strRtn = str;
        }

        return strRtn;
    }

    /* 判断权重的有效性  */

    private String checkEmpSelfWeight(String strWeight) {
        String strRtn = "s";
        if ("".equals(strWeight)) {
            strRtn = "权重不能为空！";
        } else if (!this.isFloat(strWeight)) {
            strRtn = "权重为0-100范围内的整数或者小数！";
        } else {
            Float fWeight = Float.parseFloat(strWeight);
            if (fWeight <= 0 || fWeight > 100) {
                strRtn = "权重为0-100范围内的整数或者小数！";
            }
        }

        return strRtn;
    }

    /* 判断目标值和下限值的有效性  */

    private String checkEmpSelfTargetValue(String strItem, String strValue) {
        String strRtn = "s";
        if ("".equals(strValue)) {
            strRtn = strItem + "不能为空！";
        } else if (!this.isFloat(strValue)) {
            strRtn = strItem + "为整数或者小数！";
        }

        return strRtn;
    }

    /* 员工自助，绩效合同设定页面，KPI数据删除数据全部为空的记录 */

    private void DelteEmpSelfGoalSetKPIEmpty() {
        AprKPIVOImpl kpivo = this.getAprKPIVO1();
        int rowCount = kpivo.getRowCount();
        Object obj[] = new Object[rowCount];
        int emptyCount = 0;
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiName = this.getRowAttribute(pRow, "KpiName");
            String strWeight = this.getRowAttribute(pRow, "Weight");
            String strTargetValue = this.getRowAttribute(pRow, "TargetValue");
            String strMinimumValue = 
                this.getRowAttribute(pRow, "MinimumValue");

            if ("".equals(strKpiName) && "".equals(strWeight) && 
                "".equals(strTargetValue) && "".equals(strMinimumValue)) {
                obj[emptyCount] = this.getRowAttribute(pRow, "ContractId");
                emptyCount = emptyCount + 1;
            }
        }
        deptPersonIter.closeRowSetIterator();

        if (emptyCount == 0)
            return;

        for (int i = 0; i < emptyCount; i++) {
            String strCrt = String.valueOf(obj[i]);
            Object ob[] = new Object[1];
            ob[0] = strCrt;
            Key key = new Key(ob);
            Row row = kpivo.getRow(key);
            if (row != null) {
                row.remove();
            }
        }
    }

    /* 员工自助，绩效合同设定页面，工作任务数据删除数据全部为空的记录 */

    private void DelteEmpSelfGoalSetTaskEmpty() {
        AprTaskVOImpl taskvo = this.getAprTaskVO1();
        int rowCount = taskvo.getRowCount();
        Object obj[] = new Object[rowCount];
        int emptyCount = 0;
        RowSetIterator deptPersonIter = 
            taskvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiName = this.getRowAttribute(pRow, "KpiName");
            String strWeight = this.getRowAttribute(pRow, "Weight");
            String strTargetValue = this.getRowAttribute(pRow, "TargetValue");
            String strMinimumValue = 
                this.getRowAttribute(pRow, "MinimumValue");

            if ("".equals(strKpiName) && "".equals(strWeight) && 
                "".equals(strTargetValue) && "".equals(strMinimumValue)) {
                obj[emptyCount] = this.getRowAttribute(pRow, "ContractId");
                emptyCount = emptyCount + 1;
            }
        }
        deptPersonIter.closeRowSetIterator();

        if (emptyCount == 0)
            return;

        for (int i = 0; i < emptyCount; i++) {
            String strCrt = String.valueOf(obj[i]);
            Object ob[] = new Object[1];
            ob[0] = strCrt;
            Key key = new Key(ob);
            Row row = taskvo.getRow(key);
            if (row != null) {
                row.remove();
            }
        }
    }

    /* 验证员工自助，绩效合同设定页面，关键绩效指标
     * 指标描述和数据来源列，经常出现页面操作多次后，其值丢失的现象 */

    public void restoreKPIEmpSelfGoal() {
        AprKPIVOImpl kpivo = this.getAprKPIVO1();
        int rowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String KpiId = this.getRowAttribute(pRow, "KpiId");
            if ("".equals(KpiId))
                continue;

            Integer iKpiID = Integer.parseInt(KpiId);
            KPIDetailVOImpl vo = this.getKPIDetailVO1();
            vo.initQuery(iKpiID);

            String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
            String KpiDesc_df = vo.GetKPIAttr("KpiDesc");

            String KpiDataSource = this.getRowAttribute(pRow, "KpiDataSource");
            String KpiDataSource_df = vo.GetKPIAttr("KpiDataSource");

            String KpiArea = this.getRowAttribute(pRow, "KpiArea");
            String KpiArea_df = vo.GetKPIAttr("KpiArea");

            if (!KpiDesc.equals(KpiDesc_df)) {
                pRow.setAttribute("KpiDesc", KpiDesc_df);
            }

            if (!KpiDataSource.equals(KpiDataSource_df)) {
                pRow.setAttribute("KpiDataSource", KpiDataSource_df);
            }

            if (!KpiArea.equals(KpiArea_df)) {
                pRow.setAttribute("KpiArea", KpiArea_df);
            }
        }
        deptPersonIter.closeRowSetIterator();
    }

    /* 验证绩效合同审批，行为规范指标
     * 指标描述和数据来源列，经常出现页面操作多次后，其值丢失的现象 */

    public void restoreManagerReviewBehaviour() {
        BehaviourListVOImpl kpivo = this.getBehaviourListVO1();
        int rowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String KpiId = this.getRowAttribute(pRow, "KpiId");
            if ("".equals(KpiId))
                continue;

            Integer iKpiID = Integer.parseInt(KpiId);
            KPIDetailVOImpl vo = this.getKPIDetailVO1();
            vo.initQuery(iKpiID);

            String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
            String KpiDesc_df = vo.GetKPIAttr("KpiDesc");

            String KpiArea = this.getRowAttribute(pRow, "KpiArea");
            String KpiArea_df = vo.GetKPIAttr("KpiArea");

            if (!KpiDesc.equals(KpiDesc_df)) {
                pRow.setAttribute("KpiDesc", KpiDesc_df);
            }

            if (!KpiArea.equals(KpiArea_df)) {
                pRow.setAttribute("KpiArea", KpiArea_df);
            }
        }
        deptPersonIter.closeRowSetIterator();
    }

    /* 验证绩效合同审批，加分项
     * 指标描述和数据来源列，经常出现页面操作多次后，其值丢失的现象 */

    public void restoreManagerReviewAdd() {
        AddListVOImpl kpivo = this.getAddListVO1();
        int rowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String KpiId = this.getRowAttribute(pRow, "KpiId");
            if ("".equals(KpiId))
                continue;

            Integer iKpiID = Integer.parseInt(KpiId);
            KPIDetailVOImpl vo = this.getKPIDetailVO1();
            vo.initQuery(iKpiID);

            String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
            String KpiDesc_df = vo.GetKPIAttr("KpiDesc");

            String KpiArea = this.getRowAttribute(pRow, "KpiArea");
            String KpiArea_df = vo.GetKPIAttr("KpiArea");

            if (!KpiDesc.equals(KpiDesc_df)) {
                pRow.setAttribute("KpiDesc", KpiDesc_df);
            }

            if (!KpiArea.equals(KpiArea_df)) {
                pRow.setAttribute("KpiArea", KpiArea_df);
            }
        }
        deptPersonIter.closeRowSetIterator();
    }

    /* 验证绩效合同审批，减分项
     * 指标描述和数据来源列，经常出现页面操作多次后，其值丢失的现象 */

    public void restoreManagerReviewSub() {
        SubListVOImpl kpivo = this.getSubListVO1();
        int rowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String KpiId = this.getRowAttribute(pRow, "KpiId");
            if ("".equals(KpiId))
                continue;

            Integer iKpiID = Integer.parseInt(KpiId);
            KPIDetailVOImpl vo = this.getKPIDetailVO1();
            vo.initQuery(iKpiID);

            String KpiDesc = this.getRowAttribute(pRow, "KpiDesc");
            String KpiDesc_df = vo.GetKPIAttr("KpiDesc");

            String KpiArea = this.getRowAttribute(pRow, "KpiArea");
            String KpiArea_df = vo.GetKPIAttr("KpiArea");

            if (!KpiDesc.equals(KpiDesc_df)) {
                pRow.setAttribute("KpiDesc", KpiDesc_df);
            }

            if (!KpiArea.equals(KpiArea_df)) {
                pRow.setAttribute("KpiArea", KpiArea_df);
            }
        }
        deptPersonIter.closeRowSetIterator();
    }

    /* 判断员工自助，绩效合同设定页面，工作任务数据有效性
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkEmpSelfGoalSetTask() {
        String strRtn = "s";
        AprTaskVOImpl taskvo = this.getAprTaskVO1();
        int rowCount = taskvo.getRowCount();
        RowSetIterator deptPersonIter = 
            taskvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String str = this.checkEmpSelfTaskRow(pRow);
            if (!"s".equals(str)) {
                strRtn = str;
                break;
            }
        }
        deptPersonIter.closeRowSetIterator();
        return strRtn;
    }

    /* 判断员工自助，绩效合同设定页面，权重之和是否为100
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkEmpSelfGoalSetWeight() {
        String strRtn = "s";
        Double WeightTotal = 0.0;
        AprKPIVOImpl kpivo = this.getAprKPIVO1();
        int kpirowCount = kpivo.getRowCount();
        RowSetIterator deptPersonIter = 
            kpivo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(kpirowCount);
        for (int i = 0; i < kpirowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strWeight = this.getRowAttribute(pRow, "Weight");
            Double dWeight = Double.parseDouble(strWeight);
            WeightTotal = WeightTotal + dWeight;
        }
        deptPersonIter.closeRowSetIterator();

        AprTaskVOImpl taskvo = this.getAprTaskVO1();
        int taskrowCount = taskvo.getRowCount();
        deptPersonIter = taskvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(taskrowCount);
        for (int i = 0; i < taskrowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strWeight = this.getRowAttribute(pRow, "Weight");
            Double dWeight = Double.parseDouble(strWeight);
            WeightTotal = WeightTotal + dWeight;
        }
        deptPersonIter.closeRowSetIterator();

        if (WeightTotal != 100) {
            strRtn = "关键绩效指标和工作任务的权重之和应为100！";
        }

        return strRtn;
    }

    /* 检查绩效合同拷贝页面，是否选择了源合同
     * 若为选择，返回 0
     *     选择，返回 源appraisalId
     * */

    public Integer checkCopySelectApr() {
        AprCopyVOImpl vo = this.getAprCopyVO1();
        Integer iSelectAprID = 0;
        boolean appraisalSelected = false;
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator iter = vo.createRowSetIterator("selectIter");
        if (fetchedRowCount <= 0)
            return 0;
        iter.setRangeStart(0);
        iter.setRangeSize(fetchedRowCount);
        for (int i = 0; i < fetchedRowCount; i++) {
            Row pRow = iter.getRowAtRangeIndex(i);
            String Selected = this.getRowAttribute(pRow, "SelectFlag");
            if (Selected != null && "Y".equals(Selected)) {
                String strAprID = this.getRowAttribute(pRow, "AppraisalId");
                if (this.isInteger(strAprID))
                    iSelectAprID = Integer.valueOf(strAprID);
                appraisalSelected = true;
                break;
            }
        }
        iter.closeRowSetIterator();
        return iSelectAprID;
    }


    /* * 判断字符串是否是整数 */

    public boolean isInteger(String value) {
        try {
            Integer.parseInt(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /* 判断字符串是否是浮点数 */

    public boolean isFloat(String value) {
        try {
            Float.parseFloat(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }


    /**Container's getter for KPIDetailVO1
     */
    public KPIDetailVOImpl getKPIDetailVO1() {
        return (KPIDetailVOImpl)findViewObject("KPIDetailVO1");
    }

    /**Container's getter for AprTaskVO1
     */
    public AprTaskVOImpl getAprTaskVO1() {
        return (AprTaskVOImpl)findViewObject("AprTaskVO1");
    }


    /* 提交/审批至下一级
     * 返回: 'Y' 成功
     *      'N' 失败
     * */

    public String submitForApproval(Integer appraisalId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_next_approval(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }
        return result;
    }

    /**Container's getter for AprAttendVO1
     */
    public AprAttendVOImpl getAprAttendVO1() {
        return (AprAttendVOImpl)findViewObject("AprAttendVO1");
    }

    /**Container's getter for AprCopyVO1
     */
    public AprCopyVOImpl getAprCopyVO1() {
        return (AprCopyVOImpl)findViewObject("AprCopyVO1");
    }

    /* 拷贝绩效合同: oappraisalId 源， nappraisalId 目的
     * 返回: 成功 'Y'
     *      失败
     * */

    public String processCopy(Integer oappraisalId, Integer nappraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_per_review_pkg.copy_contract(?,?,?)", 
                                                1);
        try {
            cs.setInt(1, oappraisalId);
            cs.setInt(2, nappraisalId);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /**Container's getter for BehavAddSubVO1
     */
    public BehavAddSubVOImpl getBehavAddSubVO1() {
        return (BehavAddSubVOImpl)findViewObject("BehavAddSubVO1");
    }

    /**Container's getter for AttendVO1
     */
    public AttendVOImpl getAttendVO1() {
        return (AttendVOImpl)findViewObject("AttendVO1");
    }

    /**Container's getter for AttendNoteVO1
     */
    public AttendNoteVOImpl getAttendNoteVO1() {
        return (AttendNoteVOImpl)findViewObject("AttendNoteVO1");
    }

    /**Container's getter for AprManagerListVO1
     */
    public AprManagerListVOImpl getAprManagerListVO1() {
        return (AprManagerListVOImpl)findViewObject("AprManagerListVO1");
    }

    /**Container's getter for AprManagerDetailVO1
     */
    public AprManagerDetailVOImpl getAprManagerDetailVO1() {
        return (AprManagerDetailVOImpl)findViewObject("AprManagerDetailVO1");
    }

    /**
     * 退回绩效合同
     * 返回 'Y' - 成功
     *      'N' - 失败
     */
    public String submitForReturn(Integer appraisalId) {
        String result = "";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.submit_for_return(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
            return result;
        }
    }

    /**Container's getter for AddVO1
     */
    public AddVOImpl getAddVO1() {
        return (AddVOImpl)findViewObject("AddVO1");
    }

    /**Container's getter for BehaviourVO1
     */
    public BehaviourVOImpl getBehaviourVO1() {
        return (BehaviourVOImpl)findViewObject("BehaviourVO1");
    }

    /**Container's getter for SubVO1
     */
    public SubVOImpl getSubVO1() {
        return (SubVOImpl)findViewObject("SubVO1");
    }

    /**Container's getter for AprSourceManualVO1
     */
    public AprSourceManualVOImpl getAprSourceManualVO1() {
        return (AprSourceManualVOImpl)findViewObject("AprSourceManualVO1");
    }

    /**Container's getter for AprSourceSystemVO1
     */
    public AprSourceSystemVOImpl getAprSourceSystemVO1() {
        return (AprSourceSystemVOImpl)findViewObject("AprSourceSystemVO1");
    }

    /* 计算自评总分 */

    public void computeSelfScore(Integer appraisalId) {
        String result = "";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.gettotalselfmark(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
            }
        }
    }

    /**Container's getter for AprScoreVisibleVO1
     */
    public AprScoreVisibleVOImpl getAprScoreVisibleVO1() {
        return (AprScoreVisibleVOImpl)findViewObject("AprScoreVisibleVO1");
    }


    /* 获取当前人员在审批流中的顺序号
     * 返回: 成功 1,2,3,4
     *      失败 0
     * */

    public Integer GetApprSeqOrderNo(Integer appraisalId) {
        Integer result = 0;

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.GET_APPR_SEQNO(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.INTEGER);
            cs.executeUpdate();
            result = cs.getInt(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }


    /**Container's getter for BehaviourListVO1
     */
    public BehaviourListVOImpl getBehaviourListVO1() {
        return (BehaviourListVOImpl)findViewObject("BehaviourListVO1");
    }

    /**Container's getter for AddListVO1
     */
    public AddListVOImpl getAddListVO1() {
        return (AddListVOImpl)findViewObject("AddListVO1");
    }

    /**Container's getter for SubListVO1
     */
    public SubListVOImpl getSubListVO1() {
        return (SubListVOImpl)findViewObject("SubListVO1");
    }

    /* 判断经理自助，绩效合同审批页面，数据有效性
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkManagerReviewSet(Integer iAprID) {
        String strRtn = this.checkManagerReviewManual(iAprID);

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewBehaviour(iAprID);
        }

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewAdd(iAprID);
        }

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewSub(iAprID);
        }

        if ("s".equals(strRtn)) { //验证通过，删除全部为空的加、减分项和行为规范
            this.DelteManagerReviewBehaviourEmpty();
            this.DelteManagerReviewAddEmpty();
            this.DelteManagerReviewSubEmpty();
            this.restoreManagerReviewBehaviour();
            this.restoreManagerReviewAdd();
            this.restoreManagerReviewSub();
        }
        return strRtn;
    }

    /* 检查手动打分是否有效，第一级审批人必须打分，后面的可以拷贝前面的分数
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewManual(Integer iAprID) {
        Integer aprseq = this.GetApprSeqOrderNo(iAprID); //审批顺序号

        String strRtn = "s";
        AprSourceManualVOImpl manaualvo = this.getAprSourceManualVO1();
        int rowCount = manaualvo.getRowCount();
        RowSetIterator deptPersonIter = 
            manaualvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strScoreValue) && aprseq == 1) {
                strRtn = "手工评分指标得分不能为空！";
                break;
            } else if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "手工评分指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "手工评分指标得分为0至100之间的整数或小数！";
                    break;
                }
            }
        }
        deptPersonIter.closeRowSetIterator();
        return strRtn;
    }

    /* 检查行为规范是否有效，分数不能为空
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewBehaviour(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        BehaviourListVOImpl behavvo = this.getBehaviourListVO1();
        int rowCount = behavvo.getRowCount();
        RowSetIterator deptPersonIter = 
            behavvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");

            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证            
            if ("".equals(strKpiId)) {
                strRtn = "行为规范考核指标不能为空！";
                break;
            }

            if ("".equals(strScoreValue)) {
                strRtn = "行为规范考核指标得分不能为空！";
                break;
            } else if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "行为规范考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "行为规范考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();

        Float classWeight = this.GetApprClassWeight(iAprID, "BEHAVIOUR");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "行为规范考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

    /* 检查加分项是否有效，分数不能为空
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewAdd(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        AddListVOImpl addvo = this.getAddListVO1();
        int rowCount = addvo.getRowCount();
        RowSetIterator deptPersonIter = 
            addvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证
            if ("".equals(strKpiId)) {
                strRtn = "加分项考核指标不能为空！";
                break;
            }

            if ("".equals(strScoreValue)) {
                strRtn = "加分项考核指标得分不能为空！";
                break;
            } else if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "加分项考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "加分项考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();
        Float classWeight = this.GetApprClassWeight(iAprID, "ADD");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "加分项考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

    /* 检查减分项是否有效，分数不能为空
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewSub(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        SubListVOImpl subvo = this.getSubListVO1();
        int rowCount = subvo.getRowCount();
        RowSetIterator deptPersonIter = 
            subvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证
            if ("".equals(strKpiId)) {
                strRtn = "减分项考核指标不能为空！";
                break;
            }

            if ("".equals(strScoreValue)) {
                strRtn = "减分项考核指标得分不能为空！";
                break;
            } else if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "减分项考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "减分项考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();
        Float classWeight = this.GetApprClassWeight(iAprID, "SUBTRACT");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "减分项考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

    /* 经理自助，绩效评分页面，删除数据全部为空的记录 */

    private void DelteManagerReviewBehaviourEmpty() {
        BehaviourListVOImpl behavvo = this.getBehaviourListVO1();
        int rowCount = behavvo.getRowCount();
        Object obj[] = new Object[rowCount];
        int emptyCount = 0;
        RowSetIterator deptPersonIter = 
            behavvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue)) {
                obj[emptyCount] = this.getRowAttribute(pRow, "ContractId");
                emptyCount = emptyCount + 1;
            }
        }
        deptPersonIter.closeRowSetIterator();

        if (emptyCount == 0)
            return;

        for (int i = 0; i < emptyCount; i++) {
            String strCrt = String.valueOf(obj[i]);
            Object ob[] = new Object[1];
            ob[0] = strCrt;
            Key key = new Key(ob);
            Row row = behavvo.getRow(key);
            if (row != null) {
                row.remove();
            }
        }
    }

    /* 经理自助，绩效评分页面，删除数据全部为空的记录 */

    private void DelteManagerReviewAddEmpty() {
        AddListVOImpl addvo = this.getAddListVO1();
        int rowCount = addvo.getRowCount();
        Object obj[] = new Object[rowCount];
        int emptyCount = 0;
        RowSetIterator deptPersonIter = 
            addvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue)) {
                obj[emptyCount] = this.getRowAttribute(pRow, "ContractId");
                emptyCount = emptyCount + 1;
            }
        }
        deptPersonIter.closeRowSetIterator();

        if (emptyCount == 0)
            return;

        for (int i = 0; i < emptyCount; i++) {
            String strCrt = String.valueOf(obj[i]);
            Object ob[] = new Object[1];
            ob[0] = strCrt;
            Key key = new Key(ob);
            Row row = addvo.getRow(key);
            if (row != null) {
                row.remove();
            }
        }
    }

    /* 经理自助，绩效评分页面，删除数据全部为空的记录 */

    private void DelteManagerReviewSubEmpty() {
        SubListVOImpl subvo = this.getSubListVO1();
        int rowCount = subvo.getRowCount();
        Object obj[] = new Object[rowCount];
        int emptyCount = 0;
        RowSetIterator deptPersonIter = 
            subvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue)) {
                obj[emptyCount] = this.getRowAttribute(pRow, "ContractId");
                emptyCount = emptyCount + 1;
            }
        }
        deptPersonIter.closeRowSetIterator();

        if (emptyCount == 0)
            return;

        for (int i = 0; i < emptyCount; i++) {
            String strCrt = String.valueOf(obj[i]);
            Object ob[] = new Object[1];
            ob[0] = strCrt;
            Key key = new Key(ob);
            Row row = subvo.getRow(key);
            if (row != null) {
                row.remove();
            }
        }
    }

    /* 绩效合同评分阶段，在审批过程中，保存每级考核的中间分数，并计算最终分数
     * 返回 's',执行成功，否则执行错误，需查看日志
     */

    public String CalRemarkInApprProcess(Integer appraisalId) {
        String result = "s";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.CAL_REMARK_IN_APPR_PROCESS(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
            result = e.toString();
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                    result = sqlEx.toString();
                }
        }
        return result;
    }

    /* 获取加、减分项、行为规范类，最多能打的分数
     * strKpiClass : SUBTRACT; ADD; BEHAVIOUR
     * 返回: 成功 分数
     *      失败 0
     *      select to_number(t.weight) from cux.cux_contract_class_t t where T.Kpi_Class = '' and T.APPRAISAL_ID =
     * */

    private Float GetApprClassWeight(Integer appraisalId, String strKpiClass) {
        Float result = 0f;
        String SQL = 
            "select to_number(t.weight) from cux.cux_contract_class_t t " + 
            " where t.appraisal_id  = " + String.valueOf(appraisalId) + 
            " and t.Kpi_Class = '" + strKpiClass + "'";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(SQL, 1);
        try {
            ResultSet rs = cs.executeQuery(SQL);
            if (rs.next()) {
                result = rs.getFloat(1);
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /* 更新手动打分记录，第一级审批人必须打分，后面的审批人可以拷贝前面的分数
     * */

    public void updateManagerReviewManual(Integer iAprID) {
        Integer aprNo = this.GetApprSeqOrderNo(iAprID); //审批顺序号                
        if (aprNo == 1)
            return; //第一个审批人，必须打分

        AprSourceManualVOImpl manaualvo = this.getAprSourceManualVO1();
        int rowCount = manaualvo.getRowCount();
        RowSetIterator deptPersonIter = 
            manaualvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if (!"".equals(strScoreValue))
                continue;
            String AprScoreValue1 = 
                this.getRowAttribute(pRow, "AprScoreValue1");
            String AprScoreValue2 = 
                this.getRowAttribute(pRow, "AprScoreValue2");
            String AprScoreValue3 = 
                this.getRowAttribute(pRow, "AprScoreValue3");

            Float fScoreValue = 0f;
            Float fScoreValue1 = 0f;
            Float fScoreValue2 = 0f;
            Float fScoreValue3 = 0f;
            if (this.isFloat(AprScoreValue1))
                fScoreValue1 = Float.parseFloat(AprScoreValue1);
            if (this.isFloat(AprScoreValue2))
                fScoreValue2 = Float.parseFloat(AprScoreValue2);
            if (this.isFloat(AprScoreValue3))
                fScoreValue3 = Float.parseFloat(AprScoreValue3);

            if (aprNo == 4) {
                if (fScoreValue3 > 0f)
                    fScoreValue = fScoreValue3;
                else if (fScoreValue2 > 0f)
                    fScoreValue = fScoreValue2;
                else if (fScoreValue1 > 0f)
                    fScoreValue = fScoreValue1;
            } else if (aprNo == 3) {
                if (fScoreValue2 > 0f)
                    fScoreValue = fScoreValue2;
                else if (fScoreValue1 > 0f)
                    fScoreValue = fScoreValue1;
            } else if (aprNo == 2) {
                if (fScoreValue1 > 0f)
                    fScoreValue = fScoreValue1;
            }

            if (fScoreValue > 0f)
                pRow.setAttribute("ScoreValue", fScoreValue);

        }
        deptPersonIter.closeRowSetIterator();

    }

    /**Container's getter for AprFinishDetailVO1
     */
    public AprFinishDetailVOImpl getAprFinishDetailVO1() {
        return (AprFinishDetailVOImpl)findViewObject("AprFinishDetailVO1");
    }

    /**
     * 
     * @param arg1
     * @param arg2
     * @return ArrayList
     * v0.1 query two times, once for metadata,twice for data
     */
    public ArrayList dynamicVO(String arg1, String arg2) {
        OADBTransactionImpl oadbtransactionimpl = 
            (OADBTransactionImpl)getOADBTransaction();
        PreparedStatement preparedstatement = null;
        ResultSet resultset = null;
        ResultSetMetaData rsmd = null;
        ArrayList list = null;
        String sqlStr = this.getSQL(arg1, arg2, oadbtransactionimpl);

        if (sqlStr == null) // null return;
            return null;
        try {
            //System.out.println(sqlStr);
            preparedstatement = 
                    oadbtransactionimpl.createPreparedStatement(sqlStr, 1);
            resultset = preparedstatement.executeQuery();
            if (resultset != null) {
                rsmd = resultset.getMetaData();
                //create view object
                OAViewDef viewDef = oadbtransactionimpl.createViewDef();
                viewDef.setSql(sqlStr);
                viewDef.setExpertMode(true);
                viewDef.setViewObjectClass("oracle.apps.fnd.framework.server.OAViewObjectImpl");
                viewDef.setViewRowClass("oracle.apps.fnd.framework.server.OAViewRowImpl");
                //insert view object attribute
                list = new ArrayList(); // return to UI,for column label
                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    viewDef.addSqlDerivedAttrDef(rsmd.getColumnLabel(i), 
                                                 rsmd.getColumnLabel(i), 
                                                 "java.lang.String", 
                                                 Types.VARCHAR, true, true, 
                                                 AttributeDef.READONLY);
                    list.add(rsmd.getColumnLabel(i));
                }
                //insert end;
                OAViewObject vo = 
                    (OAViewObject)findViewObject("RefObjectLovVO");
                if (vo != null) {
                    vo.remove();
                }
                OAViewObject vo1 = 
                    (OAViewObject)createViewObject("RefObjectLovVO", viewDef);
                vo1.setMaxFetchSize(-1);
                vo1.executeQuery();
            }
        } catch (Exception e) {
            throw OAException.wrapperException(e);
        } finally {
            try {
                if (preparedstatement != null) {
                    preparedstatement.close();
                }
                return list;
            } catch (Exception e) {
                throw OAException.wrapperException(e);
            }
        }
    }

    private String getSQL(String arg1, String arg2, OADBTransactionImpl odbt) {
        String sqlStr = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultset = null;
        try {
            preparedStatement = 
                    odbt.createPreparedStatement("select cux_jxkh_common_pkg.get_kpi_report_sql(?,?) from dual ", 
                                                 1);

            preparedStatement.setString(1, arg1);
            preparedStatement.setString(2, arg2);

            resultset = preparedStatement.executeQuery();
            if (resultset != null && resultset.next()) {
                sqlStr = resultset.getString(1);
            }
        } catch (Exception e) {
            throw OAException.wrapperException(e);

        } finally {
            try {
                if (preparedStatement != null) {

                    preparedStatement.close();
                }
                return sqlStr;
            } catch (Exception e) {
                throw OAException.wrapperException(e);
            }
        }
    }


    /* 判断经理自助，绩效合同审批页面，批量提交，数据有效性
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkManagerReviewBatchApprove() {
        String strRtn = "s";

        AprManagerListVOImpl vo = this.getAprManagerListVO1();
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator selectIter = vo.createRowSetIterator("selectIter");
        selectIter.setRangeStart(0);
        selectIter.setRangeSize(fetchedRowCount);
        for (int i = 0; i < fetchedRowCount; i++) {
            Row pRow = selectIter.getRowAtRangeIndex(0);
            String selectFlag = this.getRowAttribute(pRow, "SelectFlag");
            if (!"Y".equals(selectFlag))
                continue;
            String appraisalId = this.getRowAttribute(pRow, "AppraisalId");
            if (!this.isInteger(appraisalId))
                continue;
            String PhaseId = this.getRowAttribute(pRow, "PhaseId");
            if (!"REVIEW".equals(PhaseId))
                continue;

            Integer iAprID = Integer.valueOf(appraisalId);
            Integer aprNo = this.GetApprSeqOrderNo(iAprID); //审批顺序号            
            if (aprNo > 1)
                continue; //后面的审批人不用检查

            Integer unfinished = this.GetManagerReviewManualUnfinished(iAprID);
            String EmpName = this.getRowAttribute(pRow, "EmpName");
            if (unfinished > 0) {
                strRtn = EmpName + " 的手工评分指标得分不能为空，请选择该员工的绩效合同在得分处进行评分！";
                break;
            }
        }
        selectIter.closeRowSetIterator();
        return strRtn;
    }

    /* 绩效平方，审批人在批量提交时，验证手动打分是否已经都填了
     * 返回: 分数没有填的记录数
     * */

    private Integer GetManagerReviewManualUnfinished(Integer appraisalId) {
        Integer result = 0;
        String SQL = 
            "SELECT COUNT(*) " + "FROM CUX_CONTRACT_T CCT " + "WHERE CCT.Appraisal_Id = " + 
            String.valueOf(appraisalId) + 
            "  and (    ( CCT.Kpi_Data_Source = '-2' AND CCT.Kpi_Class = 'KPI')  " + 
            "       OR  CCT.Kpi_Class = 'TASK')  " + 
            "  and CCT.SCORE_VALUE is null";
        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = transaction.createCallableStatement(SQL, 1);
        try {
            ResultSet rs = cs.executeQuery(SQL);
            if (rs.next()) {
                result = rs.getInt(1);
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                }
        }

        return result;
    }

    /* 绩效合同评分阶段，批量审批过程中，保存考核的中间分数，并计算最终分数
     * 返回 's',执行成功，否则执行错误，需查看日志
     */

    public String CalRemarkInBatchAppr(Integer appraisalId) {
        String result = "s";

        OADBTransaction transaction = getOADBTransaction();
        CallableStatement cs = 
            transaction.createCallableStatement("call cux_jxkh_workflow_pkg.CAL_REMARK_IN_BATCHAPPR(?,?)", 
                                                1);
        try {
            cs.setInt(1, appraisalId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            result = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
            result = e.toString();
        } finally {
            if (cs != null)
                try {
                    cs.close();
                } catch (Exception sqlEx) {
                    System.out.println(sqlEx.toString());
                    result = sqlEx.toString();
                }
        }
        return result;
    }

    /* 判断经理自助，绩效合同审批页面，数据有效性，只是保存，允许数据为空
     *
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    public String checkManagerReviewSetEmpty(Integer iAprID) {
        String strRtn = this.checkManagerReviewManualEmpty(iAprID);

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewBehaviourEmpty(iAprID);
        }

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewAddEmpty(iAprID);
        }

        if ("s".equals(strRtn)) {
            strRtn = this.checkManagerReviewSubEmpty(iAprID);
        }

        if ("s".equals(strRtn)) { //验证通过，删除全部为空的加、减分项和行为规范
            this.DelteManagerReviewBehaviourEmpty();
            this.DelteManagerReviewAddEmpty();
            this.DelteManagerReviewSubEmpty();
            this.restoreManagerReviewBehaviour();
            this.restoreManagerReviewAdd();
            this.restoreManagerReviewSub();
        }
        return strRtn;
    }

    /* 检查手动打分是否有效
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewManualEmpty(Integer iAprID) {
        String strRtn = "s";
        AprSourceManualVOImpl manaualvo = this.getAprSourceManualVO1();
        int rowCount = manaualvo.getRowCount();
        RowSetIterator deptPersonIter = 
            manaualvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "手工评分指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f < 0 || f > 100) {
                    strRtn = "手工评分指标得分为0至100之间的整数或小数！";
                    break;
                }
            }
        }
        deptPersonIter.closeRowSetIterator();
        return strRtn;
    }

    /* 检查行为规范是否有效，允许为空
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewBehaviourEmpty(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        BehaviourListVOImpl behavvo = this.getBehaviourListVO1();
        int rowCount = behavvo.getRowCount();
        RowSetIterator deptPersonIter = 
            behavvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");

            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证            
            if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "行为规范考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "行为规范考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();

        Float classWeight = this.GetApprClassWeight(iAprID, "BEHAVIOUR");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "行为规范考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

    /* 检查加分项是否有效
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewAddEmpty(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        AddListVOImpl addvo = this.getAddListVO1();
        int rowCount = addvo.getRowCount();
        RowSetIterator deptPersonIter = 
            addvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证
            if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "加分项考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "加分项考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();
        Float classWeight = this.GetApprClassWeight(iAprID, "ADD");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "加分项考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

    /* 检查减分项是否有效，分数不能为空
     * return 's', 数据合法
     *        其他, 显示错误信息
     * */

    private String checkManagerReviewSubEmpty(Integer iAprID) {
        String strRtn = "s";
        Float score = 0f;
        SubListVOImpl subvo = this.getSubListVO1();
        int rowCount = subvo.getRowCount();
        RowSetIterator deptPersonIter = 
            subvo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String strKpiId = this.getRowAttribute(pRow, "KpiId");
            String strScoreValue = this.getRowAttribute(pRow, "ScoreValue");
            if ("".equals(strKpiId) && "".equals(strScoreValue))
                continue; //如果都为空，则不进行验证
            if (!"".equals(strScoreValue)) {
                if (!this.isFloat(strScoreValue)) {
                    strRtn = "减分项考核指标得分为0至100之间的整数或小数！";
                    break;
                }
                Float f = Float.parseFloat(strScoreValue);
                if (f <= 0 || f > 100) {
                    strRtn = "减分项考核得分为0至100之间的整数或小数！";
                    break;
                }
                score += f;
            }
        }
        deptPersonIter.closeRowSetIterator();
        Float classWeight = this.GetApprClassWeight(iAprID, "SUBTRACT");
        if (score > classWeight && !"".equals(strRtn))
            strRtn = "减分项考核得分总和不能超过" + String.valueOf(classWeight);
        return strRtn;
    }

}


