package cux.oracle.apps.per.bonus.project.server;

import cux.oracle.apps.per.bonus.advanceawards.server.AdvAwardsDeptPersonVOImpl;
import cux.oracle.apps.per.bonus.advanceawards.server.BonusItem;

import cux.oracle.apps.per.bonus.pay.server.OtherPersonDisVOImpl;

import java.io.Reader;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Types;

import java.util.ArrayList;

import cux.oracle.apps.per.aprprocess.comm.DoubleProcess;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public ProjectAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.bonus.project.server", 
                                             "ProjectAMLocal");
    }


    /**Container's getter for ProjectListVO1
     */
    public ProjectListVOImpl getProjectListVO1() {
        return (ProjectListVOImpl)findViewObject("ProjectListVO1");
    }

    /*
     * 获取当前登陆人员的person_id(人力资源表)
     * */

    public int getLoginPersonId() {
        int personId = 0;
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.GET_LOGIN_PERSON_ID(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.INTEGER);
            cs.executeQuery();
            retcode = cs.getString(1);
            personId = cs.getInt(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode))
            return personId;
        else
            return 0;
    }

    /*
     * 获取当前项目经理的person_id(人力资源表), 工号,姓名,组织
     * */

    public ArrayList getManagerInfo(int iPrjID) {
        ArrayList list = new ArrayList();
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.GET_MANAGER_INFO(?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iPrjID);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.INTEGER);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.INTEGER);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.executeQuery();

            retcode = cs.getString(2);
            list.add(cs.getInt(3));
            list.add(cs.getString(4));
            list.add(cs.getString(5));
            list.add(cs.getInt(6));
            list.add(cs.getString(7));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode))
            return list;
        else
            return new ArrayList();
    }

    /* 获取项目预算信息
     * */

    public PrjBudgetItem getBudgetInfo(Integer iPrjID) {
        double Budget = 0;
        double IssueBudget = 0;
        double ReleaseTotal = 0;
        double IssueTotal = 0;

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.GET_PRJ_BUDGET(?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iPrjID);
            cs.registerOutParameter(2, Types.DOUBLE);
            cs.registerOutParameter(3, Types.DOUBLE);
            cs.registerOutParameter(4, Types.DOUBLE);
            cs.registerOutParameter(5, Types.DOUBLE);
            cs.executeUpdate();
            Budget = cs.getDouble(2);
            IssueBudget = cs.getDouble(3);
            ReleaseTotal = cs.getDouble(4);
            IssueTotal = cs.getDouble(5);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        PrjBudgetItem item = new PrjBudgetItem();
        item.Budget = Budget;
        item.IssueBudget = IssueBudget;
        item.ReleaseTotal = ReleaseTotal;
        item.IssueTotal = IssueTotal;
        return item;
    }

    /**Container's getter for PrjBonusLotVO1
     */
    public PrjBonusLotVOImpl getPrjBonusLotVO1() {
        return (PrjBonusLotVOImpl)findViewObject("PrjBonusLotVO1");
    }

    /**Container's getter for PrjBonusDisVO1
     */
    public PrjBonusDisVOImpl getPrjBonusDisVO1() {
        return (PrjBonusDisVOImpl)findViewObject("PrjBonusDisVO1");
    }

    /**Container's getter for PrjBonusLotToDisVL1
     */
    public ViewLinkImpl getPrjBonusLotToDisVL1() {
        return (ViewLinkImpl)findViewLink("PrjBonusLotToDisVL1");
    }

    /*初始化项目经理发放页面查询
     * */

    public void initQuery(int iPrjID) {
        PrjBonusLotVOImpl vo1 = getPrjBonusLotVO1();
        vo1.initQuery(iPrjID);

        PrjBonusDisVOImpl vo3 = this.getPrjBonusDisVO1();
        vo3.executeQuery();

        ArrayList list = this.GetPrjManagerUserID(iPrjID);
        if (list.size() == 2) {
            int iManager = Integer.valueOf(list.get(0).toString());
            int iSupervisorId = Integer.valueOf(list.get(1).toString());
            int iUserId = this.getLoginPersonId();

            PrjDistributionVOImpl vo2 = this.getPrjDistributionVO1();
            vo2.initQuery(iPrjID, iManager, iSupervisorId, iUserId);
        }
    }

    /*初始化项目经理发放页面查询
     * */

    public void initQuery1(int iPrjID) {
        PrjBonusLotVOImpl vo1 = getPrjBonusLotVO1();
        vo1.initQuery(iPrjID);
    }

    /* 数据保存后刷新发放页面
     * */

    public void initQuery2(int iPrjID) {
        ArrayList list = this.GetPrjManagerUserID(iPrjID);
        if (list.size() == 2) {
            int iManager = Integer.valueOf(list.get(0).toString());
            int iSupervisorId = Integer.valueOf(list.get(1).toString());
            int iUserId = this.getLoginPersonId();

            PrjDistributionVOImpl vo2 = this.getPrjDistributionVO1();
            vo2.initQuery(iPrjID, iManager, iSupervisorId, iUserId);
        }
    }

    /*初始化项目经理发放页面查询
     * */

    public void initQueryWorkFlowWeb(int iPrjID, String strGuid) {
        PrjBonusLotVOImpl vo1 = getPrjBonusLotVO1();
        vo1.initQuery(iPrjID);

        PrjWorkFlowDisVOImpl vo2 = this.getPrjWorkFlowDisVO1();
        vo2.initQuery(strGuid);
    }

    /*初始化项目经理发放页面查询
     * */

    public void initExportQuery(int iPrjID) {
        PrjDisExportVOImpl voExport = this.getPrjDisExportVO1();
        voExport.initQuery(iPrjID);
    }

    /* 初始化项目管理奖 发放通知详细页面
     * */

    public void initNtfOrgDisQuery(String strMonth, Integer iOrgID) {
        PrjNtfOrgDisVOImpl vo = this.getPrjNtfOrgDisVO1();
        vo.initQuery(strMonth, iOrgID);

        PrjNtfGroupOrgVOImpl vo1 = this.getPrjNtfGroupOrgVO1();
        vo1.initQuery(strMonth, iOrgID);
    }

    /**Container's getter for PrjDistributionVO1
     */
    public PrjDistributionVOImpl getPrjDistributionVO1() {
        return (PrjDistributionVOImpl)findViewObject("PrjDistributionVO1");
    }

    /**Container's getter for PrjPersonLovVO1
     */
    public PrjPersonLovVOImpl getPrjPersonLovVO1() {
        return (PrjPersonLovVOImpl)findViewObject("PrjPersonLovVO1");
    }

    /* 判断奖金发放页面数据正确性
     * return 0, 数据正确
     *        1, 没有数据行需要保存
     *        2, 本次奖金发放金额超过可发放总额
     * */

    public int checkDistData(int iPrjID) {
        PrjDistributionVOImpl vo = this.getPrjDistributionVO1();
        int rowCount = vo.getRowCount();
        int iNeedSaveCount = 0; // 需要保存的记录数
        double dIssue = 0.0; // 发放金额
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String ReadOnlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(ReadOnlyFlag))
                continue; //跳过只读行            
            ++iNeedSaveCount; // 需要保存的记录数 + 1

            Double newPerAmount = 0.0;
            String strAmount = 
                this.getRowAttribute(pRow, "DistributionAmount");
            if (!strAmount.equals("")) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(strAmount), 2, 
                                            BigDecimal.ROUND_HALF_UP);
            }
            dIssue = dIssue + newPerAmount;
        }
        deptPersonIter.closeRowSetIterator();

        if (iNeedSaveCount == 0)
            return 1;

        PrjBudgetItem item = this.getBudgetInfo(iPrjID);
        if (dIssue > item.IssueTotal)
            return 2;

        return 0;
    }

    /* 保存分配记录 */

    public String saveDeptPersonDist(int iPrjID) {
        PrjDistributionVOImpl vo = this.getPrjDistributionVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String ReadOnlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(ReadOnlyFlag))
                continue; //跳过只读行                       
            Double newPerAmount = 0.0;
            String strAmount = 
                this.getRowAttribute(pRow, "DistributionAmount");
            if (!"".equals(strAmount)) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(strAmount), 2, 
                                            BigDecimal.ROUND_HALF_UP);
            }

            String strPersonId = this.getRowAttribute(pRow, "PersonId");
            String strEmpNO = this.getRowAttribute(pRow, "EmpNo");
            String strEmpName = this.getRowAttribute(pRow, "EmpName");
            String strOrgId = this.getRowAttribute(pRow, "OrgId");
            String strOrgName = this.getRowAttribute(pRow, "OrgName");
            String strNote = this.getRowAttribute(pRow, "Note");
            String strPrjDisId = 
                this.getRowAttribute(pRow, "ProjectDistributionId");
            Integer iPersonId = Integer.valueOf(strPersonId);
            Integer iOrgId = Integer.valueOf(strOrgId);
            String strRtn = "";
            if ("".equals(strPrjDisId)) { // 新增记录
                strRtn = 
                        this.insertPerData(iPrjID, iPersonId, strEmpNO, strEmpName, 
                                           iOrgId, strOrgName, newPerAmount, 
                                           strNote);
            } else { //更新记录
                Integer iDisId = Integer.valueOf(strPrjDisId);
                strRtn = 
                        this.updatePerData(iDisId, iPersonId, strEmpNO, strEmpName, 
                                           iOrgId, strOrgName, newPerAmount, 
                                           strNote);
            }

            if (!"success".equals(strRtn)) {
                deptPersonIter.closeRowSetIterator();
                return strRtn;
            }
        }

        deptPersonIter.closeRowSetIterator();
        return "success";
    }

    /* 根据错误代码返回错误提示
     * */

    public String getDistWarningMessage(int iCode) {
        switch (iCode) {
        case 1:
            return "没有数据行需要保存";
        case 2:
            return "本次奖金发放金额超过可发放总额";
        }
        return "";
    }

    /* 插入一条分配记录
     * */

    private String insertPerData(int iPrjId, int iPersonId, String strEmpNO, 
                                 String strEmpName, int iOrgId, 
                                 String strOrgName, Double dDisAmount, 
                                 String strNote) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.INSERT_PRJ_DISTRIBUTION(?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPrjId);
            cs.setInt(3, iPersonId);
            cs.setString(4, strEmpNO);
            cs.setString(5, strEmpName);
            cs.setInt(6, iOrgId);
            cs.setString(7, strOrgName);
            cs.setDouble(8, dDisAmount);
            cs.setString(9, strNote);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 插入一条分配记录
     * */

    private String updatePerData(int iPrjDistId, int iPersonId, 
                                 String strEmpNO, String strEmpName, 
                                 int iOrgId, String strOrgName, 
                                 Double dDisAmount, String strNote) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.UPDATE_PRJ_DISTRIBUTION(?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPrjDistId);
            cs.setInt(3, iPersonId);
            cs.setString(4, strEmpNO);
            cs.setString(5, strEmpName);
            cs.setInt(6, iOrgId);
            cs.setString(7, strOrgName);
            cs.setDouble(8, dDisAmount);
            cs.setString(9, strNote);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    private String getRowAttribute(Row pRow, String strAttrName) {
        if (pRow.getAttribute(strAttrName) != null) {
            return pRow.getAttribute(strAttrName).toString();
        } else
            return "";
    }

    /* 删除一条发放记录 */

    public String DeleteDistribution(String strPrjDisID, String strEmpNo, 
                                     String strOrgName, String strDisAmount) {
        PrjDistributionVOImpl vo = this.getPrjDistributionVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String readonlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(readonlyFlag))
                continue; //跳过只读行             
            String Amount = this.getRowAttribute(pRow, "DistributionAmount");
            String EmpNO = this.getRowAttribute(pRow, "EmpNo");
            String OrgName = this.getRowAttribute(pRow, "OrgName");
            String PrjDisID = 
                this.getRowAttribute(pRow, "ProjectDistributionId");

            if (PrjDisID.equals(strPrjDisID) && EmpNO.equals(strEmpNo) && 
                OrgName.equals(strOrgName) && Amount.equals(strDisAmount)) {
                pRow.remove();
                getTransaction().commit();
                break;
            }
        }
        deptPersonIter.closeRowSetIterator();

        String strRtn = "success";
        if (!"".equals(strPrjDisID)) { //数据库删除记录
            Integer iPrjDistId = Integer.valueOf(strPrjDisID);
            strRtn = this.DelteDisData(iPrjDistId);
        }
        return strRtn;
    }

    /* 插入一条分配记录
     * */

    private String DelteDisData(int iPrjDistId) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.DELETE_PRJ_DISTRIBUTION(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPrjDistId);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 提交分配记录 */

    public String SubmitDistData(int iPrjID) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.SUBMIT_PRJ_DISTRIBUTION(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPrjID);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 获取项目经理和主管领导userid */

    public ArrayList GetPrjManagerUserID(int iPrjID) {
        ArrayList List = new ArrayList();

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.GET_PRJ_MANAGER_ID(?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iPrjID);
            cs.registerOutParameter(2, Types.INTEGER);
            cs.registerOutParameter(3, Types.INTEGER);
            cs.executeUpdate();
            List.add(cs.getInt(2));
            List.add(cs.getInt(3));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return List;
    }

    /* 获取当前部长所对应的ORGID和NAME, 如果当前人员不是部长则,ORGID=0 */

    public ArrayList GetCurrentDeptInfo() {
        ArrayList List = new ArrayList();

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.GET_LOGIN_PERSON_INFO(?, ?, ?)", 
                                     1);
        String retcode = "";
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.INTEGER);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(1);
            List.add(cs.getInt(2));
            List.add(cs.getString(3));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();

        if ("success".equals(retcode))
            return List;
        else
            return new ArrayList();
    }

    /* 查询财务、采购部门项目奖总体分配 情况
     * */

    public void initDeptPrjQuery(String PrjName, String status) {
        DeptPrjListVOImpl vo = (DeptPrjListVOImpl)getDeptPrjListVO1();
        vo.initQuery(PrjName, status);
    }

    /* 查询财务、采购部门项目奖详细分配 情况
     * */

    public void initDeptPrjDistDetailQuery(int ProjectDistributionId) {
        DeptDistributionVOImpl vo = 
            (DeptDistributionVOImpl)getDeptDistributionVO1();
        vo.initQuery(ProjectDistributionId);
    }

    /* 判断 财务、采购部门项目奖发放页面数据正确性
     * return 0, 数据正确
     *        1, 没有数据行需要保存
     *        2, 本次奖金发放金额超过可发放总额
     * */

    public int checkDeptPrjDistDetailData(int ProjectDistributionId, 
                                          double TotalAmount) {
        DeptDistributionVOImpl vo = this.getDeptDistributionVO1();
        int rowCount = vo.getRowCount();
        int iNeedSaveCount = 0; // 需要保存的记录数
        double dIssue = 0.0; // 发放金额
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String ReadOnlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(ReadOnlyFlag))
                continue; //跳过只读行            
            ++iNeedSaveCount; // 需要保存的记录数 + 1

            Double newPerAmount = 0.0;
            String strAmount = this.getRowAttribute(pRow, "DistAmount");
            if (!strAmount.equals("")) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(strAmount), 2, 
                                            BigDecimal.ROUND_HALF_UP);
            }
            dIssue = dIssue + newPerAmount;
        }
        deptPersonIter.closeRowSetIterator();

        if (iNeedSaveCount == 0)
            return 1;
        if (dIssue > TotalAmount)
            return 2;

        return 0;
    }


    /* 保存 财务、采购部门项目奖发放数据 */

    public String saveDeptPrjDistDetailData(int iProjectDistributionId) {
        DeptDistributionVOImpl vo = this.getDeptDistributionVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String ReadOnlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(ReadOnlyFlag))
                continue; //跳过只读行                       
            Double newPerAmount = 0.0;
            String strAmount = this.getRowAttribute(pRow, "DistAmount");
            newPerAmount = 
                    DoubleProcess.round(Double.parseDouble(strAmount), 2, 
                                        BigDecimal.ROUND_HALF_UP);

            String strPersonId = this.getRowAttribute(pRow, "PersonId");
            String strEmpNO = this.getRowAttribute(pRow, "EmpNo");
            String strEmpName = this.getRowAttribute(pRow, "EmpName");
            String strOrgId = this.getRowAttribute(pRow, "OrgId");
            String strOrgName = this.getRowAttribute(pRow, "OrgName");
            String strPersonDisId = this.getRowAttribute(pRow, "PerDistId");
            Integer iPersonId = Integer.valueOf(strPersonId);
            Integer iOrgId = Integer.valueOf(strOrgId);
            String strRtn = "";
            if ("".equals(strPersonDisId)) { // 新增记录
                strRtn = 
                        this.insertDeptPrjDistData(iProjectDistributionId, iPersonId, 
                                                   strEmpNO, strEmpName, 
                                                   iOrgId, strOrgName, 
                                                   newPerAmount);
            } else { //更新记录
                Integer iPersonDisId = Integer.valueOf(strPersonDisId);
                strRtn = 
                        this.updateDeptPrjDistData(iPersonDisId, iPersonId, strEmpNO, 
                                                   strEmpName, iOrgId, 
                                                   strOrgName, newPerAmount);
            }

            if (!"success".equals(strRtn)) {
                deptPersonIter.closeRowSetIterator();
                return strRtn;
            }
        }

        deptPersonIter.closeRowSetIterator();
        return "success";
    }


    /* 插入一条分配记录
     * 财务、采购部门项目奖发放数据
     * */

    private String insertDeptPrjDistData(int iProjectDistributionId, 
                                         int iPersonId, String strEmpNO, 
                                         String strEmpName, int iOrgId, 
                                         String strOrgName, 
                                         Double dDisAmount) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.INSERT_DEPTPRJ_DISTRIBUTION(?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iProjectDistributionId);
            cs.setInt(3, iPersonId);
            cs.setString(4, strEmpNO);
            cs.setString(5, strEmpName);
            cs.setInt(6, iOrgId);
            cs.setString(7, strOrgName);
            cs.setDouble(8, dDisAmount);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }


    /* 更新一条分配记录
     * 财务、采购部门项目奖发放数据
     * */

    private String updateDeptPrjDistData(int iPerDistId, int iPersonId, 
                                         String strEmpNO, String strEmpName, 
                                         int iOrgId, String strOrgName, 
                                         Double dDisAmount) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.UPDATE_DEPTPRJ_DISTRIBUTION(?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPerDistId);
            cs.setInt(3, iPersonId);
            cs.setString(4, strEmpNO);
            cs.setString(5, strEmpName);
            cs.setInt(6, iOrgId);
            cs.setString(7, strOrgName);
            cs.setDouble(8, dDisAmount);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 删除一条发放记录
     * 财务、采购部门项目奖发放数据
     * */

    public String DeleteDeptPrjDistData(String strPerDistId, 
                                        String strPersonId, String strOrgId, 
                                        String strDistAmount) {
        DeptDistributionVOImpl vo = this.getDeptDistributionVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String readonlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(readonlyFlag))
                continue; //跳过只读行             
            String rowPerDisId = this.getRowAttribute(pRow, "PerDistId");
            String rowPersonId = this.getRowAttribute(pRow, "PersonId");
            String rowOrgId = this.getRowAttribute(pRow, "OrgId");
            String rowDistAmount = this.getRowAttribute(pRow, "DistAmount");

            if (rowPerDisId.equals(strPerDistId) && 
                rowPersonId.equals(strPersonId) && rowOrgId.equals(strOrgId) && 
                rowDistAmount.equals(rowDistAmount)) {
                pRow.remove();
                getTransaction().commit();
                break;
            }
        }
        deptPersonIter.closeRowSetIterator();

        String strRtn = "success";
        if (!"".equals(strPerDistId)) { //数据库删除记录
            Integer iPerDistId = Integer.valueOf(strPerDistId);
            strRtn = this.DeleteDeptPrjDist(iPerDistId);
        }
        return strRtn;
    }


    /* 删除一条分配记录
     * 财务、采购部门项目奖发放数据
     * */

    private String DeleteDeptPrjDist(int iPerDistId) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.DELETE_DEPTPRJ_DISTRIBUTION(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPerDistId);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 提交整个项目的分配记录
     * 财务、采购部门项目奖发放数据
     * */

    public String SubmitDeptPrjDistData() {
        DeptDistributionVOImpl vo = this.getDeptDistributionVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String ReadOnlyFlag = this.getRowAttribute(pRow, "ReadOnlyFlag");
            if ("true".equals(ReadOnlyFlag))
                continue; //跳过只读行            
            String ApprovedStatus = 
                this.getRowAttribute(pRow, "ApprovedStatus");
            if ("已提交".equals(ApprovedStatus))
                continue;

            String strPerDisId = this.getRowAttribute(pRow, "PerDistId");
            Integer iPerDisId = Integer.valueOf(strPerDisId);
            String strRtn = this.SubmitDeptPrjDist(iPerDisId);

            if (!"success".equals(strRtn)) {
                deptPersonIter.closeRowSetIterator();
                return strRtn;
            }
        }

        deptPersonIter.closeRowSetIterator();
        return "success";
    }

    /* 提交一条分配记录
     * 财务、采购部门项目奖发放数据
     * */

    public String SubmitDeptPrjDist(int iPerDistId) {
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.SUBMIT_DEPTPRJ_DISTRIBUTION(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iPerDistId);
            cs.executeUpdate();
            retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return retcode;
    }

    /* 获取单个项目 已分配的奖金额 */

    public double GetPrjDeptDistAmount(int iProjectDistributionId) {
        String retcode = "";
        double dAmount = 0;
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.GET_DIST_AMOUNT(?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.DOUBLE);
            cs.setInt(3, iProjectDistributionId);
            cs.executeUpdate();
            retcode = cs.getString(1);
            if ("success".equals(retcode))
                dAmount = cs.getDouble(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return dAmount;
    }

    /* 根据项目id获取项目名称 */

    public String GetPrjName(int iPrjId) {
        String retcode = "";
        String strPrjName = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ_DEPT.GET_PRJ_NAME(?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.setInt(3, iPrjId);
            cs.executeUpdate();
            retcode = cs.getString(1);
            if ("success".equals(retcode))
                strPrjName = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return strPrjName;
    }

    /*
     * 获取工作流的GUID获取项目ID
     * */

    public int getPrjIDFromGUID(String strGUID) {
        String retcode = "";
        int iPrjID = 0;
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.GET_PRJ_ID(?, ?, ?)", 
                                     1);
        try {
            cs.setString(1, strGUID);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.INTEGER);
            cs.executeQuery();

            retcode = cs.getString(2);
            iPrjID = cs.getInt(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode))
            return iPrjID;
        else
            return 0;
    }

    /*
     * 获取赛迪股份董事长的person_id(人力资源表)
     * */

    public int getChairmanPersonId() {
        int personId = 0;
        String retcode = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.GET_CHAIRMAN_ID(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.INTEGER);
            cs.executeQuery();
            retcode = cs.getString(1);
            personId = cs.getInt(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode))
            return personId;
        else
            return 0;
    }

    /* 获取项目编号和项目名称 */

    public ArrayList GetPrjNameNum(int iPrjID) {
        ArrayList List = new ArrayList();

        CallableStatement cs = null;
        String retcode = "";
        String prjNum = "";
        String prjName = "";
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.GET_PRJ_NAME(?, ?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iPrjID);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(2);
            prjNum = cs.getString(3);
            prjName = cs.getString(4);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode)) {
            List.add(prjNum);
            List.add(prjName);
        }
        return List;
    }

    /* 获取用户对项目管理奖发放详细信息（劳务派遣人员）的权限 */

    public boolean IsUserValidPrjDispatch() {
        CallableStatement cs = null;
        String retcode = "";
        String flag = "";
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.CHECK_DISPATCH_WEB_USER(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(1);
            flag = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode)) {
            if ("Y".equals(flag))
                return true;
            else
                return false;
        } else
            return false;
    }

    /* 查询项目管理奖发放详细信息（劳务派遣人员）
     * */

    public void initDispatchQuery(String period) {
        PrjDispatchVOImpl vo = (PrjDispatchVOImpl)getPrjDispatchVO1();
        vo.initQuery(period);
    }

    /*
     * 获取当前项目是否在禁止发放项目管理奖名单里面
     * */

    public boolean IsPrjForbid(int iPrjID) {
        String retcode = "";
        String strFlag = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS_PRJ.IS_PRJ_FORBID(?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iPrjID);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeQuery();

            retcode = cs.getString(2);
            strFlag = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if ("success".equals(retcode)) {
            if ("Y".equals(strFlag))
                return true;
            else
                return false;
        } else
            return true;
    }

    /**Container's getter for PrjDisExportVO1
     */
    public PrjDisExportVOImpl getPrjDisExportVO1() {
        return (PrjDisExportVOImpl)findViewObject("PrjDisExportVO1");
    }

    /**Container's getter for DeptDisStatusVO1
     */
    public DeptDisStatusVOImpl getDeptDisStatusVO1() {
        return (DeptDisStatusVOImpl)findViewObject("DeptDisStatusVO1");
    }

    /**Container's getter for DeptPrjListVO1
     */
    public DeptPrjListVOImpl getDeptPrjListVO1() {
        return (DeptPrjListVOImpl)findViewObject("DeptPrjListVO1");
    }

    /**Container's getter for DeptDistributionVO1
     */
    public DeptDistributionVOImpl getDeptDistributionVO1() {
        return (DeptDistributionVOImpl)findViewObject("DeptDistributionVO1");
    }


    /**Container's getter for PrjWorkFlowDisVO1
     */
    public PrjWorkFlowDisVOImpl getPrjWorkFlowDisVO1() {
        return (PrjWorkFlowDisVOImpl)findViewObject("PrjWorkFlowDisVO1");
    }

    /**Container's getter for PrjDispatchVO1
     */
    public PrjDispatchVOImpl getPrjDispatchVO1() {
        return (PrjDispatchVOImpl)findViewObject("PrjDispatchVO1");
    }

    /**Container's getter for DeptPersonLovVO1
     */
    public DeptPersonLovVOImpl getDeptPersonLovVO1() {
        return (DeptPersonLovVOImpl)findViewObject("DeptPersonLovVO1");
    }

    /**Container's getter for PrjNtfOrgDisVO1
     */
    public PrjNtfOrgDisVOImpl getPrjNtfOrgDisVO1() {
        return (PrjNtfOrgDisVOImpl)findViewObject("PrjNtfOrgDisVO1");
    }

    /* 根据组织id获取组织名称 */

    public String GetOrgName(int iOrgId) {
        String retcode = "";
        String strOrgName = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.GET_ORG_NAME(?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iOrgId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(2);
            if ("success".equals(retcode))
                strOrgName = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return strOrgName;
    }

    /**Container's getter for PrjNtfGroupOrgVO1
     */
    public PrjNtfGroupOrgVOImpl getPrjNtfGroupOrgVO1() {
        return (PrjNtfGroupOrgVOImpl)findViewObject("PrjNtfGroupOrgVO1");
    }


    /**Container's getter for PrjNtfSuspendWarnVO1
     */
    public PrjNtfSuspendWarnVOImpl getPrjNtfSuspendWarnVO1() {
        return (PrjNtfSuspendWarnVOImpl)findViewObject("PrjNtfSuspendWarnVO1");
    }
}
