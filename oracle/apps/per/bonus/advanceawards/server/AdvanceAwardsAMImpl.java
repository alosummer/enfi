package cux.oracle.apps.per.bonus.advanceawards.server;


import cux.oracle.apps.per.bonus.specialawards.server.SpecialAwardsDeptVOImpl;
import cux.oracle.apps.per.bonus.specialawards.server.SpecialAwardsDeptVORowImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.Types;


import cux.oracle.apps.per.aprprocess.comm.DoubleProcess;

import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;


import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AdvanceAwardsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public AdvanceAwardsAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.bonus.advanceawards.server", 
                                             "AdvanceAwardsAMLocal");
    }

    /**Container's getter for AdvanceAwardsDateVO1
     */
    public AdvanceAwardsDateVOImpl getAdvanceAwardsDateVO1() {
        return (AdvanceAwardsDateVOImpl)findViewObject("AdvanceAwardsDateVO1");
    }

    /**Container's getter for AdvanceAwardsTypeVO1
     */
    public AdvanceAwardsTypeVOImpl getAdvanceAwardsTypeVO1() {
        return (AdvanceAwardsTypeVOImpl)findViewObject("AdvanceAwardsTypeVO1");
    }


    /**Container's getter for AdvAwardsOtherPerVO1
     */
    public AdvAwardsOtherPerVOImpl getAdvAwardsOtherPerVO1() {
        return (AdvAwardsOtherPerVOImpl)findViewObject("AdvAwardsOtherPerVO1");
    }

    public int saveDeptPersonDist(String distDate, String bonusType, 
                                  int deptOrgID) {
        AdvAwardsDeptPersonVOImpl vo = getAdvAwardsDeptPersonVO1();
        int rowCount = vo.getRowCount();
        int irtn = 0;
        RowSetIterator deptPersonIter = 
            vo.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行

            String personDistributionId = "";
            if (pRow.getAttribute("PersonDistributionId") != null) {
                personDistributionId = 
                        pRow.getAttribute("PersonDistributionId").toString();
            }
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }
            double personAmount = 0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            String personNote = "";
            if (pRow.getAttribute("Note") != null) {
                personNote = pRow.getAttribute("Note").toString();
            }

            int iEffectNum = 0;
            if (!"".equals(personDistributionId)) {
                if (personAmount == 0) {
                    iEffectNum = deleteDeptPerData(personDistributionId);
                } else if (personAmount > 0) {
                    iEffectNum = 
                            updatePerData(Integer.parseInt(personDistributionId), 
                                          personNumber, personName, personDept, 
                                          personAmount, personNote);
                }
            } else {
                if (personAmount > 0) {
                    iEffectNum = 
                            insertPerData(distDate, bonusType, deptOrgID, personNumber, 
                                          personName, personDept, personAmount, 
                                          personNote, "INTERNAL");
                }
            }
            irtn = irtn + iEffectNum;
        }
        return irtn;
    } //end public int saveDeptPersonDist(

    public int saveOtherPerDist(String distDate, String bonusType, 
                                int distDeptOrgID) {
        AdvAwardsOtherPerVOImpl vo = getAdvAwardsOtherPerVO1();

        int irtn = 0;
        Row[] oldRows = vo.getFilteredRows("Attribute1", "Y");
        for (int i = 0; i < oldRows.length; ++i) {
            Row pRow = oldRows[i];

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行

            Integer distId = 
                Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }
            double personAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            String personNote = "";
            if (pRow.getAttribute("Note") != null) {
                personNote = pRow.getAttribute("Note").toString();
            }
            String personStatus = "";
            if (pRow.getAttribute("DistributionStatus") != null) {
                personStatus = 
                        pRow.getAttribute("DistributionStatus").toString();
            }

            int iEffectNum = 
                updatePerData(distId, personNumber, personName, personDept, 
                              personAmount, personNote);
            irtn = irtn + iEffectNum;
        }
        Row[] newRows = vo.getFilteredRows("Attribute1", "N");
        for (int i = 0; i < newRows.length; ++i) {
            Row pRow = newRows[i];
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }
            Double personAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            String personNote = "";
            if (pRow.getAttribute("Note") != null) {
                personNote = pRow.getAttribute("Note").toString();
            }
            int iEffectNum = 
                insertPerData(distDate, bonusType, distDeptOrgID, personNumber, 
                              personName, personDept, personAmount, personNote, 
                              "EXTERNAL");
            irtn = irtn + iEffectNum;
        }
        return irtn;
    }

    public int updatePerData(int distId, String personNumber, 
                             String personName, String personDept, 
                             Double personAmount, String personNote) {
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.update_person_distribution(?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        int irtn = 0;
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, distId);
            cs.setString(3, personNumber);
            cs.setString(4, personName);
            cs.setString(5, personDept);
            cs.setDouble(6, personAmount);
            cs.setString(7, personNote);
            irtn = cs.executeUpdate();
            String retcode = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return irtn;
    }

    public int insertPerData(String distDate, String bonusType, int iDeptOrgID, 
                             String perNumber, String perName, 
                             String personDept, Double perAmount, 
                             String perNote, String dataSource) {
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();

        System.out.println("presave :" + perName + "    " + bonusType);
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.insert_person_distribution(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        int irtn = 0;
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, perNumber);
            cs.setString(3, perName);
            cs.setInt(4, iDeptOrgID);
            cs.setString(5, personDept);
            cs.setDouble(6, perAmount);
            cs.setString(7, perNote);
            cs.setString(8, distDate + "-01");
            cs.setString(9, bonusType);
            cs.setInt(10, 0);
            cs.setString(11, null);
            cs.setInt(12, 0);
            cs.setString(13, dataSource);
            irtn = cs.executeUpdate();
            String retcode = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return irtn;
    }

    /**Container's getter for AdvAwardsOtherLovVO1
     */
    public AdvAwardsOtherLovVOImpl getAdvAwardsOtherLovVO1() {
        return (AdvAwardsOtherLovVOImpl)findViewObject("AdvAwardsOtherLovVO1");
    }

    /**Container's getter for AdvAwardsPerLovVO1
     */
    public AdvAwardsPerLovVOImpl getAdvAwardsPerLovVO1() {
        return (AdvAwardsPerLovVOImpl)findViewObject("AdvAwardsPerLovVO1");
    }

    public void deleteOtherPerData(String perId, String employeeNum) {
        if (perId != null && !"".equals(perId)) {
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.delete_person_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, Integer.parseInt(perId));
                cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
            transaction.commit();
        } else if (employeeNum != null && !employeeNum.equals("")) {
            OAViewObject vo = (OAViewObject)getAdvAwardsOtherPerVO1();
            AdvAwardsOtherPerVORowImpl row = null;
            int fetchedRowCount = vo.getFetchedRowCount();
            RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
            if (fetchedRowCount > 0) {
                deleteIter.setRangeStart(0);
                deleteIter.setRangeSize(fetchedRowCount);
                for (int i = 0; i < fetchedRowCount; ++i) {
                    row = 
(AdvAwardsOtherPerVORowImpl)deleteIter.getRowAtRangeIndex(i);
                    String deleteEmpNum = "";
                    if (row.getEmployeeNumber() != null) {
                        deleteEmpNum = row.getEmployeeNumber();
                    }
                    if (deleteEmpNum.equals(employeeNum)) {
                        row.remove();
                        getTransaction().commit();
                        break;
                    }
                }
            }
            deleteIter.closeRowSetIterator();
        }
    }

    public int deleteDeptPerData(String perId) {
        int irtn = 0;
        if (perId != null && !"".equals(perId)) {
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.delete_person_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, Integer.parseInt(perId));
                irtn = cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
            transaction.commit();
        }
        return irtn;
    }

    public double getOfficeDistInfo(int deptId, String distDate, 
                                    String bonusType) {
        String temp = distDate.substring(0, 4) + distDate.substring(5, 7);
        int deptDistEnd = Integer.parseInt(temp);

        double totalBalance = 0;

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_office_advawards_statistic(?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.DOUBLE);
            cs.setInt(2, deptId);
            cs.setString(3, bonusType);
            cs.setString(4, deptDistEnd + "");
            cs.executeUpdate();
            totalBalance = cs.getDouble(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();

        return totalBalance;
    }

    public double getDistInfo(String deptName, String distDate, 
                              String bonusType, int flag) {
        String temp = distDate.substring(0, 4) + distDate.substring(5, 7);
        int deptDistStart = ((Integer.parseInt(temp) - 100) / 100) * 100 + 12;
        int deptDistEnd = Integer.parseInt(temp);
        temp = String.valueOf(deptDistStart);
        String perDistStart = 
            temp.substring(0, 4) + "-" + temp.substring(4, 6);
        String perDistEnd = distDate;

        double totalBalance = 0;
        double monthBalance = 0;
        double deptPerNum = 0;
        double otherPerNum = 0;
        double totalDist = 0;

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_advawards_statistic(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.DOUBLE);
            cs.registerOutParameter(2, Types.DOUBLE);
            cs.registerOutParameter(3, Types.DOUBLE);
            cs.registerOutParameter(4, Types.DOUBLE);
            cs.registerOutParameter(5, Types.DOUBLE);
            cs.setString(6, deptName);
            cs.setString(7, bonusType);
            cs.setInt(8, deptDistStart);
            cs.setInt(9, deptDistEnd);
            cs.setString(10, perDistStart);
            cs.setString(11, perDistEnd);
            cs.executeUpdate();
            totalBalance = cs.getDouble(1);
            monthBalance = cs.getDouble(2);
            deptPerNum = cs.getDouble(3);
            otherPerNum = cs.getDouble(4);
            totalDist = cs.getDouble(5);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        if (flag == 1) {
            return totalBalance;
        } else if (flag == 2) {
            return monthBalance;
        } else if (flag == 3) {
            return deptPerNum;
        } else if (flag == 4) {
            return otherPerNum;
        } else if (flag == 5) {
            return totalDist;
        }
        return 0;
    }

    public BonusItem getDistInfo(int deptOrgID, String distDate, 
                                 String bonusType) {
        String temp = distDate.substring(0, 4) + distDate.substring(5, 7);
        int deptDistStart = ((Integer.parseInt(temp) - 100) / 100) * 100 + 12;
        int deptDistEnd = Integer.parseInt(temp);
        temp = String.valueOf(deptDistStart);
        String perDistStart = 
            temp.substring(0, 4) + "-" + temp.substring(4, 6);
        String perDistEnd = distDate;

        double totalBalance = 0;
        double monthBalance = 0;
        double deptPerNum = 0;
        double otherPerNum = 0;
        double totalDist = 0;

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_advawards_statistic(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.DOUBLE);
            cs.registerOutParameter(2, Types.DOUBLE);
            cs.registerOutParameter(3, Types.DOUBLE);
            cs.registerOutParameter(4, Types.DOUBLE);
            cs.registerOutParameter(5, Types.DOUBLE);
            cs.setInt(6, deptOrgID);
            cs.setString(7, bonusType);
            cs.setInt(8, deptDistStart);
            cs.setInt(9, deptDistEnd);
            cs.setString(10, perDistStart);
            cs.setString(11, perDistEnd);
            cs.executeUpdate();
            totalBalance = cs.getDouble(1);
            monthBalance = cs.getDouble(2);
            deptPerNum = cs.getDouble(3);
            otherPerNum = cs.getDouble(4);
            totalDist = cs.getDouble(5);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        BonusItem item = new BonusItem();
        item.totalBalance = totalBalance;
        item.monthBalance = monthBalance;
        item.deptPerNum = deptPerNum;
        item.otherPerNum = otherPerNum;
        item.totalDist = totalDist;
        return item;
    }


    public void submitOfficeData(int deptOrgID, String distDate, 
                                 String bonusType) {

        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.submit_office_per_data_to_dept(?, ?, ?)", 
                                     1);
        try {

            cs.setString(1, bonusType);
            cs.setString(2, distDate);
            cs.setInt(3, deptOrgID);
            cs.executeUpdate();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
    }


    public int checkOfficePerData(double availAmount) {
        CuxBonusOfficePersonDistVOImpl officeVO = 
            this.getCuxBonusOfficePersonDistVO1();
        int rowCount = officeVO.getRowCount();
        double distAmount = 0;
        RowSetIterator officeIter = 
            officeVO.createRowSetIterator("officeIter");
        officeIter.setRangeStart(0);
        officeIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = officeIter.getRowAtRangeIndex(i);
            Double newPerAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount += 
                        Double.parseDouble(pRow.getAttribute("DistributionAmount").toString());
            }
        }
        if (distAmount > availAmount) {
            return 1;
        }
        return 0;
    }


    public int checkOfficeData(double availAmount) {
        CuxBonusOfficeDistributionVOImpl officeVO = 
            this.getCuxBonusOfficeDistributionVO1();
        int rowCount = officeVO.getRowCount();
        double distAmount = 0;
        RowSetIterator officeIter = 
            officeVO.createRowSetIterator("officeIter");
        officeIter.setRangeStart(0);
        officeIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = officeIter.getRowAtRangeIndex(i);
            Double newPerAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount += 
                        Double.parseDouble(pRow.getAttribute("DistributionAmount").toString());
            }
        }
        if (distAmount > availAmount) {
            return 1;
        }
        return 0;
    }


    public int checkDistData() {
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            Double newPerAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (newPerAmount < 0) {
                return 2;
            }
        }

        AdvAwardsOtherPerVOImpl otherPerVO = getAdvAwardsOtherPerVO1();
        rowCount = otherPerVO.getRowCount();
        RowSetIterator otherPerIter = 
            otherPerVO.createRowSetIterator("otherPerIter");
        otherPerIter.setRangeStart(0);
        otherPerIter.setRangeSize(rowCount);

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = otherPerVO.getRowAtRangeIndex(i);
            String newPerNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                newPerNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String newPerName = "";
            if (pRow.getAttribute("LastName") != null) {
                newPerName = pRow.getAttribute("LastName").toString();
            }
            String newPerDept = "";
            if (pRow.getAttribute("DepName") != null) {
                newPerDept = pRow.getAttribute("DepName").toString();
            }
            if ("".equals(newPerNumber) || "".equals(newPerName) || 
                "".equals(newPerDept)) {
                return 3;
            }
            Double newPerAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (newPerAmount <= 0) {
                return 4;
            }
            int insertResult = 
                checkPersonData(newPerNumber, newPerName, newPerDept);
            if (insertResult != 0) {
                return 3;
            }
        }
        return 0;
    }

    public int checkDistDataMidMgr() {
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            Double newPerAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                newPerAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (newPerAmount < 0) {
                return 2;
            }
        }
        return 0;
    }

    public int checkPersonData(String perNumber, String perName, 
                               String perDept) {
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        int retcode = 0;
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.check_person_data(?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.setString(2, perNumber);
            cs.setString(3, perName);
            cs.setString(4, perDept);

            cs.executeUpdate();
            retcode = cs.getInt(1);
            cs.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return retcode;
    }

    /* 检查发放额度是否超过总额度 */

    public boolean checkDistAmount(double availAmount, String bonusType, 
                                   String otherBonusType) {
        OAViewObject otherPerVO = getAdvAwardsOtherPerVO1();
        OAViewObject deptPersonVO = getAdvAwardsDeptPersonVO1();
        double distAmount = 0;

        Row[] deptPersonRow = deptPersonVO.getAllRowsInRange();
        for (int i = 0; i < deptPersonRow.length; ++i) {
            Row pRow = deptPersonRow[i];

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行 

            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount += 
                        Double.parseDouble(pRow.getAttribute("DistributionAmount").toString());
            }
        }

        Row[] otherPerRow = otherPerVO.getAllRowsInRange();
        for (int j = 0; j < otherPerRow.length; ++j) {
            Row pRow = otherPerRow[j];

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行 

            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount += 
                        Double.parseDouble(pRow.getAttribute("DistributionAmount").toString());
            }
        }

        if (distAmount > availAmount)
            return false;
        return true;
    }

    public boolean checkDistAmount(double availAmount, String bonusType) {
        OAViewObject deptPersonVO = getAdvAwardsDeptPersonVO1();
        double distAmount = 0;

        Row[] deptPersonRow = deptPersonVO.getAllRowsInRange();
        for (int i = 0; i < deptPersonRow.length; ++i) {
            Row pRow = deptPersonRow[i];

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行 

            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount += 
                        Double.parseDouble(pRow.getAttribute("DistributionAmount").toString());
            }
        }

        if (distAmount > availAmount)
            return false;
        return true;
    }

    /**Container's getter for AdvAwardsSummaryVO1
     */
    public AdvAwardsSummaryVOImpl getAdvAwardsSummaryVO1() {
        return (AdvAwardsSummaryVOImpl)findViewObject("AdvAwardsSummaryVO1");
    }

    /**Container's getter for AdvAwardsDeptPerVO1
     */
    public AdvAwardsDeptPerVOImpl getAdvAwardsDeptPerVO1() {
        return (AdvAwardsDeptPerVOImpl)findViewObject("AdvAwardsDeptPerVO1");
    }

    public void initLovSQL(int deptOrgID, String distDate, 
                           String strLovWhereClause) {
        AdvAwardsOtherLovVOImpl otherLovVO = getAdvAwardsOtherLovVO1();
        otherLovVO.initSQL(deptOrgID, distDate, strLovWhereClause);
    }

    public int submitDistMidMgrData() {
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        int iMod = 0; //修改的记录数
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行

            double personAmount = 0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                String strAmount = 
                    pRow.getAttribute("DistributionAmount").toString();
                if (!strAmount.equals(""))
                    personAmount = 
                            DoubleProcess.round(Double.parseDouble(strAmount), 
                                                4, BigDecimal.ROUND_HALF_UP);
            }
            if (personAmount == 0)
                continue;

            if (pRow.getAttribute("PersonDistributionId") != null) {
                Integer distId = 
                    Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());
                CallableStatement cs = null;
                OADBTransaction transaction = this.getOADBTransaction();
                cs = 
 transaction.createCallableStatement("call cux_hr_bonus.submit_person_distribution(?)", 
                                     1);
                try {
                    cs.setInt(1, distId);
                    cs.executeUpdate();
                } catch (Exception e) {
                    System.out.println(e.toString());
                }
                transaction.commit();
                iMod++;
            }
        }
        return iMod;
    }

    public void submitDistData() {
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行

            double personAmount = 0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                String strAmount = 
                    pRow.getAttribute("DistributionAmount").toString();
                if (!strAmount.equals(""))
                    personAmount = 
                            DoubleProcess.round(Double.parseDouble(strAmount), 
                                                4, BigDecimal.ROUND_HALF_UP);
            }
            if (personAmount == 0)
                continue;

            if (pRow.getAttribute("PersonDistributionId") != null) {
                Integer distId = 
                    Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());
                CallableStatement cs = null;
                OADBTransaction transaction = this.getOADBTransaction();
                cs = 
 transaction.createCallableStatement("call cux_hr_bonus.submit_person_distribution(?)", 
                                     1);
                try {
                    cs.setInt(1, distId);
                    cs.executeUpdate();
                } catch (Exception e) {
                    System.out.println(e.toString());
                }
                transaction.commit();
            }
        }

        AdvAwardsOtherPerVOImpl otherPerVO = getAdvAwardsOtherPerVO1();
        rowCount = otherPerVO.getRowCount();
        RowSetIterator otherPerIter = 
            otherPerVO.createRowSetIterator("otherPerIter");
        otherPerIter.setRangeStart(0);
        otherPerIter.setRangeSize(rowCount);

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = otherPerVO.getRowAtRangeIndex(i);

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行            
            if (pRow.getAttribute("PersonDistributionId") == null)
                continue;
            String str = pRow.getAttribute("PersonDistributionId").toString();
            if ("".equals(str))
                continue;
            Integer distId = Integer.parseInt(str);

            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.submit_person_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, distId);
                cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
            transaction.commit();
        }
    }

    /**Container's getter for AdvAwardsOperatorVO1
     */
    public AdvAwardsOperatorVOImpl getAdvAwardsOperatorVO1() {
        return (AdvAwardsOperatorVOImpl)findViewObject("AdvAwardsOperatorVO1");
    }

    public String getLoginUserDept(int flag) {
        String deptName = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_user_dept(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, flag);
            cs.executeUpdate();
            deptName = cs.getString(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();

        return deptName;
    }

    public Double getAwardsTotal(OAViewObjectImpl vo) {
        int rowCount = vo.getRowCount();
        RowSetIterator voIter = vo.createRowSetIterator("voIter");
        voIter.setRangeStart(0);
        voIter.setRangeSize(rowCount);

        Double awardsSum = 0.0;
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = voIter.getRowAtRangeIndex(i);
            Double awards = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                awards = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
                awardsSum += awards;
            }
        }

        return awardsSum;
    }

    public int getLoginUserLevel() {
        int userLevel = 0;
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_user_level(?)", 1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.executeQuery();
            userLevel = cs.getInt(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return userLevel;
    }

    public int getLoginPersonId() {
        int personId = 0;
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.GET_LOGIN_PERSON_ID(?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.executeQuery();
            personId = cs.getInt(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return personId;
    }


    /**Container's getter for AdvAwardsDeptPersonVO1
     */
    public AdvAwardsDeptPersonVOImpl getAdvAwardsDeptPersonVO1() {
        return (AdvAwardsDeptPersonVOImpl)findViewObject("AdvAwardsDeptPersonVO1");
    }

    /**Container's getter for AdvAwardsOtherTypeVO1
     */
    public AdvAwardsOtherTypeVOImpl getAdvAwardsOtherTypeVO1() {
        return (AdvAwardsOtherTypeVOImpl)findViewObject("AdvAwardsOtherTypeVO1");
    }

    /**Container's getter for AdvAwardsSummaryOtherVO1
     */
    public AdvAwardsSummaryOtherVOImpl getAdvAwardsSummaryOtherVO1() {
        return (AdvAwardsSummaryOtherVOImpl)findViewObject("AdvAwardsSummaryOtherVO1");
    }

    public int getValidDataNum() {
        int dataCount = 0;
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        System.out.println(deptPersonVO.getQuery());
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            double distAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (distAmount > 0) {
                dataCount += 1;
            }
        }

        AdvAwardsOtherPerVOImpl otherPersonVO = getAdvAwardsOtherPerVO1();
        rowCount = otherPersonVO.getRowCount();
        dataCount += rowCount;
        return dataCount;
    }

    public int getLotID() {
        int lotID = -1;
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_next_lot_id(?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.executeUpdate();
            lotID = cs.getInt(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return lotID;
    }

    public int updateDataLotID(String bonusType, String distDate, 
                               String distDeptName, int lotID) {
        AdvAwardsDeptPersonVOImpl deptPersonVO = getAdvAwardsDeptPersonVO1();
        int rowCount = deptPersonVO.getRowCount();
        RowSetIterator deptPersonIter = 
            deptPersonVO.createRowSetIterator("deptPersonIter");
        deptPersonIter.setRangeStart(0);
        deptPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptPersonIter.getRowAtRangeIndex(i);
            double distAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                distAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (distAmount > 0) {
                int distID = 0;
                String personNumber = "";
                if (pRow.getAttribute("EmployeeNumber") != null) {
                    personNumber = 
                            pRow.getAttribute("EmployeeNumber").toString();
                }
                String personName = "";
                if (pRow.getAttribute("LastName") != null) {
                    personName = pRow.getAttribute("LastName").toString();
                }
                String personDept = "";
                if (pRow.getAttribute("DepName") != null) {
                    personDept = pRow.getAttribute("DepName").toString();
                }
                CallableStatement cs = null;
                OADBTransaction transaction = getOADBTransaction();
                cs = 
 transaction.createCallableStatement("call cux_hr_bonus.check_dept_person_data(?, ?, ?, ?, ?, ?, ?)", 
                                     1);
                try {
                    cs.registerOutParameter(1, Types.INTEGER);
                    cs.setString(2, bonusType);
                    cs.setString(3, distDate);
                    cs.setString(4, distDeptName);
                    cs.setString(5, personNumber);
                    cs.setString(6, personName);
                    cs.setString(7, personDept);
                    cs.executeUpdate();
                    distID = cs.getInt(1);
                } catch (Exception e) {
                    System.out.println(e.toString());
                }
                transaction.commit();

                CallableStatement csUpdate = null;
                OADBTransaction transactionUpdate = getOADBTransaction();
                csUpdate = 
                        transactionUpdate.createCallableStatement("call cux_hr_bonus.update_PERSON_distribution_lot(?, ?, ?)", 
                                                                  1);
                try {
                    csUpdate.registerOutParameter(1, Types.VARCHAR);
                    csUpdate.setInt(2, distID);
                    csUpdate.setInt(3, lotID);
                    csUpdate.executeUpdate();
                    String retcode = csUpdate.getString(1);
                    if ("success".equals(retcode)) {
                        transactionUpdate.commit();
                    }
                } catch (Exception e) {
                    System.out.println(e.toString());
                    return -1;
                }
            }
        }

        AdvAwardsOtherPerVOImpl otherPersonVO = getAdvAwardsOtherPerVO1();
        rowCount = otherPersonVO.getRowCount();
        RowSetIterator otherPersonIter = 
            otherPersonVO.createRowSetIterator("otherPersonIter");
        otherPersonIter.setRangeStart(0);
        otherPersonIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = otherPersonIter.getRowAtRangeIndex(i);
            Integer distId = 
                Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());

            CallableStatement cs = null;
            OADBTransaction transaction = getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.update_person_distribution_lot(?,?, ?)", 
                                     1);
            try {
                cs.registerOutParameter(1, Types.VARCHAR);
                cs.setInt(2, distId);
                cs.setInt(3, lotID);
                cs.executeUpdate();
                String retcode = cs.getString(1);
                if ("success".equals(retcode)) {
                    transaction.commit();
                }
            } catch (Exception e) {
                System.out.println(e.toString());
                return -1;
            }
        }
        return 0;
    }

    //20130311刘禹孜修改状态

    public void CHANGE_STATUS(int lotID) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_ASSGN_BONUS_PKG.CHANGE_STATUS_ADD_ASSGN_WF(?,?,?,?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.setInt(3, lotID); //批次id
            cs.setString(4, "已批准");
            cs.executeUpdate();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
    }
    //20130311刘禹孜修改状态

    public void init_approver(int lotID) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_ASSGN_BONUS_add_WF_PKG.init_approver(?,?,?,?,?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.setString(3, 
                         "APPROVAL_MID_MANAGEMENT_ASSGN"); //小组成员APPROVAL_GROSS_IMPORT项目经理
            cs.setInt(4, 13785); //项目id
            cs.setInt(5, lotID); //批次id
            cs.executeUpdate();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
    }

    public void start_wf_prc(int lotID) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_ASSGN_BONUS_add_WF_PKG.start_wf_prc(?,?,?,?,?,?,?)", 
                                     1);
        try {
            cs.setString(1, "BONUS_AD");
            cs.setString(2, "");
            cs.setString(3, 
                         "APPROVAL_MID_MANAGEMENT_ASSGN"); //小组成员APPROVAL_GROSS_IMPORT项目经理
            cs.setInt(4, 13785); //项目id
            cs.setInt(5, lotID); //批次id
            cs.registerOutParameter(6, Types.INTEGER);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.executeUpdate();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    /**Container's getter for AdvAwardsExamVO1
     */
    public AdvAwardsExamVOImpl getAdvAwardsExamVO1() {
        return (AdvAwardsExamVOImpl)findViewObject("AdvAwardsExamVO1");
    }

    /**Container's getter for AdvAwardsAttachmentVO1
     */
    public AdvAwardsAttachmentVOImpl getAdvAwardsAttachmentVO1() {
        return (AdvAwardsAttachmentVOImpl)findViewObject("AdvAwardsAttachmentVO1");
    }

    /**Container's getter for AdvAwardsDeptLovVO1
     */
    public AdvAwardsDeptLovVOImpl getAdvAwardsDeptLovVO1() {
        return (AdvAwardsDeptLovVOImpl)findViewObject("AdvAwardsDeptLovVO1");
    }

    public String checkReductionValid(int iSignal, int iDeptOrgID, 
                                      String distDate) {
        //System.out.println("iSignal: " + iSignal + " distDate: " + distDate);
        if (iSignal == 1) {
            AdvAwardsDeptPersonVOImpl deptPersonVO = 
                getAdvAwardsDeptPersonVO1();
            int rowCount = deptPersonVO.getRowCount();
            RowSetIterator deptPersonIter = 
                deptPersonVO.createRowSetIterator("deptPersonIter");
            deptPersonIter.setRangeStart(0);
            deptPersonIter.setRangeSize(rowCount);
            for (int i = 0; i < rowCount; ++i) {
                Row pRow = deptPersonIter.getRowAtRangeIndex(i);
                Double newPerAmount = 0.0;
                if (pRow.getAttribute("DistributionAmount") != null) {
                    newPerAmount = 
                            DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                                4, BigDecimal.ROUND_HALF_UP);
                }
                if (newPerAmount > 0) {
                    String personNumber = "";
                    if (pRow.getAttribute("EmployeeNumber") != null) {
                        personNumber = 
                                pRow.getAttribute("EmployeeNumber").toString();
                    }
                    System.out.println("EmployeeNumber: " + personNumber + 
                                       " DistributionAmount: " + newPerAmount);
                    if (!"".equals(personNumber)) {
                        double bonusAmount = 
                            getPersonBonusAmount(personNumber, iDeptOrgID, 
                                                 distDate);
                        if (bonusAmount == -1) {
                            return "员工奖金获得总额程序出错，请联系系统管理员";
                        }
                        if (newPerAmount > bonusAmount) {
                            return "工号: " + personNumber + 
                                " 的发放数据扣款额度已超过本月收入，请检查！";
                        }
                    } else {
                        return "某条发放数据员工工号为空，请检查！";
                    }
                } else if (newPerAmount < 0) {
                    return "扣款额度应为正数";
                }
            }
        }
        if (iSignal == 2) {
            AdvAwardsOtherPerVOImpl otherPerVO = getAdvAwardsOtherPerVO1();
            int rowCount = otherPerVO.getRowCount();
            RowSetIterator otherPerIter = 
                otherPerVO.createRowSetIterator("otherPerIter");
            otherPerIter.setRangeStart(0);
            otherPerIter.setRangeSize(rowCount);
            for (int i = 0; i < rowCount; ++i) {
                Row pRow = otherPerIter.getRowAtRangeIndex(i);
                Double newPerAmount = 0.0;
                if (pRow.getAttribute("DistributionAmount") != null) {
                    newPerAmount = 
                            DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                                4, BigDecimal.ROUND_HALF_UP);
                }
                if (newPerAmount > 0) {
                    String personNumber = "";
                    if (pRow.getAttribute("EmployeeNumber") != null) {
                        personNumber = 
                                pRow.getAttribute("EmployeeNumber").toString();
                    }
                    System.out.println("EmployeeNumber: " + personNumber + 
                                       " DistributionAmount: " + newPerAmount);
                    if (!"".equals(personNumber)) {
                        double bonusAmount = 
                            getPersonBonusAmount(personNumber, iDeptOrgID, 
                                                 distDate);
                        if (bonusAmount == -1) {
                            return "员工奖金获得总额程序出错，请联系系统管理员";
                        }
                        if (newPerAmount > bonusAmount) {
                            return "工号: " + personNumber + 
                                " 的发放数据扣款额度已超过本月收入，请检查！";
                        }
                    } else {
                        return "某条发放数据员工工号为空，请检查！";
                    }
                } else if (newPerAmount < 0) {
                    return "扣款额度应为正数";
                }
            }
        }
        return "S";
    }

    private double getPersonBonusAmount(String personNumber, int iDeptOrgID, 
                                        String distDate) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        double bonusAmount = 0;
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS.GET_PERSON_BONUS_AMOUNT(?, ?, ?, ?)", 
                                     1);
        try {
            cs.setString(1, personNumber);
            cs.setInt(2, iDeptOrgID);
            cs.setString(3, distDate);
            cs.registerOutParameter(4, Types.DOUBLE);
            cs.executeUpdate();
            bonusAmount = cs.getDouble(4);
            cs.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return bonusAmount;
    }

    /* 获取其他部门人员VO的工号，用以在新行选择人员时进行排除
     * */

    public String getOtherPersonNumWhereClause() {
        AdvAwardsOtherPerVOImpl vo = this.getAdvAwardsOtherPerVO1();
        int rowCount = vo.getRowCount();
        RowSetIterator voIter = vo.createRowSetIterator("voIter");
        voIter.setRangeStart(0);
        voIter.setRangeSize(rowCount);

        String strEmployeeNum = "";
        int icount = 0;
        String strCurEmployee = "";
        oracle.jbo.Row currow = vo.getCurrentRow();
        if (currow.getAttribute("EmployeeNumber") != null) {
            strCurEmployee = currow.getAttribute("EmployeeNumber").toString();
        }

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = voIter.getRowAtRangeIndex(i);
            String strPer = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                strPer = pRow.getAttribute("EmployeeNumber").toString();
                if (strPer.length() == 6)
                    strPer = "'" + strPer + "'";
            }
            if (strPer.equals(""))
                continue;
            if (strPer.equals(strCurEmployee))
                continue;

            if (icount == 0)
                strEmployeeNum = strPer;
            else
                strEmployeeNum = strEmployeeNum.concat(",").concat(strPer);
            icount++;
        }

        if (!strEmployeeNum.equals(""))
            strEmployeeNum = "EMPLOYEE_NUMBER not in (" + strEmployeeNum + ")";

        return strEmployeeNum;
    }

    /*获取其他人员名单（需要提交的人员）
     * */

    public String GetOtherDistList() {
        AdvAwardsOtherPerVOImpl otherPerVO = getAdvAwardsOtherPerVO1();
        int rowCount = otherPerVO.getRowCount();
        RowSetIterator otherPerIter = 
            otherPerVO.createRowSetIterator("otherPerIter");
        otherPerIter.setRangeStart(0);
        otherPerIter.setRangeSize(rowCount);
        String strRtn = "";

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = otherPerVO.getRowAtRangeIndex(i);

            String readonlyFlag = "";
            if (pRow.getAttribute("ReadOnlyFlag") != null) {
                readonlyFlag = pRow.getAttribute("ReadOnlyFlag").toString();
            }
            if (readonlyFlag.equals("true"))
                continue; //跳过只读行

            //String personNumber = "";
            //if(pRow.getAttribute("EmployeeNumber") != null) {
            //    personNumber = pRow.getAttribute("EmployeeNumber").toString();
            //}
            //if(personNumber.equals("")) continue;

            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }

            //String personDept = "";
            //if(pRow.getAttribute("DepName") != null) {
            //    personDept = pRow.getAttribute("DepName").toString();
            //}

            if (strRtn.equals(""))
                strRtn = personName;
            else
                strRtn = strRtn.concat("、").concat(personName);
        }
        return strRtn;
    }

    /**Container's getter for RejDistVO1
     */
    public RejDistVOImpl getRejDistVO1() {
        return (RejDistVOImpl)findViewObject("RejDistVO1");
    }

    /**Container's getter for AdvAwardsYearStatVO1
     */
    public AdvAwardsYearStatVOImpl getAdvAwardsYearStatVO1() {
        return (AdvAwardsYearStatVOImpl)findViewObject("AdvAwardsYearStatVO1");
    }


    /* 初始化年度统计的VO */

    public void initYearStat(String distYear, int deptOrgID) {
        AdvAwardsYearStatVOImpl vo = this.getAdvAwardsYearStatVO1();
        vo.initSQL(distYear, deptOrgID);
    }

    /**Container's getter for NtfSuspendWarnVO1
     */
    public NtfSuspendWarnVOImpl getNtfSuspendWarnVO1() {
        return (NtfSuspendWarnVOImpl)findViewObject("NtfSuspendWarnVO1");
    }

    /* 根据组织id获取组织名称 */

    public String GetOrgName(int iOrgId) {
        String retcode = "";
        String strOrgName = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call APPS.CUX_HR_BONUS_PRJ.GET_ORG_NAME(?, ?, ?)", 
                                     1);
        try {
            cs.setInt(1, iOrgId);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(2);
            if ("success".equals(retcode))
                strOrgName = cs.getString(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        transaction.commit();
        return strOrgName;
    }

    /**Container's getter for CuxBonusOfficeDistributionVO1
     */
    public CuxBonusOfficeDistributionVOImpl getCuxBonusOfficeDistributionVO1() {
        return (CuxBonusOfficeDistributionVOImpl)findViewObject("CuxBonusOfficeDistributionVO1");
    }

    /**Container's getter for AdvanceAwardsTypeVO2
     */
    public AdvanceAwardsTypeVOImpl getAdvanceAwardsTypeVO2() {
        return (AdvanceAwardsTypeVOImpl)findViewObject("AdvanceAwardsTypeVO2");
    }

    /**Container's getter for AdvAwardsOfficeLovVO1
     */
    public AdvAwardsOfficeLovVOImpl getAdvAwardsOfficeLovVO1() {
        return (AdvAwardsOfficeLovVOImpl)findViewObject("AdvAwardsOfficeLovVO1");
    }

    /**Container's getter for CuxBonusOfficePersonDistVO1
     */
    public CuxBonusOfficePersonDistVOImpl getCuxBonusOfficePersonDistVO1() {
        return (CuxBonusOfficePersonDistVOImpl)findViewObject("CuxBonusOfficePersonDistVO1");
    }

    /**Container's getter for AdvAwardsSummaryOfficeVO1
     */
    public AdvAwardsSummaryOfficeVOImpl getAdvAwardsSummaryOfficeVO1() {
        return (AdvAwardsSummaryOfficeVOImpl)findViewObject("AdvAwardsSummaryOfficeVO1");
    }
}


