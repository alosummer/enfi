package cux.oracle.apps.per.bonus.specialawards.server;


import cux.oracle.apps.per.bonus.member.webui.DoubleProcess;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.Types;

import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.jbo.Row;


import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SpecialAwardsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public SpecialAwardsAMImpl() {
    }


    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.per.bonus.specialawards.server", 
                                             "SpecialAwardsAMLocal");
    }


    /**Container's getter for SpecialAwardsTypeVO1
     */
    public SpecialAwardsTypeVOImpl getSpecialAwardsTypeVO1() {
        return (SpecialAwardsTypeVOImpl)findViewObject("SpecialAwardsTypeVO1");
    }


    /**Container's getter for SpecialAwardsDeptVO1
     */
    public SpecialAwardsDeptVOImpl getSpecialAwardsDeptVO1() {
        return (SpecialAwardsDeptVOImpl)findViewObject("SpecialAwardsDeptVO1");
    }
    //查询当前奖金类型是否对人员发放

    public String bonusToPeopleFlag(String bonusType) {
        String peopleFlag = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_bonus_dist_flag(?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, bonusType);
            cs.setString(3, "person");
            cs.executeUpdate();
            peopleFlag = cs.getString(1);
            ;
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        if (peopleFlag == null || "".equals(peopleFlag)) {
            return "error";
        }
        return peopleFlag;
    }
    //查询当前奖金类型是否对部门发放

    public String bonusToDeptFlag(String bonusType) {
        String deptFlag = "";
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_bonus_dist_flag(?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, bonusType);
            cs.setString(3, "dept");
            cs.executeUpdate();
            deptFlag = cs.getString(1);
            ;
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        if (deptFlag == null || "".equals(deptFlag)) {
            return "error";
        }
        return deptFlag;
    }

    public void queryAttachment(String searchBonusType, 
                                String searchDistDate) {
        SpecialAwardsAttachmentVOImpl attachmentVO = 
            getSpecialAwardsAttachmentVO1();
        attachmentVO.initSQL(searchBonusType, searchDistDate);
    }

    public void queryDeptData(String searchBonusType, String searchDistDate) {
        SpecialAwardsDeptVOImpl deptVO = getSpecialAwardsDeptVO1();
        Integer intDistDate = Integer.parseInt(searchDistDate);
        deptVO.initQuery(searchBonusType, intDistDate);
        deptVO.setMaxFetchSize(-1);
    }
    //根据奖金类型和发放日期初始化人员表VO的SQL

    public void queryPersonData(String searchBonusType, 
                                String searchDistDate) {
        SpecialAwardsPersonVOImpl personVO = getSpecialAwardsPersonVO1();
        personVO.initQuery(searchBonusType, searchDistDate);
    }

    public int SavePersonDist(String distDate, String bonusTypeName, 
                              int deptORGID) {
        SpecialAwardsPersonVOImpl vo = getSpecialAwardsPersonVO1();
        //修改--黄波 2013-03-15
        Row[] rows = vo.getAllRowsInRange();
        for (int i = 0; i < rows.length; ++i) {
            Row pRow = rows[i];
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }
            if (personNumber == "" || personName == "" || personDept == "") {
                return 1;
            }
            Double personAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (personAmount <= 0) {
                return 2;
            }
        }
        //更新已有的数据行，可能有修改
        Row[] oldRow = vo.getFilteredRows("Attribute1", "Y");
        for (int i = 0; i < oldRow.length; ++i) {
            Row pRow = oldRow[i];
            Integer distId = 
                Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }

            Double personAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            String personNote = "";
            if (pRow.getAttribute("Note") != null) {
                personNote = pRow.getAttribute("Note").toString();
            }
            String distStatus = "";
            if (pRow.getAttribute("DistributionStatus") != null) {
                distStatus = 
                        pRow.getAttribute("DistributionStatus").toString();
            }
            if (!"已批准".equals(distStatus) && !"处理中".equals(distStatus)) {
                CallableStatement cs = null;
                OADBTransaction transaction = this.getOADBTransaction();
                cs = 
 transaction.createCallableStatement("call cux_hr_bonus.update_person_distribution(?, ?, ?, ?, ?, ?, ?)", 
                                     1);
                try {
                    cs.registerOutParameter(1, Types.VARCHAR);
                    cs.setInt(2, distId);
                    cs.setString(3, personNumber);
                    cs.setString(4, personName);
                    cs.setString(5, personDept);
                    cs.setDouble(6, personAmount);
                    cs.setString(7, personNote);
                    cs.executeUpdate();
                    String retcode = cs.getString(1);
                    if ("success".equals(retcode)) {
                        transaction.commit();
                    } else if ("person_info error".equals(retcode)) {
                        return 1;
                    } else {
                        return 3;
                    }
                } catch (Exception e) {
                    System.out.println(e.toString());
                }
            }
        }
        //添加新数据行
        Row[] newRow = vo.getFilteredRows("Attribute1", "N");
        for (int i = 0; i < newRow.length; ++i) {
            Row pRow = newRow[i];
            String personNumber = "";
            if (pRow.getAttribute("EmployeeNumber") != null) {
                personNumber = pRow.getAttribute("EmployeeNumber").toString();
            }
            String personName = "";
            if (pRow.getAttribute("LastName") != null) {
                personName = pRow.getAttribute("LastName").toString();
            }
            String personDept = "";
            if (pRow.getAttribute("DepName") != null) {
                personDept = pRow.getAttribute("DepName").toString();
            }
            Double personAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                personAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            String personNote = "";
            if (pRow.getAttribute("Note") != null) {
                personNote = pRow.getAttribute("Note").toString();
            }
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            String dataSource = "OTHER";
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.insert_person_distribution(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                                     1);
            try {
                cs.registerOutParameter(1, Types.VARCHAR);
                cs.setString(2, personNumber);
                cs.setString(3, personName);
                cs.setInt(4, deptORGID);
                cs.setString(5, personDept);
                cs.setDouble(6, personAmount);
                cs.setString(7, personNote);
                cs.setString(8, distDate + "-01");
                cs.setString(9, bonusTypeName);
                cs.setInt(10, 0);
                cs.setString(11, null);
                cs.setInt(12, 0);
                cs.setString(13, dataSource);
                cs.executeUpdate();
                String retcode = cs.getString(1);
                if ("success".equals(retcode)) {
                    transaction.commit();
                } else if ("person_info error".equals(retcode)) {
                    return 1;
                } else {
                    return 3;
                }
            } catch (Exception e) {
                System.out.println(e.toString());
            }
            pRow.setAttribute("Attribute1", "Y");
        }
        return 0;
    }

    /* 保存部分奖金分配数据(项管部发放到各部门)
     * return 1:部门ID为空，未选择部门
     *        100: 有重复的部门
     *        2: 发放金额<0
     *
     * */

    public int SaveDeptDist(String distDate, String bonusTypeName) {
        SpecialAwardsDeptVOImpl vo = getSpecialAwardsDeptVO1();
        Integer intDistDate = Integer.parseInt(distDate);

        int irtn = ValidateDeptDist();
        if (irtn != 0)
            return irtn;

        //更新已有的数据行，可能有修改
        Row[] oldRow = vo.getFilteredRows("Attribute1", "Y");
        for (int i = 0; i < oldRow.length; ++i) {
            Row pRow = oldRow[i];

            String distStatus = 
                pRow.getAttribute("DistributionStatus").toString();
            if ("已批准".equals(distStatus) || "处理中".equals(distStatus))
                continue;

            Integer distId = 
                Integer.parseInt(pRow.getAttribute("DepDistributionId").toString());
            String strOrgID = pRow.getAttribute("OrganizationId").toString();
            int deptOrgID = Integer.parseInt(strOrgID);
            String deptName = pRow.getAttribute("DepName").toString();
            Double deptAmount = 
                DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                    4, BigDecimal.ROUND_HALF_UP);
            String deptNote = "";

            if (pRow.getAttribute("Note") != null) {
                deptNote = pRow.getAttribute("Note").toString();
            }

            irtn = 
UpdateDeptDist(distId, deptOrgID, deptName, deptAmount, deptNote);
            if (irtn != 0)
                return irtn;
        }

        //添加新数据行
        Row[] newRow = vo.getFilteredRows("Attribute1", "N");
        for (int i = 0; i < newRow.length; ++i) {
            Row pRow = newRow[i];
            String strOrgID = pRow.getAttribute("OrganizationId").toString();
            int deptOrgID = Integer.parseInt(strOrgID);
            String deptName = pRow.getAttribute("DepName").toString();
            Double deptAmount = 
                DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                    4, BigDecimal.ROUND_HALF_UP);
            String deptNote = "";
            if (pRow.getAttribute("Note") != null)
                deptNote = pRow.getAttribute("Note").toString();

            irtn = 
InsertDeptDist(deptOrgID, deptName, deptAmount, deptNote, intDistDate, 
               bonusTypeName);
            if (irtn != 0)
                return irtn;
        }
        return 0;
    }


    /* 判断部门数据合法性
     * added by yang.gang, 2015-6-3
     * return 1: 部门ID为空，未选择部门
     *        2: 发放金额<0
     *        0: 正确
     * */

    private int ValidateDeptDist() {
        SpecialAwardsDeptVOImpl vo = getSpecialAwardsDeptVO1();
        Row[] rows = vo.getAllRowsInRange();
        for (int i = 0; i < rows.length; ++i) {
            Row pRow = rows[i];
            String deptID = "";
            if (pRow.getAttribute("OrganizationId") != null) {
                deptID = pRow.getAttribute("OrganizationId").toString();
            }
            if ("".equals(deptID))
                return 1;

            Double deptAmount = 0.0;
            if (pRow.getAttribute("DistributionAmount") != null) {
                deptAmount = 
                        DoubleProcess.round(Double.parseDouble(pRow.getAttribute("DistributionAmount").toString()), 
                                            4, BigDecimal.ROUND_HALF_UP);
            }
            if (deptAmount <= 0)
                return 2;
        }
        return 0;
    }

    /* 更新部门奖金信息，金额和备注
     * added by yang.yang, 2015-6-3
     * return 0: 保存成功
     * */

    private int UpdateDeptDist(int iDistID, int iOrgID, String strOraName, 
                               Double deptAmount, String deptNote) {
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.update_dept_distribution(?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, iDistID);
            cs.setInt(3, iOrgID);
            cs.setString(4, strOraName);
            cs.setDouble(5, deptAmount);
            cs.setString(6, deptNote);
            cs.executeUpdate();
            String retcode = cs.getString(1);
            if ("success".equals(retcode))
                transaction.commit();
            else
                return 3;
        } catch (Exception e) {
            //System.out.println(e.toString());
            return 3;
        }
        return 0;
    }

    /* 新增部门奖金信息
     * added by yang.yang, 2015-6-3
     * return 0: 保存成功
     * */

    private int InsertDeptDist(int deptOrgID, String deptName, 
                               Double deptAmount, String deptNote, 
                               int intDistDate, String bonusTypeName) {
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.insert_dept_distribution(?, ?, ?, ?, ?, ?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, deptOrgID);
            cs.setString(3, deptName);
            cs.setDouble(4, deptAmount);
            cs.setString(5, deptNote);
            cs.setInt(6, intDistDate);
            cs.setString(7, bonusTypeName);
            cs.executeUpdate();
            String retcode = cs.getString(1);
            if ("success".equals(retcode))
                transaction.commit();
            else
                return 3;
        } catch (Exception e) {
            //System.out.println(e.toString());
            return 3;
        }
        return 0;
    }

    public void DeleteDeptLine(String distId, String distName) {
        //发放Id不为空，说明是已经存在数据库中的数据，先修改数据库中数据状态
        if (!"".equals(distId)) {
            int depDistId = Integer.parseInt(distId);
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.delete_dept_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, depDistId);
                cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }

        //不论数据是否存在数据库中，从页面VO中删除该数据
        OAViewObject vo = getSpecialAwardsDeptVO1();
        SpecialAwardsDeptVORowImpl row = null;
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
        if (fetchedRowCount > 0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; ++i) {
                row = 
(SpecialAwardsDeptVORowImpl)deleteIter.getRowAtRangeIndex(i);

                String deleteDeptName = "";
                if (row.getDepName() != null) {
                    deleteDeptName = row.getDepName();
                }
                if (deleteDeptName.equals(distName)) {
                    row.remove();
                    getTransaction().commit();
                    break;
                }
            }
        }
        deleteIter.closeRowSetIterator();
    }

    public void DeletePersonLine(String distId, String distName) {
        if (!"".equals(distId)) {
            int depDistId = Integer.parseInt(distId);
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.delete_person_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, depDistId);
                cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
        OAViewObject vo = (OAViewObject)getSpecialAwardsPersonVO1();
        SpecialAwardsPersonVORowImpl row = null;
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
        if (fetchedRowCount > 0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; ++i) {
                row = 
(SpecialAwardsPersonVORowImpl)deleteIter.getRowAtRangeIndex(i);
                String deletePerName = "";
                if (row.getLastName() != null) {
                    deletePerName = row.getLastName();
                }
                if (deletePerName.equals(distName)) {
                    row.remove();
                    getTransaction().commit();
                    break;
                }
            }
        }
        deleteIter.closeRowSetIterator();
    }

    public void submitDistData() {

        SpecialAwardsPersonVOImpl personVO = getSpecialAwardsPersonVO1();
        int rowCount = personVO.getRowCount();
        RowSetIterator personIter = 
            personVO.createRowSetIterator("personIter");
        personIter.setRangeStart(0);
        personIter.setRangeSize(rowCount);

        for (int i = 0; i < rowCount; ++i) {
            Row pRow = personIter.getRowAtRangeIndex(i);
            Integer distId = 
                Integer.parseInt(pRow.getAttribute("PersonDistributionId").toString());
            CallableStatement cs = null;
            OADBTransaction transaction = this.getOADBTransaction();
            cs = 
 transaction.createCallableStatement("call cux_hr_bonus.submit_person_distribution(?)", 
                                     1);
            try {
                cs.setInt(1, distId);
                cs.executeUpdate();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
    }

    /**Container's getter for SpecialAwardsPersonVO1
     */
    public SpecialAwardsPersonVOImpl getSpecialAwardsPersonVO1() {
        return (SpecialAwardsPersonVOImpl)findViewObject("SpecialAwardsPersonVO1");
    }

    /**Container's getter for SpecialAwardsDateVO1
     */
    public SpecialAwardsDateVOImpl getSpecialAwardsDateVO1() {
        return (SpecialAwardsDateVOImpl)findViewObject("SpecialAwardsDateVO1");
    }

    /**Container's getter for SpecialAwardsSummaryVO1
     */
    public SpecialAwardsSummaryVOImpl getSpecialAwardsSummaryVO1() {
        return (SpecialAwardsSummaryVOImpl)findViewObject("SpecialAwardsSummaryVO1");
    }

    /**Container's getter for SpecialAwardsOperatorVO1
     */
    public SpecialAwardsOperatorVOImpl getSpecialAwardsOperatorVO1() {
        return (SpecialAwardsOperatorVOImpl)findViewObject("SpecialAwardsOperatorVO1");
    }

    public int getLoginUserDept() {
        int deptName = 0;
        CallableStatement cs = null;
        OADBTransaction transaction = this.getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.GET_USER_BONUS_ORGID(?, ?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.setObject(2, 1);
            cs.executeUpdate();
            deptName = cs.getInt(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        return deptName;
    }

    public int getValidDataNum() {
        int dataCount = 0;
        SpecialAwardsDeptVOImpl deptVO = getSpecialAwardsDeptVO1();
        int rowCount = deptVO.getRowCount();
        RowSetIterator deptIter = deptVO.createRowSetIterator("deptIter");
        deptIter.setRangeStart(0);
        deptIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptIter.getRowAtRangeIndex(i);
            String status = "";
            if (pRow.getAttribute("DistributionStatus") != null) {
                status = pRow.getAttribute("DistributionStatus").toString();
            }
            if ("预保存".equals(status) || "已拒绝".equals(status)) {
                dataCount += 1;
            }
        }
        return dataCount;
    }

    public int getLotID() {
        int lotID = -1;
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call cux_hr_bonus.get_next_lot_id(?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.INTEGER);
            cs.executeUpdate();
            lotID = cs.getInt(1);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return lotID;
    }

    public int updateDataLotID(int lotID) {
        SpecialAwardsDeptVOImpl deptVO = getSpecialAwardsDeptVO1();
        int rowCount = deptVO.getRowCount();
        RowSetIterator deptIter = deptVO.createRowSetIterator("deptIter");
        deptIter.setRangeStart(0);
        deptIter.setRangeSize(rowCount);
        for (int i = 0; i < rowCount; ++i) {
            Row pRow = deptIter.getRowAtRangeIndex(i);
            String status = "";
            if (pRow.getAttribute("DistributionStatus") != null) {
                status = pRow.getAttribute("DistributionStatus").toString();
            }
            if ("预保存".equals(status) || "已拒绝".equals(status)) {
                String distId = 
                    pRow.getAttribute("DepDistributionId").toString();
                CallableStatement cs = null;
                OADBTransaction transaction = getOADBTransaction();
                cs = 
 transaction.createCallableStatement("call cux_hr_bonus.update_dep_distribution_lot(?,?, ?)", 
                                     1);
                try {
                    cs.registerOutParameter(1, Types.VARCHAR);
                    cs.setInt(2, Integer.parseInt(distId));
                    cs.setInt(3, lotID);
                    cs.executeUpdate();
                    String retcode = cs.getString(1);
                    if ("success".equals(retcode)) {
                        transaction.commit();
                    }
                } catch (Exception e) {
                    System.out.println(e.toString());
                    return -1;
                }
            }
        }
        return 0;
    }

    public int getAttachmentId() {
        int attachmentId = -1;
        SpecialAwardsAttachmentVOImpl attachmentVO = 
            getSpecialAwardsAttachmentVO1();
        int rowCount = attachmentVO.getRowCount();
        if (rowCount > 0) {
            RowSetIterator attachmentIter = 
                attachmentVO.createRowSetIterator("attachmentIter");
            attachmentIter.setRangeStart(0);
            attachmentIter.setRangeSize(rowCount);
            for (int i = 0; i < rowCount; ++i) {
                Row pRow = attachmentIter.getRowAtRangeIndex(0);
                attachmentId = 
                        Integer.parseInt(pRow.getAttribute("AttachmentPk").toString());
            }
        }
        System.out.println("**********总附件ID = " + attachmentId + 
                           "***********");
        return attachmentId;
    }

    public void init_approver(int lotID, int attachmentId) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_ASSGN_BONUS_add_WF_PKG.init_approver(?,?,?,?,?)", 
                                     1);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.setString(3, 
                         "APPROVAL_DEPT_ASSGN"); //小组成员APPROVAL_GROSS_IMPORT项目经理
            cs.setInt(4, attachmentId); //主附件Id，无附件时为-1
            cs.setInt(5, lotID); //批次id
            cs.executeUpdate();
            String ERRBUF = cs.getString(1);
            String retcode = cs.getString(2);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    public String start_wf_prc(int lotID, int attachmentId) {
        CallableStatement cs = null;
        String retcode = "";
        String ERRBUF = "";
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_ASSGN_BONUS_add_WF_PKG.start_wf_prc(?,?,?,?,?,?,?)", 
                                     1);
        try {
            cs.setString(1, "BONUS_AD");
            cs.setString(2, "");
            cs.setString(3, 
                         "APPROVAL_DEPT_ASSGN"); //小组成员APPROVAL_GROSS_IMPORT项目经理
            cs.setInt(4, attachmentId); //主附件Id，无附件时为-1
            cs.setInt(5, lotID); //批次id
            cs.registerOutParameter(6, Types.INTEGER);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.executeUpdate();
            retcode = cs.getString(6);
            ERRBUF = cs.getString(7);
        } catch (Exception e) {
            System.out.println(e.toString());
            retcode = "1";
            ERRBUF = e.toString();
        }

        if ("0".equals(retcode))
            return "success";
        else
            return ERRBUF;
    }

    /**Container's getter for SpecialAwardsExamVO1
     */
    public SpecialAwardsExamVOImpl getSpecialAwardsExamVO1() {
        return (SpecialAwardsExamVOImpl)findViewObject("SpecialAwardsExamVO1");
    }

    /**Container's getter for SpecialAwardsAttachmentVO1
     */
    public SpecialAwardsAttachmentVOImpl getSpecialAwardsAttachmentVO1() {
        return (SpecialAwardsAttachmentVOImpl)findViewObject("SpecialAwardsAttachmentVO1");
    }

    public int getDeptDistNum(String bonusType, int distDate) {
        CallableStatement cs = null;
        OADBTransaction transaction = getOADBTransaction();
        cs = 
 transaction.createCallableStatement("call CUX_HR_BONUS.GET_DEPT_BONUS_NUM(?,?,?)", 
                                     1);
        int count = 0;
        try {
            cs.setObject(1, bonusType);
            cs.setObject(2, distDate);
            cs.registerOutParameter(3, Types.INTEGER);
            cs.executeUpdate();
            count = cs.getInt(3);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

        return count;
    }
}
