package cux.oracle.apps.pa.dlv.server;


import com.sun.java.util.collections.ArrayList;

import cux.oracle.apps.pa.util.ApplicationModuleUtil;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.UUID;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAExceptionUtils;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeliverAMImpl extends ApplicationModuleUtil {
    String submitStmt = 
        "BEGIN " + "  cux_pa_dlv_pkg.startup_workflow(p_guid => :1); " + 
        "END;";

    /**This is the default constructor (do not remove)
     */
    public DeliverAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.pa.dlv.server", 
                                             "DeliverAMLocal");
    }

    /**Container's getter for DelierableVO1
     */
    public DeliverableVOImpl getDelierableVO1() {
        return (DeliverableVOImpl)findViewObject("DelierableVO1");
    }

    public void initDlvVO() {
        DeliverableVOImpl vo = this.getDelierableVO1();
        vo.setWhereClause(null);
        vo.setMaxFetchSize(-1);
        vo.clearCache();
    }

    public void initDlvVOLocal() {
        DeliverableVOImpl vo = this.getDelierableVO1();
        vo.setMaxFetchSize(0);
    }

    public void doSearch(String projectId, String docTypeCode, String taskId) {
        StringBuilder criteria = new StringBuilder();
        criteria.append("1=1");
        ArrayList specs = getEmpProjectSpec(projectId);
        if (projectId != null && !"".equals(projectId)) {
            criteria.append(" AND project_id = " + projectId);
        }
        if (docTypeCode != null && !"".equals(docTypeCode)) {
            criteria.append(" AND doc_type = '" + docTypeCode + "'");
        }
        if (taskId != null && !"".equals(taskId)) {
            criteria.append(" AND task_id = " + taskId);
        }
        if (this.findViewObject("IsProductManagerVO") != null) {
            this.findViewObject("IsProductManagerVO").remove();
        }
        ViewObject checkVO = 
            this.createViewObjectFromQueryStmt("IsProductManagerVO", 
                                               "SELECT 1\n" + 
                                               "FROM pa_project_parties ppp,\n" + 
                                               "     pa_project_role_types prt\n" + 
                                               "WHERE ppp.PROJECT_ROLE_ID = prt.project_role_id\n" + 
                                               "AND   prt.meaning IN ('设计经理','项目经理','项目副经理','进度工程师')\n" + 
                                               "AND   ppp.RESOURCE_SOURCE_ID = fnd_global.EMPLOYEE_ID\n" + 
                                               "AND   ppp.PROJECT_ID = " + 
                                               projectId);
        checkVO.setMaxFetchSize(-1);
        checkVO.executeQuery();
        if (checkVO.getRowCount() == 0) {
            if (specs.size() == 0) {
                criteria.append(" AND 1 = 2");
            } else {
                String specStmt = "(";
                for (int i = 0; i < specs.size(); i++) {
                    if (i > 0) {
                        specStmt += ",";
                    }
                    specStmt = specStmt + "'" + specs.get(i).toString() + "'";
                }
                specStmt += ")";
                criteria.append(" AND release_specialty IN " + specStmt);
            }
        } else {
            //如果员工为设计经理、项目经理、项目副经理，查询所有交付物
            criteria.append(" AND 1 = 1");
        }
        initDlvVO();
        DeliverableVOImpl vo = this.getDelierableVO1();
        vo.setWhereClause(criteria.toString());
        vo.executeQuery();
    }

    private ArrayList getEmpProjectSpec(String projectId) {
        EmpProjectSpecVOImpl specVO = this.getEmpProjectSpecVO1();
        if (specVO.getWhereClause() != null) {
            specVO.setWhereClause(null);
        }
        specVO.setWhereClause("project_id = " + projectId);
        specVO.setMaxFetchSize(-1);
        specVO.executeQuery();
        ArrayList specs = new ArrayList();
        while (specVO.hasNext()) {
            EmpProjectSpecVORowImpl specRow = 
                (EmpProjectSpecVORowImpl)specVO.next();
            if (specRow.getSpecialtyCode() != null) {
                specs.add(specRow.getSpecialtyCode());
            }
        }
        return specs;
    }

    public void doSave() {
        this.getOADBTransaction().putValue("Action", "Save");
        DeliverableVOImpl deliverableVO = this.getDelierableVO1();
        RowSetIterator rs = 
            deliverableVO.findRowSetIterator("doSaveValidation");
        int totalWeights = 0;
        int totalSgt = 0;
        if (rs == null) {
            rs = deliverableVO.createRowSetIterator("doSaveValidation");
        }

        while (rs.hasNext()) {
            Row row = rs.next();
            Number weights = (Number)row.getAttribute("Weights");
            if ("3.3.001".equals((String)row.getAttribute("DocType"))) {
                totalSgt += 1;
            }
            if (weights != null) {
                totalWeights += weights.intValue();
            }
        }
        rs.closeRowSetIterator();
        ;
        //        if (totalWeights > 100) {
        //            throw new OAException("关联WBS任务已分配权重超过100，无法保存！", 
        //                                  OAException.ERROR);
        //        }
        if (totalSgt > 10) {
            throw new OAException("关联WBS任务施工图交付物超过10张，无法保存", 
                                  OAException.ERROR);
        }
        this.getOADBTransaction().commit();
        this.getOADBTransaction().removeValue("Action");
    }

    public void doSubmit() {
        this.doSave();
        ArrayList exceptions = new ArrayList();
        String itemType = "PADLVAPV";
        String GUID = UUID.randomUUID().toString().toUpperCase();
        DeliverableVOImpl vo = this.getDelierableVO1();
        Row[] rows = vo.getFilteredRows("Checked", "Y");
        if (rows.length == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E020", null, 
                                           OAException.ERROR, null));
            OAException.raiseBundledOAException(exceptions);
            return;
        }
        int unapprovedRecCount = 0;
        for (int i = 0; i < rows.length; i++) {
            if ("UNAPPROVED".equals(rows[i].getAttribute("Status").toString())) {
                unapprovedRecCount++;
            }
        }
        if (unapprovedRecCount == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E020", null, 
                                           OAException.ERROR, null));
        }
        //add by weiyi at 20170921
        for (int i = 0; i < rows.length; i++) {
            //modify by weiyi at 20171114 研发课题和标准编制不关联特殊节点
            String projectType = 
                (String)this.getSqlValue("SELECT class_code\n" + 
                                         "FROM   pa_project_classes\n" + 
                                         "WHERE  class_category = '项目细分类'\n" + 
                                         "AND    project_id = " + 
                                         rows[i].getAttribute("ProjectId").toString());
            if ("研发课题".equals(projectType) || "标准编制".equals(projectType)) {

            } else {
                if ("3.2.001".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.002".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.003".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.004".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.005".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.006".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.008".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.2.009".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.1.032".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.1.033".equals(rows[i].getAttribute("DocType").toString())) {
                    if (rows[i].getAttribute("Wjhzd") == null || 
                        "".equals(rows[i].getAttribute("Wjhzd").toString())) {
                        exceptions.add(new OAException("CUX", "该文档类型未关联文件汇总点！", 
                                                       null, OAException.ERROR, 
                                                       null));
                    }
                }
                if ("3.2.010".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.3.001".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.3.002".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.3.003".equals(rows[i].getAttribute("DocType").toString()) || 
                    "3.3.004".equals(rows[i].getAttribute("DocType").toString())) {
                    if (rows[i].getAttribute("Hqd") == null || 
                        "".equals(rows[i].getAttribute("Hqd").toString()) || 
                        rows[i].getAttribute("Jtd") == null || 
                        "".equals(rows[i].getAttribute("Jtd").toString())) {
                        exceptions.add(new OAException("CUX", 
                                                       "该文档类型未关联会签点/交图点！", 
                                                       null, OAException.ERROR, 
                                                       null));
                    }
                }
            }
        }
        //end
        if (exceptions.size() > 0) {
            OAException.raiseBundledOAException(exceptions);
            return;
        }
        Number projectid = (Number)rows[0].getAttribute("ProjectId");
        ArrayList list = this.getEmpProjectSpec(projectid.stringValue());
        if (this.findViewObject("IsProductManagerVO") != null) {
            this.findViewObject("IsProductManagerVO").remove();
        }
        ViewObject checkVO = 
            this.createViewObjectFromQueryStmt("IsProductManagerVO", 
                                               "SELECT r FROM (SELECT cux_pa_util_pkg.get_project_roles_emp(p_project_id => " + 
                                               projectid.stringValue() + 
                                               ",p_mode => '设计经理') r FROM dual) WHERE r IS NOT NULL");
        checkVO.setMaxFetchSize(-1);
        checkVO.executeQuery();
        if (checkVO.getRowCount() == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E024", null, 
                                           OAException.ERROR, null));
            OAException.raiseBundledOAException(exceptions);
            return;
        } else {
            for (int i = 0; i < rows.length; i++) {
                if ((Boolean)rows[i].getAttribute("AccessLevel")) {
                    exceptions.add(new OAException("CUX", "CUX-PM-E023", null, 
                                                   OAException.ERROR, null));
                    break;
                }
                if (!list.contains(rows[i].getAttribute("ReleaseSpecialty").toString())) {
                    exceptions.add(new OAException("CUX", "CUX-PM-E018", null, 
                                                   OAException.ERROR, null));
                    continue;
                }
                if ("SUBMITED".equals((String)rows[i].getAttribute("Status")) || 
                    "APPROVED".equals((String)rows[i].getAttribute("Status"))) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()), 
                      new MessageToken("STATUS", 
                                       rows[i].getAttribute("StatusName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-E019", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    break;
                }
                rows[i].setAttribute("UpdateAllowed", true);
                rows[i].setAttribute("Status", "SUBMITED");
                rows[i].setAttribute("WfItemkey", GUID);
                rows[i].setAttribute("WfItemtype", itemType);
            }
            if (exceptions.size() > 0) {
                OAException.raiseBundledOAException(exceptions);
                return;
            }
            doSave();
            OADBTransaction trxn = this.getOADBTransaction();
            CallableStatement cbStmt = 
                trxn.createCallableStatement(submitStmt, 1);
            try {
                cbStmt.setString(1, GUID);
                cbStmt.execute();
                cbStmt.close();
                OAExceptionUtils.checkErrors(trxn);
            } catch (SQLException sqle) {
                try {
                    cbStmt.close();
                } catch (SQLException e) {
                }
                throw OAException.wrapperException(sqle);
            }
            trxn.commit();
            throw new OAException("审批流程已提交!", OAException.INFORMATION);
        }
    }

    public void addRows(Integer rowCount, String projectId, String taskId) {
        ArrayList list = this.getEmpProjectSpec(projectId);
        if (list.size() == 0) {
            throw new OAException("CUX", "CUX-PM-E023", null, 
                                  OAException.ERROR, null);
        }
        DeliverableVOImpl vo = this.getDelierableVO1();
        initDlvVOLocal();
        vo.first();
        String sql = 
            "SELECT cux_common_pkg.get_person_primary_deptid(fnd_global.employee_id)\n" + 
            "FROM   dual\n";
        Number deptId = (Number)this.getSqlValue(sql);
        sql = 
"SELECT cux_common_pkg.get_org_name_byid(cux_common_pkg.get_person_primary_deptid(fnd_global.employee_id))\n" + 
  "FROM   dual\n";
        String deptName = (String)this.getSqlValue(sql);
        sql = 
"SELECT cux_pa_util_pkg.get_concatenate_wbs_name(b.proj_element_id) task_name\n" + 
  "FROM   pa_projects_all            a\n" + 
  "      ,pa_proj_elements           b\n" + 
  "      ,pa_proj_element_versions   c\n" + 
  "      ,pa_proj_elem_ver_schedule  d\n" + 
  "      ,pa_proj_elem_ver_structure stc\n" + 
  "      ,pa_task_types              ptt\n" + 
  "WHERE  a.project_id = b.project_id\n" + 
  "AND    b.project_id = c.project_id\n" + 
  "AND    b.proj_element_id = c.proj_element_id\n" + 
  "AND    b.object_type = 'PA_TASKS'\n" + 
  "AND    c.project_id = d.project_id(+)\n" + 
  "AND    c.element_version_id = d.element_version_id(+)\n" + 
  "AND    c.parent_structure_version_id = stc.element_version_id\n" + 
  "AND    stc.latest_eff_published_flag = 'Y'\n" + 
  "AND    b.type_id = ptt.task_type_id\n" + 
  "AND    ptt.task_type = '需提交交付物的任务'\n" + "AND    b.proj_element_id = " + 
  taskId;
        String taskName = (String)this.getSqlValue(sql);
        for (int i = 0; i < rowCount; i++) {
            Row row = vo.createRow();
            row.setAttribute("ProjectId", projectId);
            row.setAttribute("Status", "UNAPPROVED");
            row.setAttribute("StatusName", "未批准");
            row.setAttribute("TaskId", taskId);
            row.setAttribute("TaskName", taskName);
            row.setAttribute("UpdateAllowed", false);
            row.setAttribute("AccessLevel", false);
            row.setAttribute("ReleaseDept", deptId);
            row.setAttribute("ReleaseDeptName", deptName);
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRow(row);
        }
    }

    public void doUpdate() {
        ArrayList exceptions = new ArrayList();
        DeliverableVOImpl vo = this.getDelierableVO1();
        Row[] rows = vo.getFilteredRows("Checked", "Y");
        if (rows.length == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E020", null, 
                                           OAException.ERROR, null));
            OAException.raiseBundledOAException(exceptions);
            return;
        }
        Number projectId = (Number)rows[0].getAttribute("ProjectId");
        ArrayList list = this.getEmpProjectSpec(projectId.stringValue());
        for (int i = 0; i < rows.length; i++) {
            //如果有实际完成日期，交付物无法更改
            if (rows[i].getAttribute("ActualCompletedDate") != null) {
                MessageToken[] tokens = 
                { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                exceptions.add(new OAException("CUX", "CUX-PM-E025", tokens, 
                                               OAException.ERROR, null));
                continue;
            }
            if ("SUBMITED".equals(rows[i].getAttribute("Status"))) {
                MessageToken[] tokens = 
                { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                exceptions.add(new OAException("CUX", "CUX-PM-E003", tokens, 
                                               OAException.ERROR, null));
                continue;
            }
            if (!list.contains(rows[i].getAttribute("ReleaseSpecialty").toString())) {
                exceptions.add(new OAException("CUX", "CUX-PM-E018", null, 
                                               OAException.ERROR, null));
                continue;
            }
            if ((Boolean)rows[i].getAttribute("AccessLevel")) {
                exceptions.add(new OAException("CUX", "CUX-PM-E023", null, 
                                               OAException.ERROR, null));
                continue;
            }
            rows[i].setAttribute("UpdateAllowed", false);
            rows[i].setAttribute("AUpdateAllowed", false);
            rows[i].setAttribute("BUpdateAllowed", false);
            if (rows[i].getAttribute("ActualCountersignDate") != null || 
                rows[i].getAttribute("ActualReleaseDate") != null) {
                rows[i].setAttribute("UpdateAllowed", true);
                rows[i].setAttribute("AUpdateAllowed", false);
                rows[i].setAttribute("BUpdateAllowed", true);
            }
            if (rows[i].getAttribute("DocNum") != null) {
                rows[i].setAttribute("UpdateAllowed", true);
                rows[i].setAttribute("AUpdateAllowed", false);
                rows[i].setAttribute("BUpdateAllowed", false);
            }
        }
        OAException.raiseBundledOAException(exceptions);
    }

    public void doDelete() {
        ArrayList exceptions = new ArrayList();
        DeliverableVOImpl vo = this.getDelierableVO1();
        RowSetIterator deleteIter = vo.createRowSetIterator("deleteIter");
        Row[] rows = deleteIter.getFilteredRows("Checked", "Y");
        if (rows.length == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E020", null, 
                                           OAException.ERROR, null));
            OAException.raiseBundledOAException(exceptions);
            return;
        }
        Number projectId = (Number)rows[0].getAttribute("ProjectId");
        ArrayList list = this.getEmpProjectSpec(projectId.stringValue());
        for (int i = 0; i < rows.length; i++) {
            DeliverableVORowImpl dlvRow = (DeliverableVORowImpl)rows[i];
            //            dlvRow.getDeliverableEO().getEntityState();
            //            System.out.println(EntityImpl.STATUS_DEAD);
            //            System.out.println(EntityImpl.STATUS_DELETED);
            //            System.out.println(EntityImpl.STATUS_INITIALIZED);
            //            System.out.println(EntityImpl.STATUS_MODIFIED);
            //            System.out.println(EntityImpl.STATUS_NEW);
            //            System.out.println(EntityImpl.STATUS_UNMODIFIED);
            //            System.out.println(dlvRow.getDeliverableEO().getEntityState());
            //            if (EntityImpl.STATUS_NEW == dlvRow.getDeliverableEO().getEntityState() ) {
            //                System.out.println(123);
            //            }
            if (EntityImpl.STATUS_NEW != 
                dlvRow.getDeliverableEO().getEntityState() && 
                EntityImpl.STATUS_INITIALIZED != 
                dlvRow.getDeliverableEO().getEntityState()) {
                if ("SUBMITED".equals(rows[i].getAttribute("Status"))) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-E001", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    continue;
                }
                if (!list.contains(rows[i].getAttribute("ReleaseSpecialty"))) {
                    exceptions.add(new OAException("CUX", "CUX-PM-E018", null, 
                                                   OAException.ERROR, null));
                    continue;
                }
                if (rows[i].getAttribute("ActualCompletedDate") != null) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-EOO2", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    continue;
                }
                if ((Boolean)rows[i].getAttribute("AccessLevel")) {
                    exceptions.add(new OAException("CUX", "CUX-PM-E023", null, 
                                                   OAException.ERROR, null));
                    continue;
                }
                if (rows[i].getAttribute("DocNum") != null) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-E028", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    continue;
                }
                if (rows[i].getAttribute("ActualCountersignDate") != null || 
                    rows[i].getAttribute("ActualReleaseDate") != null) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-E029", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    continue;
                }
                String dlvId = 
                    ((Number)rows[i].getAttribute("CuxDlvId")).stringValue();
                Number docnumCount = 
                    (Number)this.getSqlValue("SELECT COUNT(0)\n" + 
                                             "FROM   cux_pa_docnum_req_line_t\n" + 
                                             "WHERE  cux_dlv_id = " + dlvId);
                if (docnumCount.intValue() > 0) {
                    MessageToken[] tokens = 
                    { new MessageToken("DLV", rows[i].getAttribute("DocName").toString()) };
                    exceptions.add(new OAException("CUX", "CUX-PM-E030", 
                                                   tokens, OAException.ERROR, 
                                                   null));
                    continue;
                }
            }
            rows[i].remove();
        }
        OAException.raiseBundledOAException(exceptions);
    }

    /**Container's getter for EmpProjectSpecVO1
     */
    public EmpProjectSpecVOImpl getEmpProjectSpecVO1() {
        return (EmpProjectSpecVOImpl)findViewObject("EmpProjectSpecVO1");
    }

    public ViewObject getValidateVO(String sql) {
        if (this.findViewObject("ValidateVO") != null) {
            this.findViewObject("ValidateVO").remove();
        }
        ViewObject vo = this.createViewObjectFromQueryStmt("ValidateVO", sql);
        return vo;
    }

    public void copy() {
        ArrayList exceptions = new ArrayList();
        DeliverableVOImpl vo = this.getDelierableVO1();
        Row[] rows = vo.getFilteredRows("Checked", "Y");
        if (rows.length == 0) {
            exceptions.add(new OAException("CUX", "CUX-PM-E020", null, 
                                           OAException.ERROR, null));
            OAException.raiseBundledOAException(exceptions);
            return;
        }
        for (Row r: rows) {
            Row newRow = vo.createRow();
            String[] attrNames = r.getAttributeNames();
            for (String attrName: attrNames) {
                if ("CuxDlvId".equals(attrName) || 
                    "DeliverableId".equals(attrName) || 
                    "Status".equals(attrName) || 
                    "StatusName".equals(attrName) || 
                    "CreatedBy".equals(attrName) || 
                    "CreationDate".equals(attrName) || 
                    "LastUpdatedBy".equals(attrName) || 
                    "LastUpdateDate".equals(attrName) || 
                    "LastUpdateLogin".equals(attrName) || 
                    "WfItemtype".equals(attrName) || 
                    "WfItemkey".equals(attrName) || 
                    "DocName".equals(attrName) || "DocNum".equals(attrName)) {
                    continue;
                }
                newRow.setAttribute(attrName, r.getAttribute(attrName));
            }
            newRow.setAttribute("Status", "UNAPPROVED");
            newRow.setAttribute("StatusName", "未批准");
            newRow.setAttribute("UpdateAllowed", false);
            newRow.setAttribute("AUpdateAllowed", false);
            newRow.setAttribute("BUpdateAllowed", false);
            newRow.setAttribute("AccessLevel", false);
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRowAtRangeIndex(0, newRow);
            //newRow = r;
        }
    }

    /**Container's getter for DlvCfgVO1
     */
    public DlvCfgVOImpl getDlvCfgVO1() {
        return (DlvCfgVOImpl)findViewObject("DlvCfgVO1");
    }

    public void initDlvCfg(String projectId, String empId) {
        DlvCfgVOImpl cfgVO = this.getDlvCfgVO1();
        cfgVO.setMaxFetchSize(-1);
        cfgVO.setWhereClause(null);
        String whereClause = 
            "project_id = " + projectId + " AND speciality_manager = " + empId;
        cfgVO.setWhereClause(whereClause);
        cfgVO.executeQuery();
    }

    public void doAddCfg(String projectId, String empId) {
        String sql = 
            "SELECT COUNT(0)\n" + "FROM cux_pa_dlv_cfg_t\n" + "WHERE project_id = " + 
            projectId + "\n" + "AND   speciality_manager = " + empId + "\n";
        Number exists = (Number)this.getSqlValue(sql);
        if (exists.intValue() > 0) {
            throw new OAException("您在该项目已设定配置模板，不允许重复设置!");
        }
        DlvCfgVOImpl cfgVO = this.getDlvCfgVO1();
        cfgVO.setMaxFetchSize(0);
        cfgVO.executeQuery();
        if (cfgVO.getRowCount() > 0) {
            throw new OAException("您在该项目已设定配置模板，不允许重复设置!");
        }
        Number pId = null;
        try {
            pId = new Number(projectId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Number eId = null;
        try {
            eId = new Number(empId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Row row = cfgVO.createRow();
        row.setAttribute("DlvCfgId", 
                         getOADBTransaction().getSequenceValue("CUX_PA_DLV_CFG_S"));
        row.setAttribute("ProjectId", pId);
        row.setAttribute("SpecialityManager", eId);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        cfgVO.insertRow(row);
    }

    public void doAssign() {
        DlvCfgVOImpl cfgVO = this.getDlvCfgVO1();
        cfgVO.setMaxFetchSize(0);
        cfgVO.executeQuery();
        if (cfgVO.getRowCount() == 0) {
            throw new OAException("请先配置模板！", OAException.ERROR);
        }
        DeliverableVOImpl dlvVO = this.getDelierableVO1();
        Row[] dlvRows = dlvVO.getFilteredRows("Checked", "Y");
        if (dlvRows.length == 0) {
            throw new OAException("请选择需要分配的交付物!", OAException.ERROR);
        }
        Row cfgRow = cfgVO.first();
        for (Row dlvRow: dlvRows) {
            dlvRow.setAttribute("Designer", cfgRow.getAttribute("Designer"));
            dlvRow.setAttribute("DesignerName", 
                                cfgRow.getAttribute("DesignerName"));
            dlvRow.setAttribute("Checker", cfgRow.getAttribute("Checker"));
            dlvRow.setAttribute("CheckerName", 
                                cfgRow.getAttribute("CheckerName"));
            dlvRow.setAttribute("Verifier", cfgRow.getAttribute("Verifier"));
            dlvRow.setAttribute("VerifierName", 
                                cfgRow.getAttribute("VerifierName"));
            dlvRow.setAttribute("Authorizer", 
                                cfgRow.getAttribute("Authorizer"));
            dlvRow.setAttribute("AuthorizerName", 
                                cfgRow.getAttribute("AuthorizerName"));
        }
    }

    /**Container's getter for SearchPVO1
     */
    public SearchPVOImpl getSearchPVO1() {
        return (SearchPVOImpl)findViewObject("SearchPVO1");
    }

    public void init() {
        SearchPVOImpl pvo = this.getSearchPVO1();
        pvo.setMaxFetchSize(0);
        pvo.executeQuery();
        if (pvo.getRowCount() == 0) {
            pvo.insertRow(pvo.createRow());
        }
    }
}
