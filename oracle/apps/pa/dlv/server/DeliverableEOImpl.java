package cux.oracle.apps.pa.dlv.server;

import com.sun.java.util.collections.ArrayList;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAAttrValException;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OARowValException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAEntityDefImpl;
import oracle.apps.fnd.framework.server.OAEntityImpl;

import oracle.apps.fnd.framework.server.OAExceptionUtils;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;

import oracle.jdbc.OracleTypes;
import oracle.jdbc.oracore.OracleType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeliverableEOImpl extends OAEntityImpl {
    public static final int CUXDLVID = 0;
    public static final int DELIVERABLEID = 1;
    public static final int PROJECTID = 2;
    public static final int STATUS = 3;
    public static final int DOCTYPE = 4;
    public static final int TASKID = 5;
    public static final int DOCNAME = 6;
    public static final int DOCNUM = 7;
    public static final int DESIGNER = 8;
    public static final int CHECKER = 9;
    public static final int VERIFIER = 10;
    public static final int AUTHORIZER = 11;
    public static final int WEIGHTS = 12;
    public static final int SCHEDULECOMPLETEDDATE = 13;
    public static final int ACTUALCOMPLETEDDATE = 14;
    public static final int RELEASEDEPT = 15;
    public static final int RELEASESPECIALTY = 16;
    public static final int ACCEPTSPECIALTY = 17;
    public static final int ATTRIBUTE1 = 18;
    public static final int ATTRIBUTE2 = 19;
    public static final int ATTRIBUTE3 = 20;
    public static final int ATTRIBUTE4 = 21;
    public static final int ATTRIBUTE5 = 22;
    public static final int ATTRIBUTE6 = 23;
    public static final int ATTRIBUTE7 = 24;
    public static final int ATTRIBUTE8 = 25;
    public static final int ATTRIBUTE9 = 26;
    public static final int CREATEDBY = 27;
    public static final int CREATIONDATE = 28;
    public static final int LASTUPDATEDBY = 29;
    public static final int LASTUPDATEDATE = 30;
    public static final int LASTUPDATELOGIN = 31;
    public static final int WFITEMKEY = 32;
    public static final int WFITEMTYPE = 33;
    public static final int ACTUALCOUNTERSIGNDATE = 34;
    public static final int ACTUALRELEASEDATE = 35;
    public static final int DESIGNNODE = 36;
    public static final int HQD = 37;
    public static final int JTD = 38;
    public static final int WJHZD = 39;


    private static OAEntityDefImpl mDefinitionObject;

    /**This is the default constructor (do not remove)
     */
    public DeliverableEOImpl() {
    }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = 
                    (OAEntityDefImpl)EntityDefImpl.findDefObject("cux.oracle.apps.pa.dlv.server.DeliverableEO");
        }
        return mDefinitionObject;
    }

    /**Add attribute defaulting logic in this method.
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);

        OADBTransaction transaction = getOADBTransaction();
        Number dlvId = transaction.getSequenceValue("CUX_PA_DELIVERABLE_S");
        this.setCuxDlvId(dlvId);

    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        if (this.getDeliverableId() != null) {
            String stmt = 
                "BEGIN\n" + "  cux_pa_dlv_pkg.post_delete(x_msg_message => :1, \n" + 
                "  x_msg_status => :2,\n" + 
                "                             p_dlv_id => :3);\n" + "END;";
            OADBTransaction trxn = this.getOADBTransaction();
            CallableStatement cbStmt = trxn.createCallableStatement(stmt, 1);
            try {
                cbStmt.registerOutParameter(1, OracleTypes.VARCHAR);
                cbStmt.registerOutParameter(2, OracleTypes.VARCHAR);
                cbStmt.setInt(3, this.getCuxDlvId().intValue());
                cbStmt.execute();
                cbStmt.close();
                OAExceptionUtils.checkErrors(trxn);
            } catch (SQLException sqle) {
                try {
                    cbStmt.close();
                } catch (SQLException e) {
                }
                throw OAException.wrapperException(sqle);
            }
        }
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();
        String action = (String)this.getOADBTransaction().getValue("Action");
        if ("Save".equals(action)) {
            ArrayList exceptions = new ArrayList();
            if (this.getDocType() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E006"));
            }
            if (this.getTaskId() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E007"));
            }
            if (this.getDocName() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E008"));
            }
            if (this.getDesigner() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E009"));
            }
            if (this.getChecker() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E010"));
            }
            if (this.getVerifier() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E011"));
            }
            /*
            if (this.getAuthorizer() == null) { //Row primary key
                    //Message Application Short Code
                    exceptions.add(new OARowValException(getEntityDef().getFullName(),
                                                         getPrimaryKey(), "CUX",
                                                         "CUX-PM-E012"));
            }
            */
            if (this.getWeights() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E013"));
            }
            if (this.getScheduleCompletedDate() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E014"));
            }
            if (this.getReleaseDept() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E015"));
            }
            if (this.getReleaseSpecialty() == null) { //Row primary key
                //Message Application Short Code
                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                     getPrimaryKey(), "CUX", 
                                                     "CUX-PM-E016"));
            }
            //            if(Date.getCurrentDate().compareTo(this.getScheduleCompletedDate()) > 0)
            //            {
            //                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
            //                                                     getPrimaryKey(), "CUX", 
            //                                                     "CUX-PM-E022"));        
            //            }        
            //    //        if (this.getAcceptSpecialty() == null) { //Row primary key
            //    //                //Message Application Short Code
            //    //                exceptions.add(new OARowValException(getEntityDef().getFullName(), 
            //    //                                                     getPrimaryKey(), "CUX", 
            //    //                                                     "CUX-PM-E017"));
            //    //        }
            OAException.raiseBundledOAException(exceptions);
        }
    }

    /**Gets the attribute value for CuxDlvId, using the alias name CuxDlvId
     */
    public Number getCuxDlvId() {
        return (Number)getAttributeInternal(CUXDLVID);
    }

    /**Sets <code>value</code> as the attribute value for CuxDlvId
     */
    public void setCuxDlvId(Number value) {
        setAttributeInternal(CUXDLVID, value);
    }

    /**Gets the attribute value for DeliverableId, using the alias name DeliverableId
     */
    public Number getDeliverableId() {
        return (Number)getAttributeInternal(DELIVERABLEID);
    }

    /**Sets <code>value</code> as the attribute value for DeliverableId
     */
    public void setDeliverableId(Number value) {
        setAttributeInternal(DELIVERABLEID, value);
    }

    /**Gets the attribute value for ProjectId, using the alias name ProjectId
     */
    public Number getProjectId() {
        return (Number)getAttributeInternal(PROJECTID);
    }

    /**Sets <code>value</code> as the attribute value for ProjectId
     */
    public void setProjectId(Number value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**Gets the attribute value for Status, using the alias name Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**Sets <code>value</code> as the attribute value for Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**Gets the attribute value for DocType, using the alias name DocType
     */
    public String getDocType() {
        return (String)getAttributeInternal(DOCTYPE);
    }

    /**Sets <code>value</code> as the attribute value for DocType
     */
    public void setDocType(String value) {
        setAttributeInternal(DOCTYPE, value);
    }

    /**Gets the attribute value for TaskId, using the alias name TaskId
     */
    public Number getTaskId() {
        return (Number)getAttributeInternal(TASKID);
    }

    /**Sets <code>value</code> as the attribute value for TaskId
     */
    public void setTaskId(Number value) {
        setAttributeInternal(TASKID, value);
    }

    /**Gets the attribute value for DocName, using the alias name DocName
     */
    public String getDocName() {
        return (String)getAttributeInternal(DOCNAME);
    }

    /**Sets <code>value</code> as the attribute value for DocName
     */
    public void setDocName(String value) {
        setAttributeInternal(DOCNAME, value);
    }

    /**Gets the attribute value for DocNum, using the alias name DocNum
     */
    public String getDocNum() {
        return (String)getAttributeInternal(DOCNUM);
    }

    /**Sets <code>value</code> as the attribute value for DocNum
     */
    public void setDocNum(String value) {
        setAttributeInternal(DOCNUM, value);
    }

    /**Gets the attribute value for Designer, using the alias name Designer
     */
    public Number getDesigner() {
        return (Number)getAttributeInternal(DESIGNER);
    }

    /**Sets <code>value</code> as the attribute value for Designer
     */
    public void setDesigner(Number value) {
        setAttributeInternal(DESIGNER, value);
    }

    /**Gets the attribute value for Checker, using the alias name Checker
     */
    public Number getChecker() {
        return (Number)getAttributeInternal(CHECKER);
    }

    /**Sets <code>value</code> as the attribute value for Checker
     */
    public void setChecker(Number value) {
        setAttributeInternal(CHECKER, value);
    }

    /**Gets the attribute value for Verifier, using the alias name Verifier
     */
    public Number getVerifier() {
        return (Number)getAttributeInternal(VERIFIER);
    }

    /**Sets <code>value</code> as the attribute value for Verifier
     */
    public void setVerifier(Number value) {
        setAttributeInternal(VERIFIER, value);
    }

    /**Gets the attribute value for Authorizer, using the alias name Authorizer
     */
    public Number getAuthorizer() {
        return (Number)getAttributeInternal(AUTHORIZER);
    }

    /**Sets <code>value</code> as the attribute value for Authorizer
     */
    public void setAuthorizer(Number value) {
        setAttributeInternal(AUTHORIZER, value);
    }

    /**Gets the attribute value for Weights, using the alias name Weights
     */
    public Number getWeights() {
        return (Number)getAttributeInternal(WEIGHTS);
    }

    /**Sets <code>value</code> as the attribute value for Weights
     */
    public void setWeights(Number value) {
        setAttributeInternal(WEIGHTS, value);
    }

    /**Gets the attribute value for ScheduleCompletedDate, using the alias name ScheduleCompletedDate
     */
    public Date getScheduleCompletedDate() {
        return (Date)getAttributeInternal(SCHEDULECOMPLETEDDATE);
    }

    /**Sets <code>value</code> as the attribute value for ScheduleCompletedDate
     */
    public void setScheduleCompletedDate(Date value) {
        setAttributeInternal(SCHEDULECOMPLETEDDATE, value);
    }

    /**Gets the attribute value for ActualCompletedDate, using the alias name ActualCompletedDate
     */
    public Date getActualCompletedDate() {
        return (Date)getAttributeInternal(ACTUALCOMPLETEDDATE);
    }

    /**Sets <code>value</code> as the attribute value for ActualCompletedDate
     */
    public void setActualCompletedDate(Date value) {
        setAttributeInternal(ACTUALCOMPLETEDDATE, value);
    }

    /**Gets the attribute value for ReleaseDept, using the alias name ReleaseDept
     */
    public Number getReleaseDept() {
        return (Number)getAttributeInternal(RELEASEDEPT);
    }

    /**Sets <code>value</code> as the attribute value for ReleaseDept
     */
    public void setReleaseDept(Number value) {
        setAttributeInternal(RELEASEDEPT, value);
    }

    /**Gets the attribute value for ReleaseSpecialty, using the alias name ReleaseSpecialty
     */
    public String getReleaseSpecialty() {
        return (String)getAttributeInternal(RELEASESPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for ReleaseSpecialty
     */
    public void setReleaseSpecialty(String value) {
        setAttributeInternal(RELEASESPECIALTY, value);
    }

    /**Gets the attribute value for AcceptSpecialty, using the alias name AcceptSpecialty
     */
    public String getAcceptSpecialty() {
        return (String)getAttributeInternal(ACCEPTSPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for AcceptSpecialty
     */
    public void setAcceptSpecialty(String value) {
        if (value != null) {
            ArrayList exceptions = new ArrayList();
            String sql = 
                "SELECT COUNT(0) CNT\n" + "FROM   fnd_lookup_values_vl flvv\n" + 
                "WHERE  flvv.lookup_type = 'ENFI_SPECIALITY'\n" + 
                "AND    flvv.enabled_flag = 'Y'\n" + 
                "AND    flvv.MEANING = :1";
            if (value.indexOf(";") > 0) {
                String specs[] = value.split(";");
                OADBTransaction trxn = this.getOADBTransaction();
                for (int i = 0; i < specs.length; i++) {
                    CallableStatement cbStmt = 
                        trxn.createCallableStatement(sql, 1);
                    int cnt = 0;
                    try {
                        cbStmt.setString(1, specs[i]);
                        cbStmt.execute();
                        for (ResultSet rs = cbStmt.executeQuery(); rs.next(); 
                        ) {
                            cnt = rs.getInt("CNT");
                        }
                        cbStmt.close();
                        if (cnt == 0) {
                            MessageToken[] tokens = 
                            { new MessageToken("SPEC", specs[i]) }; // entity full definition name 
                            // entity object primary key 
                            // message application short name
                            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                                 getPrimaryKey(), 
                                                                 "CUX", 
                                                                 "CUX-PM-E004", 
                                                                 tokens)); // message name 

                        }
                        OAExceptionUtils.checkErrors(trxn);
                    } catch (SQLException sqle) {
                        try {
                            cbStmt.close();
                        } catch (SQLException e) {
                        }
                        throw OAException.wrapperException(sqle);
                    }
                }
            } else {
                OADBTransaction trxn = this.getOADBTransaction();
                CallableStatement cbStmt = 
                    trxn.createCallableStatement(sql, 1);
                int cnt = 0;
                try {
                    cbStmt.setString(1, value);
                    cbStmt.execute();
                    for (ResultSet rs = cbStmt.executeQuery(); rs.next(); ) {
                        cnt = rs.getInt("CNT");
                    }
                    cbStmt.close();
                    if (cnt == 0) {
                        MessageToken[] tokens = 
                        { new MessageToken("SPEC", value) }; // entity full definition name 
                        // entity object primary key 
                        // message application short name
                        exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                             getPrimaryKey(), 
                                                             "CUX", 
                                                             "CUX-PM-E004", 
                                                             tokens)); // message name 

                    }
                    OAExceptionUtils.checkErrors(trxn);
                } catch (SQLException sqle) {
                    try {
                        cbStmt.close();
                    } catch (SQLException e) {
                    }
                    throw OAException.wrapperException(sqle);
                }
            }
            if (exceptions.size() > 0) {
                OAException.raiseBundledOAException(exceptions);
            }
        }
        setAttributeInternal(ACCEPTSPECIALTY, value);
    }

    /**Gets the attribute value for Attribute1, using the alias name Attribute1
     */
    public String getAttribute1() {
        return (String)getAttributeInternal(ATTRIBUTE1);
    }

    /**Sets <code>value</code> as the attribute value for Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**Gets the attribute value for Attribute2, using the alias name Attribute2
     */
    public String getAttribute2() {
        return (String)getAttributeInternal(ATTRIBUTE2);
    }

    /**Sets <code>value</code> as the attribute value for Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**Gets the attribute value for Attribute3, using the alias name Attribute3
     */
    public String getAttribute3() {
        return (String)getAttributeInternal(ATTRIBUTE3);
    }

    /**Sets <code>value</code> as the attribute value for Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**Gets the attribute value for Attribute4, using the alias name Attribute4
     */
    public String getAttribute4() {
        return (String)getAttributeInternal(ATTRIBUTE4);
    }

    /**Sets <code>value</code> as the attribute value for Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**Gets the attribute value for Attribute5, using the alias name Attribute5
     */
    public String getAttribute5() {
        return (String)getAttributeInternal(ATTRIBUTE5);
    }

    /**Sets <code>value</code> as the attribute value for Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**Gets the attribute value for Attribute6, using the alias name Attribute6
     */
    public String getAttribute6() {
        return (String)getAttributeInternal(ATTRIBUTE6);
    }

    /**Sets <code>value</code> as the attribute value for Attribute6
     */
    public void setAttribute6(String value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**Gets the attribute value for Attribute7, using the alias name Attribute7
     */
    public String getAttribute7() {
        return (String)getAttributeInternal(ATTRIBUTE7);
    }

    /**Sets <code>value</code> as the attribute value for Attribute7
     */
    public void setAttribute7(String value) {
        setAttributeInternal(ATTRIBUTE7, value);
    }

    /**Gets the attribute value for Attribute8, using the alias name Attribute8
     */
    public String getAttribute8() {
        return (String)getAttributeInternal(ATTRIBUTE8);
    }

    /**Sets <code>value</code> as the attribute value for Attribute8
     */
    public void setAttribute8(String value) {
        setAttributeInternal(ATTRIBUTE8, value);
    }

    /**Gets the attribute value for Attribute9, using the alias name Attribute9
     */
    public String getAttribute9() {
        return (String)getAttributeInternal(ATTRIBUTE9);
    }

    /**Sets <code>value</code> as the attribute value for Attribute9
     */
    public void setAttribute9(String value) {
        setAttributeInternal(ATTRIBUTE9, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreationDate, using the alias name CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**Sets <code>value</code> as the attribute value for CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }


    /**Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin
     */
    public Number getLastUpdateLogin() {
        return (Number)getAttributeInternal(LASTUPDATELOGIN);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateLogin
     */
    public void setLastUpdateLogin(Number value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case CUXDLVID:
            return getCuxDlvId();
        case DELIVERABLEID:
            return getDeliverableId();
        case PROJECTID:
            return getProjectId();
        case STATUS:
            return getStatus();
        case DOCTYPE:
            return getDocType();
        case TASKID:
            return getTaskId();
        case DOCNAME:
            return getDocName();
        case DOCNUM:
            return getDocNum();
        case DESIGNER:
            return getDesigner();
        case CHECKER:
            return getChecker();
        case VERIFIER:
            return getVerifier();
        case AUTHORIZER:
            return getAuthorizer();
        case WEIGHTS:
            return getWeights();
        case SCHEDULECOMPLETEDDATE:
            return getScheduleCompletedDate();
        case ACTUALCOMPLETEDDATE:
            return getActualCompletedDate();
        case RELEASEDEPT:
            return getReleaseDept();
        case RELEASESPECIALTY:
            return getReleaseSpecialty();
        case ACCEPTSPECIALTY:
            return getAcceptSpecialty();
        case ATTRIBUTE1:
            return getAttribute1();
        case ATTRIBUTE2:
            return getAttribute2();
        case ATTRIBUTE3:
            return getAttribute3();
        case ATTRIBUTE4:
            return getAttribute4();
        case ATTRIBUTE5:
            return getAttribute5();
        case ATTRIBUTE6:
            return getAttribute6();
        case ATTRIBUTE7:
            return getAttribute7();
        case ATTRIBUTE8:
            return getAttribute8();
        case ATTRIBUTE9:
            return getAttribute9();
        case CREATEDBY:
            return getCreatedBy();
        case CREATIONDATE:
            return getCreationDate();
        case LASTUPDATEDBY:
            return getLastUpdatedBy();
        case LASTUPDATEDATE:
            return getLastUpdateDate();
        case LASTUPDATELOGIN:
            return getLastUpdateLogin();
        case WFITEMKEY:
            return getWfItemkey();
        case WFITEMTYPE:
            return getWfItemtype();
        case ACTUALCOUNTERSIGNDATE:
            return getActualCountersignDate();
        case ACTUALRELEASEDATE:
            return getActualReleaseDate();
        case DESIGNNODE:
            return getDesignNode();
        case HQD:
            return getHqd();
        case JTD:
            return getJtd();
        case WJHZD:
            return getWjhzd();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case CUXDLVID:
            setCuxDlvId((Number)value);
            return;
        case DELIVERABLEID:
            setDeliverableId((Number)value);
            return;
        case PROJECTID:
            setProjectId((Number)value);
            return;
        case STATUS:
            setStatus((String)value);
            return;
        case DOCTYPE:
            setDocType((String)value);
            return;
        case TASKID:
            setTaskId((Number)value);
            return;
        case DOCNAME:
            setDocName((String)value);
            return;
        case DOCNUM:
            setDocNum((String)value);
            return;
        case DESIGNER:
            setDesigner((Number)value);
            return;
        case CHECKER:
            setChecker((Number)value);
            return;
        case VERIFIER:
            setVerifier((Number)value);
            return;
        case AUTHORIZER:
            setAuthorizer((Number)value);
            return;
        case WEIGHTS:
            setWeights((Number)value);
            return;
        case SCHEDULECOMPLETEDDATE:
            setScheduleCompletedDate((Date)value);
            return;
        case ACTUALCOMPLETEDDATE:
            setActualCompletedDate((Date)value);
            return;
        case RELEASEDEPT:
            setReleaseDept((Number)value);
            return;
        case RELEASESPECIALTY:
            setReleaseSpecialty((String)value);
            return;
        case ACCEPTSPECIALTY:
            setAcceptSpecialty((String)value);
            return;
        case ATTRIBUTE1:
            setAttribute1((String)value);
            return;
        case ATTRIBUTE2:
            setAttribute2((String)value);
            return;
        case ATTRIBUTE3:
            setAttribute3((String)value);
            return;
        case ATTRIBUTE4:
            setAttribute4((String)value);
            return;
        case ATTRIBUTE5:
            setAttribute5((String)value);
            return;
        case ATTRIBUTE6:
            setAttribute6((String)value);
            return;
        case ATTRIBUTE7:
            setAttribute7((String)value);
            return;
        case ATTRIBUTE8:
            setAttribute8((String)value);
            return;
        case ATTRIBUTE9:
            setAttribute9((String)value);
            return;
        case CREATEDBY:
            setCreatedBy((Number)value);
            return;
        case CREATIONDATE:
            setCreationDate((Date)value);
            return;
        case LASTUPDATEDBY:
            setLastUpdatedBy((Number)value);
            return;
        case LASTUPDATEDATE:
            setLastUpdateDate((Date)value);
            return;
        case LASTUPDATELOGIN:
            setLastUpdateLogin((Number)value);
            return;
        case WFITEMKEY:
            setWfItemkey((String)value);
            return;
        case WFITEMTYPE:
            setWfItemtype((String)value);
            return;
        case ACTUALCOUNTERSIGNDATE:
            setActualCountersignDate((Date)value);
            return;
        case ACTUALRELEASEDATE:
            setActualReleaseDate((Date)value);
            return;
        case DESIGNNODE:
            setDesignNode((String)value);
            return;
        case HQD:
            setHqd((String)value);
            return;
        case JTD:
            setJtd((String)value);
            return;
        case WJHZD:
            setWjhzd((String)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**Gets the attribute value for WfItemkey, using the alias name WfItemkey
     */
    public String getWfItemkey() {
        return (String)getAttributeInternal(WFITEMKEY);
    }

    /**Sets <code>value</code> as the attribute value for WfItemkey
     */
    public void setWfItemkey(String value) {
        setAttributeInternal(WFITEMKEY, value);
    }

    /**Gets the attribute value for WfItemtype, using the alias name WfItemtype
     */
    public String getWfItemtype() {
        return (String)getAttributeInternal(WFITEMTYPE);
    }

    /**Sets <code>value</code> as the attribute value for WfItemtype
     */
    public void setWfItemtype(String value) {
        setAttributeInternal(WFITEMTYPE, value);
    }

    /**Gets the attribute value for ActualCountersignDate, using the alias name ActualCountersignDate
     */
    public Date getActualCountersignDate() {
        return (Date)getAttributeInternal(ACTUALCOUNTERSIGNDATE);
    }

    /**Sets <code>value</code> as the attribute value for ActualCountersignDate
     */
    public void setActualCountersignDate(Date value) {
        setAttributeInternal(ACTUALCOUNTERSIGNDATE, value);
    }

    /**Gets the attribute value for ActualReleaseDate, using the alias name ActualReleaseDate
     */
    public Date getActualReleaseDate() {
        return (Date)getAttributeInternal(ACTUALRELEASEDATE);
    }

    /**Sets <code>value</code> as the attribute value for ActualReleaseDate
     */
    public void setActualReleaseDate(Date value) {
        setAttributeInternal(ACTUALRELEASEDATE, value);
    }

    /**Gets the attribute value for DesignNode, using the alias name DesignNode
     */
    public String getDesignNode() {
        return (String)getAttributeInternal(DESIGNNODE);
    }

    /**Sets <code>value</code> as the attribute value for DesignNode
     */
    public void setDesignNode(String value) {
        setAttributeInternal(DESIGNNODE, value);
    }

    /**Gets the attribute value for Hqd, using the alias name Hqd
     */
    public String getHqd() {
        return (String)getAttributeInternal(HQD);
    }

    /**Sets <code>value</code> as the attribute value for Hqd
     */
    public void setHqd(String value) {
        setAttributeInternal(HQD, value);
    }

    /**Gets the attribute value for Jtd, using the alias name Jtd
     */
    public String getJtd() {
        return (String)getAttributeInternal(JTD);
    }

    /**Sets <code>value</code> as the attribute value for Jtd
     */
    public void setJtd(String value) {
        setAttributeInternal(JTD, value);
    }

    /**Gets the attribute value for Wjhzd, using the alias name Wjhzd
     */
    public String getWjhzd() {
        return (String)getAttributeInternal(WJHZD);
    }

    /**Sets <code>value</code> as the attribute value for Wjhzd
     */
    public void setWjhzd(String value) {
        setAttributeInternal(WJHZD, value);
    }

    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(Number cuxDlvId) {
        return new Key(new Object[] { cuxDlvId });
    }
}
