package cux.oracle.apps.pa.ds.server;

import cux.oracle.apps.pa.util.ApplicationModuleUtil;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.UUID;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAExceptionUtils;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DlvScheduleAMImpl extends ApplicationModuleUtil {
    /**This is the default constructor (do not remove)
     */
    String SMT_AME_STARTUP = 
        "BEGIN\n" + "  cux_ame_wkf_pkg.startup_workflow(transaction_type => :1,\n" + 
        "                                   transaction_id => :2,\n" + 
        "                                   transaction_number => :3,\n" + 
        "                                   mod_pkg_name => :4);\n" + "END;";
    String SMT_STARTUP_WORKFLOW = 
        "BEGIN\n" + "  cux_pa_dlv_schedule_pkg.startup_workflow(p_guid => :1);\n" + 
        "END;";

    public DlvScheduleAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("cux.oracle.apps.pa.ds.server", 
                                             "DlvScheduleAMLocal");
    }

    /**Container's getter for DlvScheduleSpecVO1
     */
    public DlvScheduleSpecVOImpl getDlvScheduleSpecVO1() {
        return (DlvScheduleSpecVOImpl)findViewObject("DlvScheduleSpecVO1");
    }

    /**Container's getter for DlvScheduleVO1
     */
    public DlvScheduleVOImpl getDlvScheduleVO1() {
        return (DlvScheduleVOImpl)findViewObject("DlvScheduleVO1");
    }

    /**Container's getter for SpecialityVO1
     */
    public SpecialityVOImpl getSpecialityVO1() {
        return (SpecialityVOImpl)findViewObject("SpecialityVO1");
    }

    public void init() {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        scheduleVO.setMaxFetchSize(0);
        scheduleVO.executeQuery();
        DsPVOImpl pvo = this.getDsPVO1();
        pvo.setMaxFetchSize(0);
        pvo.executeQuery();
        if (pvo.getRowCount() == 0) {
            Row row = pvo.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            pvo.insertRow(row);
        }
    }

    public void buildScheduleSpec(String projectId, String taskId) {
        String buildStmt = 
            "BEGIN\n" + "  cux_pa_dlv_schedule_pkg.build_schedule_spec(p_project_id => :1,\n" + 
            "                                              p_task_id => :2);\n" + 
            "END;";
        OADBTransaction trxn = this.getOADBTransaction();
        CallableStatement cbStmt = trxn.createCallableStatement(buildStmt, 1);
        try {
            cbStmt.setInt(1, Integer.valueOf(projectId));
            cbStmt.setInt(2, Integer.valueOf(taskId));
            cbStmt.execute();
            cbStmt.close();
            OAExceptionUtils.checkErrors(trxn);
        } catch (SQLException sqle) {
            try {
                cbStmt.close();
            } catch (SQLException e) {
            }
            throw OAException.wrapperException(sqle);
        }
        DlvScheduleSpecVOImpl specVO = this.getDlvScheduleSpecVO1();
        specVO.setWhereClause(null);
        specVO.setMaxFetchSize(-1);
        specVO.setWhereClause("project_id = " + projectId + " AND task_id = " + 
                              taskId);
        specVO.executeQuery();
    }

    public void updateSpec() {
        DlvScheduleSpecVOImpl specVO = this.getDlvScheduleSpecVO1();
        Row[] rows = specVO.getFilteredRows("SelectedFlag", "Y");
        for (Row row: rows) {
            row.setAttribute("UpdateAllewed", false);
        }
    }

    public void addSpec(String projectId, String taskId) {
        DlvScheduleSpecVOImpl specVO = this.getDlvScheduleSpecVO1();
        DlvScheduleSpecVORowImpl specRow = 
            (DlvScheduleSpecVORowImpl)specVO.createRow();
        specRow.setScheduleSpecId(getOADBTransaction().getSequenceValue("cux_pa_dlv_schedule_spec_s"));
        Number projectid = null;
        try {
            projectid = new Number(projectId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Number taskid = null;
        try {
            taskid = new Number(taskId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        specRow.setProjectId(projectid);
        specRow.setTaskId(taskid);
        specRow.setNewRowState(Row.STATUS_INITIALIZED);
        specVO.insertRow(specRow);
    }

    /**Container's getter for DsNodeTypeVO1
     */
    public DsNodeTypeVOImpl getDsNodeTypeVO1() {
        return (DsNodeTypeVOImpl)findViewObject("DsNodeTypeVO1");
    }

    /**Container's getter for DsPVO1
     */
    public DsPVOImpl getDsPVO1() {
        return (DsPVOImpl)findViewObject("DsPVO1");
    }

    /**Container's getter for DsTemplateVO1
     */
    public DsTemplateVOImpl getDsTemplateVO1() {
        return (DsTemplateVOImpl)findViewObject("DsTemplateVO1");
    }

    public void initTemplateVO(String projectId, String taskId) {
        DsTemplateVOImpl templateVO = this.getDsTemplateVO1();
        templateVO.setWhereClause(null);
        templateVO.setWhereClauseParams(null);
        templateVO.setMaxFetchSize(-1);
        Number ProjectId = null;
        try {
            ProjectId = new Number(projectId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Number TaskId = null;
        try {
            TaskId = new Number(taskId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        templateVO.setWhereClauseParam(0, ProjectId);
        templateVO.setWhereClauseParam(1, TaskId);
        //templateVO.setpprojectid(ProjectId);
        //templateVO.setptaskid(TaskId);
        templateVO.executeQuery();
    }

    public void doCopyFromTemplate() {
        DsTemplateVOImpl templateVO = this.getDsTemplateVO1();
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        DsPVOImpl pvo = this.getDsPVO1();
        Row pvoRow = pvo.first();
        Row[] templateRows = templateVO.getFilteredRows("SelectedFlag", "Y");
        for (Row templateRow: templateRows) {
            DlvScheduleVORowImpl scheduleRow = 
                (DlvScheduleVORowImpl)scheduleVO.createRow();
            scheduleRow.setScheduleId(this.getOADBTransaction().getSequenceValue("cux_pa_dlv_schedule_s"));
            scheduleRow.setProjectId((Number)templateRow.getAttribute("ProjectId"));
            scheduleRow.setApproveStatus("UNAPPROVED");
            scheduleRow.setTaskId((Number)templateRow.getAttribute("TaskId"));
            scheduleRow.setTaskName((String)pvoRow.getAttribute("TaskName"));
            scheduleRow.setNodeType((String)templateRow.getAttribute("NodeType"));
            scheduleRow.setDesignNode((String)templateRow.getAttribute("NodeName"));
            scheduleRow.setReleaseSpecialty((String)templateRow.getAttribute("ReleaseSpecialty"));
            scheduleRow.setAcceptSpecialty((String)templateRow.getAttribute("AcceptSpecialty"));
            scheduleRow.setNewRowState(Row.STATUS_INITIALIZED);
            scheduleVO.last();
            scheduleVO.next();
            scheduleVO.insertRow(scheduleRow);
        }
    }

    public void doUpdateSchedule() {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        Row[] selectedRows = scheduleVO.getFilteredRows("SelectedFlag", "Y");
        for (Row row: selectedRows) {
            if ("DAPPROVING".equals(row.getAttribute("ApproveStatus")) || 
                "MAPPROVING".equals(row.getAttribute("ApproveStatus"))) {
                throw new OAException("该交付物计划正在审批中，无法修改！", OAException.ERROR);
            }
            if ("MAPPROVED".equals(row.getAttribute("ApproveStatus")) && 
                row.getAttribute("CuxDlvId") != null) {
                String sql = 
                    "SELECT COUNT(0)\n" + "FROM   cux_pa_deliverable_t pdt\n" + 
                    "WHERE  (pdt.status = 'SUBMITED' OR\n" + 
                    "       (pdt.actual_completed_date IS NOT NULL AND pdt.status = 'APPROVED'))\n" + 
                    "AND    pdt.cux_dlv_id = " + 
                    ((Number)row.getAttribute("CuxDlvId")).intValue();
                Number updateAllowed = (Number)this.getSqlValue(sql);
                if (updateAllowed.intValue() > 0) {
                    throw new OAException("该进度计划正在交付物编制界面处理中,无法更新!", 
                                          OAException.ERROR);
                }
            }
            row.setAttribute("UpdateAllewed", false);
        }
    }

    public void doDeleteSchedule() {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        Row[] selectedRows = scheduleVO.getFilteredRows("SelectedFlag", "Y");
        int deleteAllowFlag;
        for (Row row: selectedRows) {
            if ("DAPPROVING".equals(row.getAttribute("ApproveStatus")) || 
                "MAPPROVING".equals(row.getAttribute("ApproveStatus"))) {
                throw new OAException("该交付物计划正在审批中，无法删除！", OAException.ERROR);
            }
            Number scheduleId = (Number)row.getAttribute("ScheduleId");
            String checkStmt = 
                "BEGIN\n" + "  cux_pa_dlv_schedule_pkg.check_related_delete(p_schedule_id => :1,\n" + 
                "                                               x_delete_allow_flag => :2);\n" + 
                "END;";
            OADBTransaction trxn = this.getOADBTransaction();
            CallableStatement cbStmt = 
                trxn.createCallableStatement(checkStmt, 1);
            try {
                cbStmt.setInt(1, scheduleId.intValue());
                cbStmt.registerOutParameter(2, Types.INTEGER);
                cbStmt.execute();
                deleteAllowFlag = cbStmt.getInt(2);
                cbStmt.close();
                OAExceptionUtils.checkErrors(trxn);
            } catch (SQLException sqle) {
                try {
                    cbStmt.close();
                } catch (SQLException e) {
                }
                throw OAException.wrapperException(sqle);
            }
            if (deleteAllowFlag == 0) {
                throw new OAException("该进度计划正在交付物编制界面处理中,无法删除!", 
                                      OAException.ERROR);
            }
            row.remove();
        }
    }

    public void doAddSchedule(String projectId, String taskId) {
        DsPVOImpl pvo = this.getDsPVO1();
        Row pvoRow = pvo.first();
        Number ProjectId = null;
        try {
            ProjectId = new Number(projectId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Number TaskId = null;
        try {
            TaskId = new Number(taskId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        Row row = scheduleVO.createRow();
        row.setAttribute("ScheduleId", 
                         this.getOADBTransaction().getSequenceValue("cux_pa_dlv_schedule_s"));
        row.setAttribute("ProjectId", ProjectId);
        row.setAttribute("TaskId", TaskId);
        row.setAttribute("ApproveStatus", "UNAPPROVED");
        row.setAttribute("TaskName", (String)pvoRow.getAttribute("TaskName"));
        row.setAttribute("SelectedFlag", "N");
        row.setAttribute("UpdateAllewed", false);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        scheduleVO.insertRow(row);
    }

    public void initDlvScheduleVO(String projectId, String taskId) {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        scheduleVO.setMaxFetchSize(-1);
        scheduleVO.setWhereClause(null);
        scheduleVO.setWhereClause("project_id = " + projectId + 
                                  " AND task_id = " + taskId);
        scheduleVO.executeQuery();
    }

    public void submitVerify() {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        Row[] rows = scheduleVO.getFilteredRows("SelectedFlag", "Y");
        if (rows.length == 0) {
            return;
        }
        String guid = 
            this.getOADBTransaction().getSequenceValue("CUX_PA_DS_APPRV_S").stringValue();
        for (Row row: rows) {
            String status = (String)row.getAttribute("ApproveStatus");
            if (!"UNAPPROVED".equals(status)) {
                return;
            }
            row.setAttribute("ApproveStatus", "DAPPROVING");
            row.setAttribute("Attribute1", guid);
        }
        OADBTransaction trxn = getOADBTransaction();
        trxn.commit();
        CallableStatement cbStmt = 
            trxn.createCallableStatement(SMT_AME_STARTUP, 1);
        try {
            cbStmt.setString(1, "CUXPADSDAPPRV");
            cbStmt.setString(2, guid);
            cbStmt.setString(3, guid);
            cbStmt.setString(4, "cux_pa_dlv_schedule_pkg");
            cbStmt.execute();
            cbStmt.close();
            OAExceptionUtils.checkErrors(trxn);
        } catch (SQLException sqle) {
            try {
                cbStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            throw OAException.wrapperException(sqle);
        }
        trxn.commit();
        throw new OAException("CUX", "CUX-PM-M002", null, 
                              OAException.INFORMATION, null);
    }

    public void submitApprove() {
        DlvScheduleVOImpl scheduleVO = this.getDlvScheduleVO1();
        Row[] rows = scheduleVO.getFilteredRows("SelectedFlag", "Y");
        if (rows.length == 0) {
            return;
        }
        String guid = 
            this.getOADBTransaction().getSequenceValue("CUX_PA_DS_APPRV_S").stringValue();
        for (Row row: rows) {
            String status = (String)row.getAttribute("ApproveStatus");
            if (!"DAPPROVED".equals(status)) {
                continue;
            }
            row.setAttribute("ApproveStatus", "MAPPROVING");
            row.setAttribute("Attribute2", guid);
        }
        OADBTransaction trxn = getOADBTransaction();
        trxn.commit();
        CallableStatement cbStmt = 
            trxn.createCallableStatement(SMT_STARTUP_WORKFLOW, 1);
        try {
            cbStmt.setString(1, guid);
            cbStmt.execute();
            cbStmt.close();
            OAExceptionUtils.checkErrors(trxn);
        } catch (SQLException sqle) {
            try {
                cbStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            throw OAException.wrapperException(sqle);
        }
        trxn.commit();
        throw new OAException("CUX", "CUX-PM-M002", null, 
                              OAException.INFORMATION, null);

    }

    /**Container's getter for DsSummaryVO1
     */
    public DsSummaryVOImpl getDsSummaryVO1() {
        return (DsSummaryVOImpl)findViewObject("DsSummaryVO1");
    }

    /**Container's getter for DsStatus1
     */
    public DsStatusImpl getDsStatus1() {
        return (DsStatusImpl)findViewObject("DsStatus1");
    }

    public void searchSummary(String projectId, String status) {
        DsSummaryVOImpl summaryVO = this.getDsSummaryVO1();
        String sql = 
            "SELECT DISTINCT a.project_id\n" + "               ,b.proj_element_id task_id\n" + 
            "               ,a.segment1 project_num\n" + 
            "               ,a.name project_name\n" + 
            "               ,b.element_number task_num\n" + 
            "               ,b.name task_name\n" + 
            "               ,d.scheduled_start_date\n" + 
            "               ,d.scheduled_finish_date\n" + 
            "               ,nvl(d.actual_start_date, d.scheduled_start_date) actual_start_date\n" + 
            "               ,cux_pa_dlv_schedule_pkg.get_actual_completion_date(cux_pa_dlv_schedule_pkg.get_ds_last_node(pds.project_id,\n" + 
            "                                                                                                            pds.task_id)) actual_completion_date\n" + 
            "               ,pdst.first_release_date\n" + 
            "               ,MAX(pds.last_update_date) over(PARTITION BY pds.project_id, pds.task_id) last_update_date\n" + 
            "               ,pdst.update_count\n" + 
            "               ,listagg(pds.schedule_desc, ';') within GROUP(ORDER BY pds.schedule_id) over(PARTITION BY pds.project_id, pds.task_id) schedule_desc\n" + 
            "               ,cux_pa_util_pkg.get_proj_element_phase(b.proj_element_id) phase\n" + 
            "               ,pdst.status\n" + 
            "               ,cux_common_pkg.get_lookup_meaning('CUX_PA_DS_SUMMARY_STATUS',\n" + 
            "                                                  pdst.status) status_name\n" + 
            "FROM   pa_projects_all            a\n" + 
            "      ,pa_proj_elements           b\n" + 
            "      ,pa_proj_element_versions   c\n" + 
            "      ,pa_proj_elem_ver_schedule  d\n" + 
            "      ,pa_proj_elem_ver_structure stc\n" + 
            "      ,pa_task_types              ptt\n" + 
            "      ,cux_pa_dlv_schedule_t      pds\n" + 
            "      ,cux_pa_ds_summary_t        pdst\n" + 
            "WHERE  a.project_id = b.project_id\n" + 
            "AND    b.project_id = c.project_id\n" + 
            "AND    b.proj_element_id = c.proj_element_id\n" + 
            "AND    b.object_type = 'PA_TASKS'\n" + 
            "AND    c.project_id = d.project_id(+)\n" + 
            "AND    c.element_version_id = d.element_version_id(+)\n" + 
            "AND    c.parent_structure_version_id = stc.element_version_id\n" + 
            "AND    stc.latest_eff_published_flag = 'Y'\n" + 
            "AND    b.type_id = ptt.task_type_id\n" + 
            "AND    pds.project_id = a.project_id\n" + 
            "AND    pds.task_id = b.proj_element_id\n" + 
            "AND    pdst.project_id = a.project_id\n" + 
            "AND    pdst.task_id = b.proj_element_id\n" + 
            "AND    cux_pa_dlv_schedule_pkg.get_ds_security(pds.schedule_id) = 1";
        summaryVO.setQuery(sql);
        summaryVO.setMaxFetchSize(-1);
        summaryVO.setWhereClause(null);
        summaryVO.setWhereClause("1=1");
        if (projectId != null && !"".equals(projectId)) {
            summaryVO.addWhereClause(" AND project_id = " + projectId);
        }
        if (status != null && !"".equals(status)) {
            summaryVO.addWhereClause(" AND status = '" + status + "'");
        }
        summaryVO.executeQuery();
    }

    /**Container's getter for QueryModeVO1
     */
    public QueryModeVOImpl getQueryModeVO1() {
        return (QueryModeVOImpl)findViewObject("QueryModeVO1");
    }

    /**Container's getter for ProjectLovVO1  
     */
    public ProjectLovVOImpl getProjectLovVO1() {
        return (ProjectLovVOImpl)findViewObject("ProjectLovVO1");
    }

    public void initProjectLovVO(String sql) {
        ProjectLovVOImpl projectLovVO = this.getProjectLovVO1();
        if (sql != null && !"".equals(sql)) {
            if ("NA".equals(sql)) {
                projectLovVO.setWhereClause(null);
                projectLovVO.setWhereClause("1=2");
            } else {
                projectLovVO.setWhereClause(null);
                projectLovVO.setQuery(sql);
            }
        }
    }

    public void initDSFromSearch(String projectId, String taskId) {
        String sql = 
            "SELECT ppa.project_id\n" + "      ,ppa.segment1\n" + "      ,ppa.name project_name\n" + 
            "      ,ppc.code_description\n" + 
            "FROM   pa_projects_all      ppa\n" + 
            "      ,pa_project_classes_v ppc\n" + 
            "WHERE  ppa.template_flag = 'N'\n" + 
            "AND    ppa.project_id = ppc.project_id\n" + 
            "AND    ppc.class_category = '项目所属部门'\n" + 
            "AND    ppa.project_id = " + projectId;
        String taskSql = 
            "SELECT b.proj_element_id task_id\n" + "      ,b.name            task_name\n" + 
            "      ,b.project_id\n" + 
            "      ,b.element_number  task_number\n" + 
            "      ,d.scheduled_start_date\n" + 
            "      ,d.scheduled_finish_date\n" + 
            "FROM   pa_projects_all            a\n" + 
            "      ,pa_proj_elements           b\n" + 
            "      ,pa_proj_element_versions   c\n" + 
            "      ,pa_proj_elem_ver_schedule  d\n" + 
            "      ,pa_proj_elem_ver_structure stc\n" + 
            "      ,pa_task_types              ptt\n" + 
            "WHERE  a.project_id = b.project_id\n" + 
            "AND    b.project_id = c.project_id\n" + 
            "AND    b.proj_element_id = c.proj_element_id\n" + 
            "AND    b.object_type = 'PA_TASKS'\n" + 
            "AND    c.project_id = d.project_id(+)\n" + 
            "AND    c.element_version_id = d.element_version_id(+)\n" + 
            "AND    c.parent_structure_version_id = stc.element_version_id\n" + 
            "AND    stc.latest_eff_published_flag = 'Y'\n" + 
            "AND    b.type_id = ptt.task_type_id\n" + 
            "AND    b.proj_element_id = " + taskId;
        DsPVOImpl pvo = this.getDsPVO1();
        pvo.setMaxFetchSize(0);
        pvo.executeQuery();
        if (pvo.getRowCount() == 0) {
            Row row = pvo.createRow();
            //
            ViewObject vo = this.findViewObject("QueryVO");
            if (vo != null) {
                vo.remove();
            }
            vo = this.createViewObjectFromQueryStmt("QueryVO", sql);
            vo.setMaxFetchSize(-1);
            vo.executeQuery();
            Row queryRow = vo.first();
            if (queryRow != null) {
                row.setAttribute("ProjectId", 
                                 queryRow.getAttribute("PROJECT_ID"));
                //row.setAttribute("TaskId",queryRow.getAttribute("ProjectId"));
                row.setAttribute("ProjectNum", 
                                 queryRow.getAttribute("SEGMENT1"));
                row.setAttribute("ProjectName", 
                                 queryRow.getAttribute("PROJECT_NAME"));
                row.setAttribute("ProjectDept", 
                                 queryRow.getAttribute("CODE_DESCRIPTION"));
                //row.setAttribute("TaskNum",queryRow.getAttribute("ProjectId"));
                //row.setAttribute("TaskName",queryRow.getAttribute("ProjectId"));
            }
            vo.remove();
            vo = this.createViewObjectFromQueryStmt("QueryVO", taskSql);
            vo.setMaxFetchSize(-1);
            vo.executeQuery();
            Row queryTaskRow = vo.first();
            if (queryTaskRow != null) {
                row.setAttribute("TaskId", 
                                 queryTaskRow.getAttribute("TASK_ID"));
                row.setAttribute("TaskNum", 
                                 queryTaskRow.getAttribute("TASK_NUMBER"));
                row.setAttribute("TaskName", 
                                 queryTaskRow.getAttribute("TASK_NAME"));
                row.setAttribute("ScheduledStartDate", 
                                 queryTaskRow.getAttribute("SCHEDULED_START_DATE"));
                row.setAttribute("ScheduledFinishDate", 
                                 queryTaskRow.getAttribute("SCHEDULED_FINISH_DATE"));
            }
            //
            row.setNewRowState(Row.STATUS_INITIALIZED);
            pvo.insertRow(row);
        }
        buildScheduleSpec(projectId, taskId);
        initDlvScheduleVO(projectId, taskId);
    }

    public void doSearchTQ() {
        DsSummaryVOImpl summaryVO = this.getDsSummaryVO1();
        summaryVO.setWhereClause(null);
        String sql = 
            "SELECT v.project_id,\n" + "       v.task_id,\n" + "       v.project_num,\n" + 
            "       v.project_name,\n" + "       v.task_num,\n" + 
            "       v.task_name,\n" + "       v.scheduled_start_date,\n" + 
            "       v.scheduled_finish_date,\n" + 
            "       v.actual_start_date,\n" + 
            "       v.actual_completion_date,\n" + 
            "       v.first_release_date,\n" + "       v.last_update_date,\n" + 
            "       v.update_count,\n" + "       v.schedule_desc,\n" + 
            "       v.phase,\n" + "       v.status,\n" + 
            "       v.status_name,\n" + "       v.status_readonly\n" + 
            "  FROM cux_pa_ds_summary_v v\n" + 
            " where cux_pa_dlv_schedule_pkg.istq(v.project_id, v.task_id) = 1\n";
        summaryVO.setQuery(sql);
        summaryVO.setMaxFetchSize(-1);
        summaryVO.executeQuery();
    }

    public void doSearchDQ() {
        DsSummaryVOImpl summaryVO = this.getDsSummaryVO1();
        summaryVO.setWhereClause(null);
        String sql = 
            "SELECT v.project_id,\n" + "       v.task_id,\n" + "       v.project_num,\n" + 
            "       v.project_name,\n" + "       v.task_num,\n" + 
            "       v.task_name,\n" + "       v.scheduled_start_date,\n" + 
            "       v.scheduled_finish_date,\n" + 
            "       v.actual_start_date,\n" + 
            "       v.actual_completion_date,\n" + 
            "       v.first_release_date,\n" + "       v.last_update_date,\n" + 
            "       v.update_count,\n" + "       v.schedule_desc,\n" + 
            "       v.phase,\n" + "       v.status,\n" + 
            "       v.status_name,\n" + "       v.status_readonly\n" + 
            "  FROM cux_pa_ds_summary_v v\n" + 
            " where cux_pa_dlv_schedule_pkg.isdq(v.project_id, v.task_id) = 1\n";
        summaryVO.setQuery(sql);
        summaryVO.setMaxFetchSize(-1);
        summaryVO.executeQuery();
    }

    public void deleteSpec() {
        DlvScheduleSpecVOImpl specVO = this.getDlvScheduleSpecVO1();
        Row[] rows = specVO.getFilteredRows("SelectedFlag", "Y");
        for (Row row: rows) {
            row.remove();
        }
    }
}
