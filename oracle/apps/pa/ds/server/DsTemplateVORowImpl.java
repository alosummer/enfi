package cux.oracle.apps.pa.ds.server;

import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DsTemplateVORowImpl extends OAViewRowImpl {
    public static final int SELECTEDFLAG = 0;
    public static final int PROJECTID = 1;
    public static final int TASKID = 2;
    public static final int TEMPLATENAME = 3;
    public static final int NODETYPE = 4;
    public static final int NODENAME = 5;
    public static final int RELEASESPECIALTY = 6;
    public static final int ACCEPTSPECIALTY = 7;

    /**This is the default constructor (do not remove)
     */
    public DsTemplateVORowImpl() {
    }

    /**Gets the attribute value for the calculated attribute SelectedFlag
     */
    public String getSelectedFlag() {
        return (String)getAttributeInternal(SELECTEDFLAG);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute SelectedFlag
     */
    public void setSelectedFlag(String value) {
        populateAttribute(SELECTEDFLAG, value);
        //setAttributeInternal(SELECTEDFLAG, value);
    }

    /**Gets the attribute value for the calculated attribute NodeType
     */
    public String getNodeType() {
        return (String)getAttributeInternal(NODETYPE);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute NodeType
     */
    public void setNodeType(String value) {
        setAttributeInternal(NODETYPE, value);
    }

    /**Gets the attribute value for the calculated attribute ReleaseSpecialty
     */
    public String getReleaseSpecialty() {
        return (String)getAttributeInternal(RELEASESPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ReleaseSpecialty
     */
    public void setReleaseSpecialty(String value) {
        setAttributeInternal(RELEASESPECIALTY, value);
    }

    /**Gets the attribute value for the calculated attribute AcceptSpecialty
     */
    public String getAcceptSpecialty() {
        return (String)getAttributeInternal(ACCEPTSPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute AcceptSpecialty
     */
    public void setAcceptSpecialty(String value) {
        setAttributeInternal(ACCEPTSPECIALTY, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case SELECTEDFLAG:
            return getSelectedFlag();
        case PROJECTID:
            return getProjectId();
        case TASKID:
            return getTaskId();
        case TEMPLATENAME:
            return getTemplateName();
        case NODETYPE:
            return getNodeType();
        case NODENAME:
            return getNodeName();
        case RELEASESPECIALTY:
            return getReleaseSpecialty();
        case ACCEPTSPECIALTY:
            return getAcceptSpecialty();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case SELECTEDFLAG:
            setSelectedFlag((String)value);
            return;
        case PROJECTID:
            setProjectId((Number)value);
            return;
        case TASKID:
            setTaskId((Number)value);
            return;
        case TEMPLATENAME:
            setTemplateName((String)value);
            return;
        case NODETYPE:
            setNodeType((String)value);
            return;
        case NODENAME:
            setNodeName((String)value);
            return;
        case RELEASESPECIALTY:
            setReleaseSpecialty((String)value);
            return;
        case ACCEPTSPECIALTY:
            setAcceptSpecialty((String)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }

    /**Gets the attribute value for the calculated attribute ProjectId
     */
    public Number getProjectId() {
        return (Number)getAttributeInternal(PROJECTID);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute ProjectId
     */
    public void setProjectId(Number value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**Gets the attribute value for the calculated attribute TaskId
     */
    public Number getTaskId() {
        return (Number)getAttributeInternal(TASKID);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute TaskId
     */
    public void setTaskId(Number value) {
        setAttributeInternal(TASKID, value);
    }

    /**Gets the attribute value for the calculated attribute TemplateName
     */
    public String getTemplateName() {
        return (String)getAttributeInternal(TEMPLATENAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute TemplateName
     */
    public void setTemplateName(String value) {
        setAttributeInternal(TEMPLATENAME, value);
    }

    /**Gets the attribute value for the calculated attribute NodeName
     */
    public String getNodeName() {
        return (String)getAttributeInternal(NODENAME);
    }

    /**Sets <code>value</code> as the attribute value for the calculated attribute NodeName
     */
    public void setNodeName(String value) {
        setAttributeInternal(NODENAME, value);
    }
}
