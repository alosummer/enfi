package cux.oracle.apps.pa.ds.server;

import com.sun.java.util.collections.ArrayList;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OARowValException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAEntityDefImpl;
import oracle.apps.fnd.framework.server.OAEntityImpl;

import oracle.apps.fnd.framework.server.OAExceptionUtils;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DlvScheduleEOImpl extends OAEntityImpl {
    public static final int SCHEDULEID = 0;
    public static final int CUXDLVID = 1;
    public static final int PROJECTID = 2;
    public static final int TASKID = 3;
    public static final int APPROVESTATUS = 4;
    public static final int NODETYPE = 5;
    public static final int DESIGNNODE = 6;
    public static final int SCHEDULECOMPLETIONDATE = 7;
    public static final int RELEASEDEPT = 8;
    public static final int RELEASESPECIALTY = 9;
    public static final int ACCEPTSPECIALTY = 10;
    public static final int SCHEDULEDESC = 11;
    public static final int ATTRIBUTE1 = 12;
    public static final int ATTRIBUTE2 = 13;
    public static final int ATTRIBUTE3 = 14;
    public static final int ATTRIBUTE4 = 15;
    public static final int ATTRIBUTE5 = 16;
    public static final int ATTRIBUTE6 = 17;
    public static final int ATTRIBUTE7 = 18;
    public static final int ATTRIBUTE8 = 19;
    public static final int ATTRIBUTE9 = 20;
    public static final int CREATEDBY = 21;
    public static final int CREATIONDATE = 22;
    public static final int LASTUPDATEDBY = 23;
    public static final int LASTUPDATEDATE = 24;
    public static final int LASTUPDATELOGIN = 25;

    private static DlvScheduleEODefImpl mDefinitionObject;

    /**This is the default constructor (do not remove)
     */
    public DlvScheduleEOImpl() {
    }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = 
                    (DlvScheduleEODefImpl)EntityDefImpl.findDefObject("cux.oracle.apps.pa.ds.server.DlvScheduleEO");
        }
        return mDefinitionObject;
    }

    /**Add attribute defaulting logic in this method.
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();
        ArrayList exceptions = new ArrayList();
        if (this.getDesignNode() == null || "".equals(this.getDesignNode())) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E032"));
        }
        if (this.getNodeType() == null || "".equals(this.getNodeType())) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E031"));
        }
        if (this.getScheduleCompletionDate() == null) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E033"));
        }
        //        if (this.getReleaseDept() == null|| "".equals(this.getDesignNode())) {
        //            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
        //                                                 getPrimaryKey(), "CUX", 
        //                                                 "CUX-PM-E034"));
        //        }
        if (this.getReleaseSpecialty() == null || 
            "".equals(this.getReleaseSpecialty())) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E035"));
        }
        if (this.getAcceptSpecialty() == null || 
            "".equals(this.getAcceptSpecialty())) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E036"));
        }
        //        if (this.getNodeType() == "3.1.008" && this.getReleaseDept().indexOf(";") > 0) {
        //            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
        //                                                 getPrimaryKey(), "CUX", 
        //                                                 "CUX-PM-E037"));
        //        }
        if ("3.1.008".equals(getNodeType()) && 
            this.getReleaseSpecialty().indexOf(";") > 0) {
            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                 getPrimaryKey(), "CUX", 
                                                 "CUX-PM-E037"));
        }
        OAException.raiseBundledOAException(exceptions);
    }

    /**Gets the attribute value for ScheduleId, using the alias name ScheduleId
     */
    public Number getScheduleId() {
        return (Number)getAttributeInternal(SCHEDULEID);
    }

    /**Sets <code>value</code> as the attribute value for ScheduleId
     */
    public void setScheduleId(Number value) {
        setAttributeInternal(SCHEDULEID, value);
    }

    /**Gets the attribute value for CuxDlvId, using the alias name CuxDlvId
     */
    public Number getCuxDlvId() {
        return (Number)getAttributeInternal(CUXDLVID);
    }

    /**Sets <code>value</code> as the attribute value for CuxDlvId
     */
    public void setCuxDlvId(Number value) {
        setAttributeInternal(CUXDLVID, value);
    }

    /**Gets the attribute value for ProjectId, using the alias name ProjectId
     */
    public Number getProjectId() {
        return (Number)getAttributeInternal(PROJECTID);
    }

    /**Sets <code>value</code> as the attribute value for ProjectId
     */
    public void setProjectId(Number value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**Gets the attribute value for TaskId, using the alias name TaskId
     */
    public Number getTaskId() {
        return (Number)getAttributeInternal(TASKID);
    }

    /**Sets <code>value</code> as the attribute value for TaskId
     */
    public void setTaskId(Number value) {
        setAttributeInternal(TASKID, value);
    }

    /**Gets the attribute value for ApproveStatus, using the alias name ApproveStatus
     */
    public String getApproveStatus() {
        return (String)getAttributeInternal(APPROVESTATUS);
    }

    /**Sets <code>value</code> as the attribute value for ApproveStatus
     */
    public void setApproveStatus(String value) {
        setAttributeInternal(APPROVESTATUS, value);
    }

    /**Gets the attribute value for NodeType, using the alias name NodeType
     */
    public String getNodeType() {
        return (String)getAttributeInternal(NODETYPE);
    }

    /**Sets <code>value</code> as the attribute value for NodeType
     */
    public void setNodeType(String value) {
        setAttributeInternal(NODETYPE, value);
    }

    /**Gets the attribute value for DesignNode, using the alias name DesignNode
     */
    public String getDesignNode() {
        return (String)getAttributeInternal(DESIGNNODE);
    }

    /**Sets <code>value</code> as the attribute value for DesignNode
     */
    public void setDesignNode(String value) {
        setAttributeInternal(DESIGNNODE, value);
    }

    /**Gets the attribute value for ScheduleCompletionDate, using the alias name ScheduleCompletionDate
     */
    public Date getScheduleCompletionDate() {
        return (Date)getAttributeInternal(SCHEDULECOMPLETIONDATE);
    }

    /**Sets <code>value</code> as the attribute value for ScheduleCompletionDate
     */
    public void setScheduleCompletionDate(Date value) {
        setAttributeInternal(SCHEDULECOMPLETIONDATE, value);
    }

    /**Gets the attribute value for ReleaseDept, using the alias name ReleaseDept
     */
    public String getReleaseDept() {
        return (String)getAttributeInternal(RELEASEDEPT);
    }

    /**Sets <code>value</code> as the attribute value for ReleaseDept
     */
    public void setReleaseDept(String value) {
        if (value != null) {
            ArrayList exceptions = new ArrayList();
            String sql = 
                "SELECT COUNT(0) CNT\n" + "FROM HR_ALL_ORGANIZATION_UNITS HROU\n" + 
                "WHERE HROU.NAME = :1";
            if (value.indexOf(";") > 0) {
                String depts[] = value.split(";");
                OADBTransaction trxn = this.getOADBTransaction();
                for (int i = 0; i < depts.length; i++) {
                    CallableStatement cbStmt = 
                        trxn.createCallableStatement(sql, 1);
                    int cnt = 0;
                    try {
                        cbStmt.setString(1, depts[i]);
                        cbStmt.execute();
                        for (ResultSet rs = cbStmt.executeQuery(); rs.next(); 
                        ) {
                            cnt = rs.getInt("CNT");
                        }
                        cbStmt.close();
                        if (cnt == 0) {
                            MessageToken[] tokens = 
                            { new MessageToken("DPET", depts[i]) }; // entity full definition name 
                            // entity object primary key 
                            // message application short name
                            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                                 getPrimaryKey(), 
                                                                 "CUX", 
                                                                 "CUX-PM-E027", 
                                                                 tokens)); // message name 

                        }
                        OAExceptionUtils.checkErrors(trxn);
                    } catch (SQLException sqle) {
                        try {
                            cbStmt.close();
                        } catch (SQLException e) {
                        }
                        throw OAException.wrapperException(sqle);
                    }
                }
            } else {
                OADBTransaction trxn = this.getOADBTransaction();
                CallableStatement cbStmt = 
                    trxn.createCallableStatement(sql, 1);
                int cnt = 0;
                try {
                    cbStmt.setString(1, value);
                    cbStmt.execute();
                    for (ResultSet rs = cbStmt.executeQuery(); rs.next(); ) {
                        cnt = rs.getInt("CNT");
                    }
                    cbStmt.close();
                    if (cnt == 0) {
                        MessageToken[] tokens = 
                        { new MessageToken("DEPT", value) }; // entity full definition name 
                        // entity object primary key 
                        // message application short name
                        exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                             getPrimaryKey(), 
                                                             "CUX", 
                                                             "CUX-PM-E027", 
                                                             tokens)); // message name 

                    }
                    OAExceptionUtils.checkErrors(trxn);
                } catch (SQLException sqle) {
                    try {
                        cbStmt.close();
                    } catch (SQLException e) {
                    }
                    throw OAException.wrapperException(sqle);
                }
            }
            if (exceptions.size() > 0) {
                OAException.raiseBundledOAException(exceptions);
            }
        }
        setAttributeInternal(RELEASEDEPT, value);
    }

    /**Gets the attribute value for ReleaseSpecialty, using the alias name ReleaseSpecialty
     */
    public String getReleaseSpecialty() {
        return (String)getAttributeInternal(RELEASESPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for ReleaseSpecialty
     */
    public void setReleaseSpecialty(String value) {
        if (value != null) {
            ArrayList exceptions = new ArrayList();
            String sql = 
                "SELECT COUNT(0) CNT\n" + "FROM   fnd_lookup_values_vl flvv\n" + 
                "WHERE  flvv.lookup_type = 'ENFI_SPECIALITY'\n" + 
                "AND    flvv.enabled_flag = 'Y'\n" + 
                "AND    flvv.MEANING = :1";
            if (value.indexOf(";") > 0) {
                String specs[] = value.split(";");
                OADBTransaction trxn = this.getOADBTransaction();
                for (int i = 0; i < specs.length; i++) {
                    CallableStatement cbStmt = 
                        trxn.createCallableStatement(sql, 1);
                    int cnt = 0;
                    try {
                        cbStmt.setString(1, specs[i]);
                        cbStmt.execute();
                        for (ResultSet rs = cbStmt.executeQuery(); rs.next(); 
                        ) {
                            cnt = rs.getInt("CNT");
                        }
                        cbStmt.close();
                        if (cnt == 0) {
                            MessageToken[] tokens = 
                            { new MessageToken("SPEC", specs[i]) }; // entity full definition name 
                            // entity object primary key 
                            // message application short name
                            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                                 getPrimaryKey(), 
                                                                 "CUX", 
                                                                 "CUX-PM-E004", 
                                                                 tokens)); // message name 

                        }
                        OAExceptionUtils.checkErrors(trxn);
                    } catch (SQLException sqle) {
                        try {
                            cbStmt.close();
                        } catch (SQLException e) {
                        }
                        throw OAException.wrapperException(sqle);
                    }
                }
            } else {
                OADBTransaction trxn = this.getOADBTransaction();
                CallableStatement cbStmt = 
                    trxn.createCallableStatement(sql, 1);
                int cnt = 0;
                try {
                    cbStmt.setString(1, value);
                    cbStmt.execute();
                    for (ResultSet rs = cbStmt.executeQuery(); rs.next(); ) {
                        cnt = rs.getInt("CNT");
                    }
                    cbStmt.close();
                    if (cnt == 0) {
                        MessageToken[] tokens = 
                        { new MessageToken("SPEC", value) }; // entity full definition name 
                        // entity object primary key 
                        // message application short name
                        exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                             getPrimaryKey(), 
                                                             "CUX", 
                                                             "CUX-PM-E004", 
                                                             tokens)); // message name 

                    }
                    OAExceptionUtils.checkErrors(trxn);
                } catch (SQLException sqle) {
                    try {
                        cbStmt.close();
                    } catch (SQLException e) {
                    }
                    throw OAException.wrapperException(sqle);
                }
            }
            if (exceptions.size() > 0) {
                OAException.raiseBundledOAException(exceptions);
            }
        }
        setAttributeInternal(RELEASESPECIALTY, value);
    }

    /**Gets the attribute value for AcceptSpecialty, using the alias name AcceptSpecialty
     */
    public String getAcceptSpecialty() {
        return (String)getAttributeInternal(ACCEPTSPECIALTY);
    }

    /**Sets <code>value</code> as the attribute value for AcceptSpecialty
     */
    public void setAcceptSpecialty(String value) {
        if (value != null) {
            ArrayList exceptions = new ArrayList();
            String sql = 
                "SELECT COUNT(0) CNT\n" + "FROM   fnd_lookup_values_vl flvv\n" + 
                "WHERE  flvv.lookup_type = 'ENFI_SPECIALITY'\n" + 
                "AND    flvv.enabled_flag = 'Y'\n" + 
                "AND    flvv.MEANING = :1";
            if (value.indexOf(";") > 0) {
                String specs[] = value.split(";");
                OADBTransaction trxn = this.getOADBTransaction();
                for (int i = 0; i < specs.length; i++) {
                    CallableStatement cbStmt = 
                        trxn.createCallableStatement(sql, 1);
                    int cnt = 0;
                    try {
                        cbStmt.setString(1, specs[i]);
                        cbStmt.execute();
                        for (ResultSet rs = cbStmt.executeQuery(); rs.next(); 
                        ) {
                            cnt = rs.getInt("CNT");
                        }
                        cbStmt.close();
                        if (cnt == 0) {
                            MessageToken[] tokens = 
                            { new MessageToken("SPEC", specs[i]) }; // entity full definition name 
                            // entity object primary key 
                            // message application short name
                            exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                                 getPrimaryKey(), 
                                                                 "CUX", 
                                                                 "CUX-PM-E004", 
                                                                 tokens)); // message name 

                        }
                        OAExceptionUtils.checkErrors(trxn);
                    } catch (SQLException sqle) {
                        try {
                            cbStmt.close();
                        } catch (SQLException e) {
                        }
                        throw OAException.wrapperException(sqle);
                    }
                }
            } else {
                OADBTransaction trxn = this.getOADBTransaction();
                CallableStatement cbStmt = 
                    trxn.createCallableStatement(sql, 1);
                int cnt = 0;
                try {
                    cbStmt.setString(1, value);
                    cbStmt.execute();
                    for (ResultSet rs = cbStmt.executeQuery(); rs.next(); ) {
                        cnt = rs.getInt("CNT");
                    }
                    cbStmt.close();
                    if (cnt == 0) {
                        MessageToken[] tokens = 
                        { new MessageToken("SPEC", value) }; // entity full definition name 
                        // entity object primary key 
                        // message application short name
                        exceptions.add(new OARowValException(getEntityDef().getFullName(), 
                                                             getPrimaryKey(), 
                                                             "CUX", 
                                                             "CUX-PM-E004", 
                                                             tokens)); // message name 

                    }
                    OAExceptionUtils.checkErrors(trxn);
                } catch (SQLException sqle) {
                    try {
                        cbStmt.close();
                    } catch (SQLException e) {
                    }
                    throw OAException.wrapperException(sqle);
                }
            }
            if (exceptions.size() > 0) {
                OAException.raiseBundledOAException(exceptions);
            }
        }
        setAttributeInternal(ACCEPTSPECIALTY, value);
    }

    /**Gets the attribute value for ScheduleDesc, using the alias name ScheduleDesc
     */
    public String getScheduleDesc() {
        return (String)getAttributeInternal(SCHEDULEDESC);
    }

    /**Sets <code>value</code> as the attribute value for ScheduleDesc
     */
    public void setScheduleDesc(String value) {
        setAttributeInternal(SCHEDULEDESC, value);
    }

    /**Gets the attribute value for Attribute1, using the alias name Attribute1
     */
    public String getAttribute1() {
        return (String)getAttributeInternal(ATTRIBUTE1);
    }

    /**Sets <code>value</code> as the attribute value for Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**Gets the attribute value for Attribute2, using the alias name Attribute2
     */
    public String getAttribute2() {
        return (String)getAttributeInternal(ATTRIBUTE2);
    }

    /**Sets <code>value</code> as the attribute value for Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**Gets the attribute value for Attribute3, using the alias name Attribute3
     */
    public String getAttribute3() {
        return (String)getAttributeInternal(ATTRIBUTE3);
    }

    /**Sets <code>value</code> as the attribute value for Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**Gets the attribute value for Attribute4, using the alias name Attribute4
     */
    public String getAttribute4() {
        return (String)getAttributeInternal(ATTRIBUTE4);
    }

    /**Sets <code>value</code> as the attribute value for Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**Gets the attribute value for Attribute5, using the alias name Attribute5
     */
    public String getAttribute5() {
        return (String)getAttributeInternal(ATTRIBUTE5);
    }

    /**Sets <code>value</code> as the attribute value for Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**Gets the attribute value for Attribute6, using the alias name Attribute6
     */
    public String getAttribute6() {
        return (String)getAttributeInternal(ATTRIBUTE6);
    }

    /**Sets <code>value</code> as the attribute value for Attribute6
     */
    public void setAttribute6(String value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**Gets the attribute value for Attribute7, using the alias name Attribute7
     */
    public String getAttribute7() {
        return (String)getAttributeInternal(ATTRIBUTE7);
    }

    /**Sets <code>value</code> as the attribute value for Attribute7
     */
    public void setAttribute7(String value) {
        setAttributeInternal(ATTRIBUTE7, value);
    }

    /**Gets the attribute value for Attribute8, using the alias name Attribute8
     */
    public String getAttribute8() {
        return (String)getAttributeInternal(ATTRIBUTE8);
    }

    /**Sets <code>value</code> as the attribute value for Attribute8
     */
    public void setAttribute8(String value) {
        setAttributeInternal(ATTRIBUTE8, value);
    }

    /**Gets the attribute value for Attribute9, using the alias name Attribute9
     */
    public String getAttribute9() {
        return (String)getAttributeInternal(ATTRIBUTE9);
    }

    /**Sets <code>value</code> as the attribute value for Attribute9
     */
    public void setAttribute9(String value) {
        setAttributeInternal(ATTRIBUTE9, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreationDate, using the alias name CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**Sets <code>value</code> as the attribute value for CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin
     */
    public Number getLastUpdateLogin() {
        return (Number)getAttributeInternal(LASTUPDATELOGIN);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdateLogin
     */
    public void setLastUpdateLogin(Number value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case SCHEDULEID:
            return getScheduleId();
        case CUXDLVID:
            return getCuxDlvId();
        case PROJECTID:
            return getProjectId();
        case TASKID:
            return getTaskId();
        case APPROVESTATUS:
            return getApproveStatus();
        case NODETYPE:
            return getNodeType();
        case DESIGNNODE:
            return getDesignNode();
        case SCHEDULECOMPLETIONDATE:
            return getScheduleCompletionDate();
        case RELEASEDEPT:
            return getReleaseDept();
        case RELEASESPECIALTY:
            return getReleaseSpecialty();
        case ACCEPTSPECIALTY:
            return getAcceptSpecialty();
        case SCHEDULEDESC:
            return getScheduleDesc();
        case ATTRIBUTE1:
            return getAttribute1();
        case ATTRIBUTE2:
            return getAttribute2();
        case ATTRIBUTE3:
            return getAttribute3();
        case ATTRIBUTE4:
            return getAttribute4();
        case ATTRIBUTE5:
            return getAttribute5();
        case ATTRIBUTE6:
            return getAttribute6();
        case ATTRIBUTE7:
            return getAttribute7();
        case ATTRIBUTE8:
            return getAttribute8();
        case ATTRIBUTE9:
            return getAttribute9();
        case CREATEDBY:
            return getCreatedBy();
        case CREATIONDATE:
            return getCreationDate();
        case LASTUPDATEDBY:
            return getLastUpdatedBy();
        case LASTUPDATEDATE:
            return getLastUpdateDate();
        case LASTUPDATELOGIN:
            return getLastUpdateLogin();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case SCHEDULEID:
            setScheduleId((Number)value);
            return;
        case CUXDLVID:
            setCuxDlvId((Number)value);
            return;
        case PROJECTID:
            setProjectId((Number)value);
            return;
        case TASKID:
            setTaskId((Number)value);
            return;
        case APPROVESTATUS:
            setApproveStatus((String)value);
            return;
        case NODETYPE:
            setNodeType((String)value);
            return;
        case DESIGNNODE:
            setDesignNode((String)value);
            return;
        case SCHEDULECOMPLETIONDATE:
            setScheduleCompletionDate((Date)value);
            return;
        case RELEASEDEPT:
            setReleaseDept((String)value);
            return;
        case RELEASESPECIALTY:
            setReleaseSpecialty((String)value);
            return;
        case ACCEPTSPECIALTY:
            setAcceptSpecialty((String)value);
            return;
        case SCHEDULEDESC:
            setScheduleDesc((String)value);
            return;
        case ATTRIBUTE1:
            setAttribute1((String)value);
            return;
        case ATTRIBUTE2:
            setAttribute2((String)value);
            return;
        case ATTRIBUTE3:
            setAttribute3((String)value);
            return;
        case ATTRIBUTE4:
            setAttribute4((String)value);
            return;
        case ATTRIBUTE5:
            setAttribute5((String)value);
            return;
        case ATTRIBUTE6:
            setAttribute6((String)value);
            return;
        case ATTRIBUTE7:
            setAttribute7((String)value);
            return;
        case ATTRIBUTE8:
            setAttribute8((String)value);
            return;
        case ATTRIBUTE9:
            setAttribute9((String)value);
            return;
        case CREATEDBY:
            setCreatedBy((Number)value);
            return;
        case CREATIONDATE:
            setCreationDate((Date)value);
            return;
        case LASTUPDATEDBY:
            setLastUpdatedBy((Number)value);
            return;
        case LASTUPDATEDATE:
            setLastUpdateDate((Date)value);
            return;
        case LASTUPDATELOGIN:
            setLastUpdateLogin((Number)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }

    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(Number scheduleId) {
        return new Key(new Object[] { scheduleId });
    }
}
